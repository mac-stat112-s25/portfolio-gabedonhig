[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "COMP/STAT112 Notebook",
    "section": "",
    "text": "Welcome\nWelcome to my online portfolio for COMP/STAT112 course taken at Macalester College. Please, use the side bar on the left for navigation.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "bw/bw-uni.html",
    "href": "bw/bw-uni.html",
    "title": "\n1  Univariate Viz\n",
    "section": "",
    "text": "1.1 Research question:\nWhat is the distribution of the length of titles for movies and tv shows on streaming platforms",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-uni.html#step-1-load-necessary-packages",
    "href": "bw/bw-uni.html#step-1-load-necessary-packages",
    "title": "\n1  Univariate Viz\n",
    "section": "\n1.2 Step 1: Load necessary packages",
    "text": "1.2 Step 1: Load necessary packages\n\nCodelibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nCodelibrary(ggthemes)",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-uni.html#step-2-import-and-clean-wrangle-data",
    "href": "bw/bw-uni.html#step-2-import-and-clean-wrangle-data",
    "title": "\n1  Univariate Viz\n",
    "section": "\n1.3 Step 2: Import and clean / wrangle data",
    "text": "1.3 Step 2: Import and clean / wrangle data\n\nCodemessy_movies &lt;- read_csv(\"../data/MoviesOnStreamingPlatforms.csv\")\n\nNew names:\nRows: 9515 Columns: 11\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(3): Title, Age, Rotten Tomatoes dbl (8): ...1, ID, Year, Netflix, Hulu, Prime\nVideo, Disney+, Type\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...1`\n\nCodemovies_len &lt;- messy_movies |&gt;\n  mutate(title_len = str_length(Title)) |&gt; # I am mutating a variable that counts the length of the Title variable\n  select(title_len) # since the title_len variable is the only thing I need, I am only going to select that variable in this dataset I am creating",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-uni.html#step-3-put-data-into-a-plot",
    "href": "bw/bw-uni.html#step-3-put-data-into-a-plot",
    "title": "\n1  Univariate Viz\n",
    "section": "\n1.4 Step 3: Put data into a plot",
    "text": "1.4 Step 3: Put data into a plot\n\nCodeggplot(movies_len, aes(x = title_len)) +\n  geom_histogram(color = \"cornsilk\", # this helps to make the bars contrast against each other\n                 binwidth = 5) + # this allows the data to be broken into classes, making it easier to explain and understand\n  theme_solarized() +\n  labs(x = \"Total Characters in Title\",\n       y = \"Movies and TV Shows\",\n       title = \"Movies and TV Shows on Streaming Services Versus the Total Characters in Their Title\")\n\n\n\nHistogram of the distribution of movies and TV shows by the total number of characters in their title",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-uni.html#conclusion",
    "href": "bw/bw-uni.html#conclusion",
    "title": "\n1  Univariate Viz\n",
    "section": "\n1.5 Conclusion:",
    "text": "1.5 Conclusion:\nMovies and TV shows on streaming services tends to offer less entertainment as the title of the entertainment more characters than 15. A plurality of the entertainment has 11-15 characters, sharply followed by 6-10. As one looks for movies and tv shows with titles longer than 15 characetrs, the number of observations decreases exponentially. There could be many reasons for this such as audiences’ attention spans preferring shorter titles or writers simply coming up with shorter titles more often than very long ones.",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-uni.html#references",
    "href": "bw/bw-uni.html#references",
    "title": "\n1  Univariate Viz\n",
    "section": "\n1.6 References:",
    "text": "1.6 References:\nhttps://www.kaggle.com/datasets/ruchi798/movies-on-netflix-prime-video-hulu-and-disney (accessed: April 11th, 2025)",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-bi.html",
    "href": "bw/bw-bi.html",
    "title": "\n2  Bivariate Viz\n",
    "section": "",
    "text": "2.1 Research question:\nWhat is the distribution of gender by age among American billionaires",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-bi.html#step-1-load-necessary-packages",
    "href": "bw/bw-bi.html#step-1-load-necessary-packages",
    "title": "\n2  Bivariate Viz\n",
    "section": "\n2.2 Step 1: Load necessary packages",
    "text": "2.2 Step 1: Load necessary packages\n\nCodelibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nCodelibrary(ggthemes)\nlibrary(ggplot2)",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-bi.html#step-2-import-and-clean-wrangle-data",
    "href": "bw/bw-bi.html#step-2-import-and-clean-wrangle-data",
    "title": "\n2  Bivariate Viz\n",
    "section": "\n2.3 Step 2: Import and clean / wrangle data",
    "text": "2.3 Step 2: Import and clean / wrangle data\n\nCodemessy_billionaires &lt;- read_csv(\"../data/Billionaires Statistics Dataset.csv\")\n\nRows: 2640 Columns: 35\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (18): category, personName, country, city, source, industries, countryOf...\ndbl (16): rank, finalWorth, age, birthYear, birthMonth, birthDay, cpi_countr...\nlgl  (1): selfMade\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nCodebillionaires &lt;- messy_billionaires |&gt;\n  filter(countryOfCitizenship == \"United States\") # we want to look at American Billionaires",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-bi.html#step-3-vizualize",
    "href": "bw/bw-bi.html#step-3-vizualize",
    "title": "\n2  Bivariate Viz\n",
    "section": "\n2.4 Step 3: Vizualize",
    "text": "2.4 Step 3: Vizualize\n\nCodeggplot(billionaires, aes(x = age, fill = gender, position = \"fill\")) +\n  geom_histogram(color = \"cornsilk\", position = \"fill\", binwidth = 3) +\n  theme_solarized() +\n  labs(x = \"Age of Billionares\", y = \"Distribution\", title = \"Distribution of Gender by Age Among American Billionaires\", fill = \"Gender\")\n\n\n\nHistogram of Distribution of Gender by Age Among Billionaires",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-bi.html#conclusion",
    "href": "bw/bw-bi.html#conclusion",
    "title": "\n2  Bivariate Viz\n",
    "section": "\n2.5 Conclusion:",
    "text": "2.5 Conclusion:\nMale billionaires overwhelmingly makeup the majority of American billionaires across every age group of billionaires. Women make up a small amount of them, except for a few groups between the age of 80 and 100.",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-bi.html#references",
    "href": "bw/bw-bi.html#references",
    "title": "\n2  Bivariate Viz\n",
    "section": "\n2.6 References:",
    "text": "2.6 References:\nhttps://www.kaggle.com/datasets/nelgiriyewithana/billionaires-statistics-dataset (accessed: 13th April, 2025)",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-tri.html",
    "href": "bw/bw-tri.html",
    "title": "\n3  Trivariate Viz\n",
    "section": "",
    "text": "3.1 Research question:\nDo rates of gay marriage increase in European countries as GDP per capita increases, or vice versa, and is the correlation different depending on a countries’ LGBT Equality Index",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Trivariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-tri.html#step-1-load-necessary-packages",
    "href": "bw/bw-tri.html#step-1-load-necessary-packages",
    "title": "\n3  Trivariate Viz\n",
    "section": "\n3.2 Step 1: Load necessary packages",
    "text": "3.2 Step 1: Load necessary packages\n\nCodelibrary(forcats)\nlibrary(ggplot2)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ stringr   1.5.1\n✔ lubridate 1.9.4     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.1\n✔ readr     2.1.5     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nCodelibrary(dplyr)\nlibrary(ggthemes)",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Trivariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-tri.html#step-2-import-and-clean-wrangle-join-data",
    "href": "bw/bw-tri.html#step-2-import-and-clean-wrangle-join-data",
    "title": "\n3  Trivariate Viz\n",
    "section": "\n3.3 Step 2: Import and clean / wrangle / join data",
    "text": "3.3 Step 2: Import and clean / wrangle / join data\nData about marriages in European countries:\n\nCodemessy_euro_households &lt;- read_csv(\"../data/estat_cens_21m$defaultview_filtered_en.csv\")\n\nRows: 232 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): DATAFLOW, LAST UPDATE, freq, marsta, age, sex, unit, geo, OBS_FLAG...\ndbl  (2): TIME_PERIOD, OBS_VALUE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nCodeeuro_households &lt;- messy_euro_households |&gt;\n  filter(TIME_PERIOD == 2021) |&gt; # I am setting the data to come from 2021 so that it matches my data on the GDP per capita of European countries\n  select(geo, OBS_VALUE, marsta) |&gt;\n  filter(marsta %in% c(\"Persons in an same-sex married couple or registered partnership\", \"Married persons or in registered partnership\")) |&gt; # from this dataset, we want to use the values for couples who are homosexual and the total couples\n  mutate(marsta = fct_recode(marsta, \n                             \"homo_couples\" = \"Persons in an same-sex married couple or registered partnership\",\n                             \"all_couples\" = \"Married persons or in registered partnership\")) |&gt; # I am renaming the code to factors because the current titles cannot be used in r code to do equations\n  pivot_wider(names_from = marsta, values_from = OBS_VALUE) |&gt; # I am making the information spread onto one row so I can then use the values as part of the same row to calculate the percent of the couples who are homosexual\n  mutate(pct_homo_marriages = (homo_couples / all_couples) * 100) # I am making a new variable that represents the percent of each nation's couples which are homosexual, answering a necessary part of my research question\n\n\nData about the GDP of European countries:\n\nCodemessy_euro_gdp_capita &lt;- read_csv(\"../data/estat_sdg_08_10_filtered_en (1).csv\")\n\nRows: 936 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): DATAFLOW, LAST UPDATE, freq, unit, na_item, geo, OBS_FLAG\ndbl (2): TIME_PERIOD, OBS_VALUE\nlgl (1): CONF_STATUS\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nCodeeuro_gdp_capita &lt;- messy_euro_gdp_capita |&gt;\n  filter(TIME_PERIOD == 2021) |&gt;\n  select(geo, OBS_VALUE)\n\neuro_gdp_marriages &lt;- euro_households |&gt;\n  left_join(euro_gdp_capita, join_by(geo == geo)) # I am using left join here to combine the datasets on GDP per capita and the rates of couples that are homosexual in European countries\n\n\nData on the LGBT Equality Index of countries around the world:\n\nCodemessy_gay_rights &lt;- read_csv(\"../data/equaldex_equality_index.csv\")\n\nRows: 197 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Rank, Region ID\ndbl (4): Name, EI, EI Legal, EI PO\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nCodegay_rights &lt;- messy_gay_rights |&gt;\n  select(`Region ID`, EI) |&gt;\n  mutate(EI = cut(EI, \n                  breaks = c(50, 70, 80, 90, Inf),\n                  labels = c(\"50-69\", \"70-79\", \"80-89\", \"90-100\"),\n                  include.lowest = TRUE)) # I am breaking the equality index of each country into quantitative classes so that it is easier for the viewer to read the plot later\n\nmy_colors &lt;- c(\n  \"50-69\" = \"#529985\",\n  \"70-79\" = \"#78A269\",\n  \"80-89\" = \"#E3C849\",\n  \"90-100\" = \"#C26B51\") # here I am assigning colors for each of the classes\n\neuro_gdp_marriages_rights &lt;- euro_gdp_marriages |&gt;\n  left_join(gay_rights, join_by(geo == 'Region ID'))",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Trivariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-tri.html#step-3-visualize",
    "href": "bw/bw-tri.html#step-3-visualize",
    "title": "\n3  Trivariate Viz\n",
    "section": "\n3.4 Step 3: Visualize",
    "text": "3.4 Step 3: Visualize\n\nCodeggplot(euro_gdp_marriages_rights, aes(x = pct_homo_marriages, y = OBS_VALUE, color = EI)) +\n  geom_point(size = 3,\n             alpha = 0.8) +\n  scale_color_manual(name = \"LGBT Equality Index\",\n                     values = my_colors) + # here I am using my previously assigned colors for the factors\n  theme_solarized() +\n  geom_smooth(method = \"lm\",\n              se = FALSE) + # I am getting rid of the confidence interval because it obscures much of the graph\n  labs(x = \"Percent of Couples Which are Homosexual\", \n       y = \"Real GDP Per Capita in Euros\", \n       title = \"Percent of Couples Which are Homosexual, Real GDP per capita, and the LGBT Equality Index of European Countries\") +\n  geom_smooth(aes(x = pct_homo_marriages, y = OBS_VALUE),\n              method = \"lm\", \n              line_type = \"dashed\",\n              se = FALSE,\n              inherit.aes = FALSE,\n              color = \"black\",\n              linewidth = 2) # I increase the linewidth to make it clear that this line in the most important, different from the others as a representation of the overall trend\n\nWarning in geom_smooth(aes(x = pct_homo_marriages, y = OBS_VALUE), method =\n\"lm\", : Ignoring unknown parameters: `line_type`\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\nA Scatterplot of Countries’ Percent of Couples Which Are Homosexual and Real GDP per Capita, with points color coded by their class in the LGBT Equality Index, and using trend lines for each class along with a an overall trend line for all points regardless of class",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Trivariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-tri.html#conclusion",
    "href": "bw/bw-tri.html#conclusion",
    "title": "\n3  Trivariate Viz\n",
    "section": "\n3.5 Conclusion:",
    "text": "3.5 Conclusion:\nWhile this plot is not enough to make definitive conclusions, it does appear to show slight correlations. Interestingly, there are only two situations where the real GDP per capita decreases as the percent of couples that are homosexual increases. Firstly, when the LGBT inequality index is between 90-100, and also when it is between 50-69. It is quite ironic, and possibly suggests that the LGBT equality index isn’t even having an actual effect. The decrease observed is relatively small compared to the large increase that can be observed between from countries in the 70-79 range and the 80-89 range. The thick black line represents the overall correlation between real GDP per capita and the percent of couples which are homosexual, regardless of the LGBT equality index, showing a large increase. Whether one causes the other is difficult to say. Perhaps marriages causes the GDP to increase, and as homosexual people become able to marry, their marriages increase the GDP per capita. Or perhaps increasing GDP per capita spurs increased homosexual marriages as a percent of the couples in a country’s population. There are a lot of explanations that should be explored, and whether or not there is a strong correlation between LGBT equality index scores, the percent of couples which are homosexual, and the Real GDP per capita should be investigated.",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Trivariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-tri.html#references",
    "href": "bw/bw-tri.html#references",
    "title": "\n3  Trivariate Viz\n",
    "section": "\n3.6 references",
    "text": "3.6 references\nhttps://ec.europa.eu/eurostat/databrowser/view/cens_21m/default/table?lang=en&category=cens.cens_21.cens_21fh (accessed: April 13th, 2025) https://ec.europa.eu/eurostat/databrowser/view/sdg_08_10/default/table?lang=en (accessed: April 13th, 2025) https://www.equaldex.com/equality-index-api (accessed: April 13th, 2025)",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Trivariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-quad.html",
    "href": "bw/bw-quad.html",
    "title": "\n4  Quadvariate Viz\n",
    "section": "",
    "text": "Codelibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nCodelibrary(ggthemes)\n\nmessy_aussie_data &lt;- read_csv(\"../data/ABS,ABS_REGIONAL_ASGS2021,1.3.0+CABEE_5+CABEE_15+CABEE_10+MIGRATION_7+MIGRATION_4+BD_3+BD_4+BD_2+ERP_P_20.SA3..A.csv\")\n\nRows: 3016 Columns: 24\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (13): STRUCTURE, STRUCTURE_ID, STRUCTURE_NAME, ACTION, MEASURE, Data Ite...\ndbl  (3): ASGS_2021, TIME_PERIOD, OBS_VALUE\nlgl  (8): Time Period, Observation Value, UNIT_MULT, Unit of Multiplier, OBS...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nCodeaussie_data &lt;- messy_aussie_data |&gt;\n  select(Region, `Data Item`, OBS_VALUE) |&gt;\n  mutate(`Data Item` = fct_recode(`Data Item`,\n                                  \"fert_rate\" = \"Total fertility rate (births per female) (rate)\",\n                                  \"net_over_migr\" = \"Net overseas migration (no.)\",\n                                  \"net_inter_migr\" = \"Net internal migration (no.)\",\n                                  \"reg_births\" = \"Registered births (no.)\",\n                                  \"reg_deaths\" = \"Registered deaths (no.)\",\n                                  \"total_pop\" = \"Estimated resident population: Persons (no.)\",\n                                  \"total_busi_exits\" = \"Total business exits (no.)\",\n                                  \"total_busi_entr\" = \"Total business entries (no.)\",\n                                  \"total_busi\" = \"Total businesses (no.)\")) |&gt;\n  pivot_wider(names_from = `Data Item`, values_from = OBS_VALUE) |&gt;\n  filter(!is.na(fert_rate)) |&gt;\n  mutate(net_pop = reg_births - reg_deaths) |&gt; # total births - deaths\n  mutate(net_migr = net_over_migr + net_inter_migr) |&gt; # the total change in migrants\n  mutate(net_busi = total_busi_entr - total_busi_exits) |&gt; # the total change in businesses\n  mutate(pct_inter_migr = (net_inter_migr / total_pop) * 100) |&gt; # net internal migration as a percent of total pop\n  mutate(pct_over_migr = (net_over_migr / total_pop) * 100) |&gt; # net overseas migration as a percent of total pop\n  mutate(pct_migr = (net_migr / total_pop) * 100) |&gt; # the pct change in population by migrants\n  mutate(pct_pop = (net_pop / total_pop) * 100) |&gt; # the pct change in population\n  mutate(pct_busi = (net_busi / total_busi) * 100) |&gt; # the pct change in businesses\n  mutate(yn_fert_rate = cut(fert_rate,\n                          breaks = c(0, 2.1, Inf),\n                          labels = c(\"Below replacement rate\", \"Above replacement rate\"),\n                          include.lowest = TRUE)) |&gt;\n  mutate(yn_net_migr = cut(net_migr,\n                          breaks = c(-99999999, 0, Inf),\n                          labels = c(\"Lost population through migration\", \"Gained population through migration\"),\n                          include.lowest = TRUE)) |&gt;\n  mutate(yn_inter_migr = cut(net_inter_migr,\n                          breaks = c(-99999999, 0, Inf),\n                          labels = c(\"Net Negative internal migration\", \"Net Positive internal migration\"),\n                          include.lowest = TRUE)) |&gt;\n  mutate(yn_over_migr = cut(net_over_migr,\n                          breaks = c(-99999999, 0, Inf),\n                          labels = c(\"Lost population through overseas migration\", \"Gained population through overseas migration\"),\n                          include.lowest = TRUE)) |&gt;\n  mutate(yn_net_busi = cut(net_busi,\n                          breaks = c(-99999999, 0, Inf),\n                          labels = c(\"Lost more businesses than gained\", \"Gained more businesses than lost\"),\n                          include.lowest = TRUE)) |&gt;\n  filter(!is.na(yn_inter_migr))\n  \nsummary(aussie_data)  \n\n    Region            total_pop        reg_births       fert_rate    \n Length:331         Min.   :  1969   Min.   :  15.0   Min.   :0.640  \n Class :character   1st Qu.: 40834   1st Qu.: 431.0   1st Qu.:1.530  \n Mode  :character   Median : 63525   Median : 692.0   Median :1.830  \n                    Mean   : 78375   Mean   : 903.9   Mean   :1.749  \n                    3rd Qu.:102706   3rd Qu.:1143.0   3rd Qu.:1.980  \n                    Max.   :314096   Max.   :5378.0   Max.   :2.690  \n   reg_deaths     net_inter_migr      net_over_migr      total_busi   \n Min.   :   8.0   Min.   :-6293.000   Min.   :   8.0   Min.   :  195  \n 1st Qu.: 318.5   1st Qu.: -439.000   1st Qu.: 143.0   1st Qu.: 3792  \n Median : 503.0   Median :  -21.000   Median : 343.0   Median : 5916  \n Mean   : 573.2   Mean   :    0.039   Mean   : 612.6   Mean   : 7686  \n 3rd Qu.: 789.0   3rd Qu.:  408.000   3rd Qu.: 747.5   3rd Qu.: 9139  \n Max.   :1874.0   Max.   : 8403.000   Max.   :6498.0   Max.   :76873  \n total_busi_entr total_busi_exits    net_pop          net_migr      \n Min.   :   35   Min.   :  26.0   Min.   :-323.0   Min.   :-4019.0  \n 1st Qu.:  572   1st Qu.: 397.0   1st Qu.:  24.0   1st Qu.:  -56.5  \n Median :  963   Median : 662.0   Median : 209.0   Median :  306.0  \n Mean   : 1417   Mean   : 912.1   Mean   : 330.7   Mean   :  612.6  \n 3rd Qu.: 1700   3rd Qu.:1102.5   3rd Qu.: 448.0   3rd Qu.:  872.5  \n Max.   :12677   Max.   :9314.0   Max.   :4322.0   Max.   : 9477.0  \n    net_busi      pct_inter_migr    pct_over_migr       pct_migr      \n Min.   :   5.0   Min.   :-3.4823   Min.   :0.1124   Min.   :-2.1741  \n 1st Qu.: 149.5   1st Qu.:-0.8086   1st Qu.:0.2989   1st Qu.:-0.1155  \n Median : 293.0   Median :-0.0256   Median :0.4670   Median : 0.6134  \n Mean   : 504.5   Mean   : 0.0887   Mean   :0.6664   Mean   : 0.7551  \n 3rd Qu.: 525.0   3rd Qu.: 0.8146   3rd Qu.:0.8583   3rd Qu.: 1.3350  \n Max.   :8155.0   Max.   : 7.9566   Max.   :4.0533   Max.   : 8.3868  \n    pct_pop            pct_busi                       yn_fert_rate\n Min.   :-0.93842   Min.   : 0.9601   Below replacement rate:286  \n 1st Qu.: 0.05088   1st Qu.: 3.6220   Above replacement rate: 45  \n Median : 0.34263   Median : 4.9741                               \n Mean   : 0.35294   Mean   : 5.7289                               \n 3rd Qu.: 0.59615   3rd Qu.: 6.6272                               \n Max.   : 1.78077   Max.   :24.9160                               \n                              yn_net_migr \n Lost population through migration  : 96  \n Gained population through migration:235  \n                                          \n                                          \n                                          \n                                          \n                         yn_inter_migr\n Net Negative internal migration:171  \n Net Positive internal migration:160  \n                                      \n                                      \n                                      \n                                      \n                                       yn_over_migr\n Lost population through overseas migration  :  0  \n Gained population through overseas migration:331  \n                                                   \n                                                   \n                                                   \n                                                   \n                           yn_net_busi \n Lost more businesses than gained:  0  \n Gained more businesses than lost:331  \n                                       \n                                       \n                                       \n                                       \n\nCodeaussie_data\n\n# A tibble: 331 × 23\n   Region total_pop reg_births fert_rate reg_deaths net_inter_migr net_over_migr\n   &lt;chr&gt;      &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;      &lt;dbl&gt;          &lt;dbl&gt;         &lt;dbl&gt;\n 1 Gosfo…    178868       1878      1.87       1788          -1364           805\n 2 Wyong     170290       2152      2.05       1847             25           463\n 3 Baulk…    155374       1181      1.36       1029          -1503          1347\n 4 Dural…     28008        204      1.66        216           -129           126\n 5 Hawke…     25130        292      2.11        128           -289            49\n 6 Rouse…     62992        858      1.85        158           5012           271\n 7 Black…    143628       1969      1.83        954          -2621          1543\n 8 Black…    155305       2369      1.84        380           8403          1060\n 9 Mount…    116243       1781      2.1         787          -2369           855\n10 Botany     60892        846      1.41        314            169           895\n# ℹ 321 more rows\n# ℹ 16 more variables: total_busi &lt;dbl&gt;, total_busi_entr &lt;dbl&gt;,\n#   total_busi_exits &lt;dbl&gt;, net_pop &lt;dbl&gt;, net_migr &lt;dbl&gt;, net_busi &lt;dbl&gt;,\n#   pct_inter_migr &lt;dbl&gt;, pct_over_migr &lt;dbl&gt;, pct_migr &lt;dbl&gt;, pct_pop &lt;dbl&gt;,\n#   pct_busi &lt;dbl&gt;, yn_fert_rate &lt;fct&gt;, yn_net_migr &lt;fct&gt;, yn_inter_migr &lt;fct&gt;,\n#   yn_over_migr &lt;fct&gt;, yn_net_busi &lt;fct&gt;\n\n\n\nCodeggplot(aussie_data, aes(x = total_pop, y = pct_over_migr, color = yn_fert_rate)) +\n  geom_point(alpha = 0.6,\n             size = 0.75) +\n  facet_wrap(~yn_inter_migr) +\n  geom_smooth(method = \"lm\",\n              se = FALSE) +\n  theme_solarized(light = FALSE) +\n  scale_color_solarized() +\n  scale_color_solarized(name = \"Fertility Rate\") +\n  labs(x = \"Population\", y = \"New Overseas Migrants as % of Pop.\") \n\nScale for colour is already present.\nAdding another scale for colour, which will replace the existing scale.\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nhttps://dataexplorer.abs.gov.au/vis?fs[0]=Data%20by%20region%2C0%7CMain%20Structure%20and%20Greater%20Capital%20City%20Statistical%20Areas%23ASGS%23&pg=0&fc=Data%20by%20region&df[ds]=DATA_BY_REGION_TOPICS&df[id]=ABS_REGIONAL_ASGS2021&df[ag]=ABS&df[vs]=1.3.0&pd=2022%2C2022&dq=CABEE_5%2BCABEE_15%2BCABEE_10%2BMIGRATION_7%2BMIGRATION_4%2BBD_3%2BBD_4%2BBD_2%2BERP_P_20.SA3..A&ly[cl]=MEASURE&ly[rw]=ASGS_2021&to[TIME_PERIOD]=false&isAvailabilityDisabled=false&snb=2 (accessed: April 18th, 2025)",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Quadvariate Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-spatial.html",
    "href": "bw/bw-spatial.html",
    "title": "\n5  Spatial Viz\n",
    "section": "",
    "text": "5.1 Research question:\nAcross Greater Sydney what is the ratio of working age people to businesses.",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Spatial Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-spatial.html#step-1-load-necessary-packages",
    "href": "bw/bw-spatial.html#step-1-load-necessary-packages",
    "title": "\n5  Spatial Viz\n",
    "section": "\n5.2 Step 1: Load necessary packages",
    "text": "5.2 Step 1: Load necessary packages\n\nCodelibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nCodelibrary(sf)\n\nLinking to GEOS 3.13.0, GDAL 3.8.5, PROJ 9.5.1; sf_use_s2() is TRUE",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Spatial Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-spatial.html#step-2-import-and-clean-wrangle-join-data",
    "href": "bw/bw-spatial.html#step-2-import-and-clean-wrangle-join-data",
    "title": "\n5  Spatial Viz\n",
    "section": "\n5.3 Step 2: Import and clean / wrangle / join data",
    "text": "5.3 Step 2: Import and clean / wrangle / join data\nShapefile data across Australia for Level 4 Statistical Areas:\n\nCodemessy_sf &lt;- read_sf(\"../data/SA4_2021_AUST_SHP_GDA2020/SA4_2021_AUST_GDA2020.shp\")\n\nsydney_sf &lt;- messy_sf |&gt;\n  select(SA4_NAME21, geometry)\n\n\nData about the working age population across Greater Sydney’s Level 4 Statistical Areas:\nSidenote: Working age is counted as being between 15-64 years old\n\nCodemessy_working_age_pop &lt;- read_csv(\"../data/ABS,ABS_REGIONAL_ASGS2021,1.3.0+ERP_18..128+127+126+125+124+123+121+122+120+119+118+117+116+115+102.A.csv\")\n\nRows: 15 Columns: 24\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (13): STRUCTURE, STRUCTURE_ID, STRUCTURE_NAME, ACTION, MEASURE, Data Ite...\ndbl  (3): ASGS_2021, TIME_PERIOD, OBS_VALUE\nlgl  (8): Time Period, Observation Value, UNIT_MULT, Unit of Multiplier, OBS...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nCodeworking_age_pop &lt;- messy_working_age_pop |&gt;\n  mutate(working_age_pop = OBS_VALUE) |&gt;\n  select(Region, working_age_pop) \n\n\nData about the total businesses across Greater Sydney’s Level 4 Statistical Areas:\n\nCodemessy_total_businesses &lt;- read_csv(\"../data/ABS,ABS_REGIONAL_ASGS2021,1.3.0+CABEE_5..128+127+126+125+124+123+121+122+120+119+118+117+116+115+102.A.csv\")\n\nRows: 15 Columns: 24\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (13): STRUCTURE, STRUCTURE_ID, STRUCTURE_NAME, ACTION, MEASURE, Data Ite...\ndbl  (3): ASGS_2021, TIME_PERIOD, OBS_VALUE\nlgl  (8): Time Period, Observation Value, UNIT_MULT, Unit of Multiplier, OBS...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nCodetotal_businesses &lt;- messy_total_businesses |&gt;\n  mutate(total_businesses = OBS_VALUE) |&gt;\n  select(Region, total_businesses)\n\n\nCombine the three datasets into one:\nSidenote: Also, wrangle the data, and turn the results of the ratio of working age persons to businesses into factors. And lastly, create a color palette for each of these factor levels on the map\n\nCodeemployee_businesses_sf &lt;- sydney_sf |&gt;\n  inner_join(working_age_pop, join_by(SA4_NAME21 == Region)) |&gt;\n  inner_join(total_businesses, join_by(SA4_NAME21 == Region)) |&gt;\n  mutate(working_persons_per_business = working_age_pop / total_businesses) |&gt;\n  mutate(working_persons_per_business = cut(working_persons_per_business,\n                                            breaks = c(3, 4.5, 5, 5.5, 6, 8, 8.5, 9),\n                                            labels = c(\"3 - 4.4\", \"4.5 - 4.9\", \"5 - 5.4\", \"5.5 - 5.9\", \"6 - 7.9\", \"8 - 8.4\", \"8.5 - 9\"),\n                                            include.lowest = TRUE))\n\nmy_colors &lt;- c(\n  \"3 - 4.4\" = \"#f46d43\",\n  \"4.5 - 4.9\" = \"#fdae61\",\n  \"5 - 5.4\" = \"#fee08b\",\n  \"5.5 - 5.9\" = \"#d9ef8b\",\n  \"6 - 7.9\" = \"#a6d96a\",\n  \"8 - 8.4\" = \"#66bd63\",\n  \"8.5 - 9\" = \"#1a9850\")",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Spatial Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-spatial.html#step-3-visualize",
    "href": "bw/bw-spatial.html#step-3-visualize",
    "title": "\n5  Spatial Viz\n",
    "section": "\n5.4 Step 3: Visualize",
    "text": "5.4 Step 3: Visualize\n\nCodeggplot() +\n  geom_sf(data = employee_businesses_sf,\n          aes(fill = working_persons_per_business)) +\n  theme_void() +\n  scale_fill_manual(name = \"People of Working Age per Business\",\n                    values = my_colors) +\n  coord_sf(crs = 7856) +\n  labs(title = \"Ratio of People of Working Age to Businesses Across Greater Sydney\")\n\n\n\nChoropleth map of the ratio of working age people to businesses in Level 4 Statistical Areas across Greater Sydney, using quantitative classes",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Spatial Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-spatial.html#conclusion",
    "href": "bw/bw-spatial.html#conclusion",
    "title": "\n5  Spatial Viz\n",
    "section": "\n5.5 Conclusion:",
    "text": "5.5 Conclusion:\nInterestingly, it seems like coastal Level 4 Statistical Areas tend to have lower ratios of working age people than those inland. The Statistical Areas with the lowest ratios tended to be concentrated to the left of the center of the map, on the coast. The lowest ratio Statistical area was in the middle of a peninsula. It was positioned so that Statistical areas wth lower ratios were to its north and east, but it also bordered a cluster of Statistical areas with some more mid ranged ratios. There is the possibility that this low ratio Statistical Area is the central business district of Sydney and therefore has few residents overall (which includes residents of working age) in comparison to businesses, therefore making its ratio unique. It would also explain why surrounding Statistical Areas have lower to medium ratios. They could be suburbs, where there is still some investment into businesses, but also a larger population of working age people to balance the ratio. The larger (in size) statistical areas to the west and north have higher ratios. An explanation for this would be that they are rural areas far away from the central business district. Their economic activity is depressed, reducing investment in businesses, and throwing off their ratios.",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Spatial Viz</span>"
    ]
  },
  {
    "objectID": "bw/bw-spatial.html#references",
    "href": "bw/bw-spatial.html#references",
    "title": "\n5  Spatial Viz\n",
    "section": "\n5.6 References:",
    "text": "5.6 References:\nhttps://dataexplorer.abs.gov.au/vis?fs[0]=Data%20by%20region%2C0%7CMain%20Structure%20and%20Greater%20Capital%20City%20Statistical%20Areas%23ASGS%23&pg=0&fc=Data%20by%20region&df[ds]=DATA_BY_REGION_TOPICS&df[id]=ABS_REGIONAL_ASGS2021&df[ag]=ABS&df[vs]=1.3.0&pd=2020%2C&dq=..118%2B117%2B116%2B115%2B102.A&ly[cl]=TIME_PERIOD&ly[rw]=ASGS_2021%2CMEASURE&to[TIME_PERIOD]=false (accessed: April 16th, 2025) https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files (accessed: April 16th, 2025)",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Spatial Viz</span>"
    ]
  },
  {
    "objectID": "bw/exam_1.html",
    "href": "bw/exam_1.html",
    "title": "\n6  exam_1\n",
    "section": "",
    "text": "6.1 Come Up With A Research Question:\nResearch question: what does the consumption of each food category in each country look like?",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>exam_1</span>"
    ]
  },
  {
    "objectID": "bw/exam_1.html#import-necessary-data-and-tools",
    "href": "bw/exam_1.html#import-necessary-data-and-tools",
    "title": "\n6  exam_1\n",
    "section": "\n6.2 Import Necessary Data and Tools:",
    "text": "6.2 Import Necessary Data and Tools:\nLoad in packages:\n\nCodelibrary(tidytuesdayR)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nCodelibrary(ggplot2)\nlibrary(forcats)\nlibrary(ggthemes)\n\n\nLoad in the data:\nIt should all be from the same date\n\nCodetuesdata &lt;- tt_load('2020-02-18')\n\n---- Compiling #TidyTuesday Information for 2020-02-18 ----\n--- There is 1 file available ---\n\n\n── Downloading files ───────────────────────────────────────────────────────────\n\n  1 of 1: \"food_consumption.csv\"\n\nCodefc &lt;- tuesdata$food_consumption",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>exam_1</span>"
    ]
  },
  {
    "objectID": "bw/exam_1.html#distribution-of-variables-and-observations",
    "href": "bw/exam_1.html#distribution-of-variables-and-observations",
    "title": "\n6  exam_1\n",
    "section": "\n6.3 Distribution of Variables and Observations:",
    "text": "6.3 Distribution of Variables and Observations:\nFind the number of countries:\n\nCodefc |&gt;\n  distinct(country) |&gt;\n  nrow()\n\n[1] 130\n\n\nFind the number of food categories:\n\nCodefc |&gt;\n  distinct(food_category) |&gt;\n  nrow()\n\n[1] 11\n\n\nFind the total consumption:\n\nCodefc |&gt;\n  summarize(total_consumption = sum(consumption))\n\n# A tibble: 1 × 1\n  total_consumption\n              &lt;dbl&gt;\n1            40198.\n\n\nFind out how much each food category tends to be consumed across countries:\n\nCodeggplot(fc, aes(x = consumption, fill = food_category)) +\n  geom_histogram(bins = 20) +\n  scale_fill_viridis_d(option = \"magma\", name = \"Food Category\") +\n  labs(x = \"Consumption\", y = \"Count\")\n\n\n\n\n\n\nCodeggplot(fc, aes(x = food_category, y = consumption)) +\n  geom_boxplot() +\n  theme(axis.text.x = element_text(angle = 90, size = 8)) +\n  labs(x = \"Food Category\", y = \"Consumption\")",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>exam_1</span>"
    ]
  },
  {
    "objectID": "bw/exam_1.html#answering-the-research-question",
    "href": "bw/exam_1.html#answering-the-research-question",
    "title": "\n6  exam_1\n",
    "section": "\n6.4 Answering the Research Question:",
    "text": "6.4 Answering the Research Question:\nWhat proportion of each country’s total consumption does each food category make up (proportional bar chart)\n\nCodefc |&gt;\n  mutate(country = fct_recode(country,\n                              \"UAE\" = \"United Arab Emirates\",\n                              \"Trinbago\" = \"Trinidad and Tobago\",\n                              \"UK\" = \"United Kingdom\",\n                              \"Hong Kong\" = \"Hong Kong SAR. China\",\n                              \"Bosnia-Herzegovina\" = \"Bosnia and Herzegovina\")) |&gt;\n  ggplot(aes(x = country, y = consumption, fill = food_category)) +\n    geom_col(position = \"fill\") +\n    labs(x = \"Country\", y = \"Consumption\") +\n    theme(axis.title.x = element_text(size = 10),\n          axis.title.y = element_text(size = 10),\n          legend.title = element_text(size = 10),\n          legend.text = element_text(size = 5),\n          axis.text.x = element_text(angle = 90, size = 2)\n          ) +\n    scale_fill_viridis_d(option = \"magma\", name = \"Food Category\")\n\n\n\nProportional Bar Chart of Each Country’s Total Food Consumption with Filling for Each Food Category\n\n\n\nWhat proportion of each country’s total consumption does each food category make up (choropleth maps, faceted by food category)\n\nCodeworld_map &lt;- map_data(\"world\")\n\nworld_map &lt;- world_map |&gt;\n  mutate(region = fct_recode(region, \n                             \"Congo\" = \"Democratic Republic of the Congo\",\n                             \"Mauritius\" = \"Mauritania\",\n                             \"United Kingdom\" = \"UK\",\n                             \"Taiwan. ROC\" = \"Taiwan\",\n                             ))\n\nfc |&gt;\n  group_by(country) |&gt;\n  mutate(total_consumption = sum(consumption)) |&gt;\n  ungroup() |&gt;\n  mutate(percent_consumption = (100 * (consumption / total_consumption))) |&gt;\n  full_join(world_map, join_by(country == region)) |&gt;\n  ggplot(aes(map_id = country, fill = percent_consumption)) +\n    geom_map(map = world_map) +\n    expand_limits(x = world_map$long, y = world_map$lat) +\n    theme_map() +\n    scale_fill_gradient(low = \"lightblue\", \n                        high = \"darkblue\", \n                        name = \"Percent of Total Food Consumption\", \n                        na.value = \"darkgrey\"\n                        ) +\n    facet_wrap(~food_category, nrow = 4) +\n    theme_classic() +\n    labs(x = \"Longitude\", y = \"Latitude\")\n\nWarning in full_join(mutate(ungroup(mutate(group_by(fc, country), total_consumption = sum(consumption))), : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 1132 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n\n\nChoropleth Maps of The Percent of a Countries’ Total Food Consumption that Food Categories Occupy",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>exam_1</span>"
    ]
  },
  {
    "objectID": "bw/exam_1.html#conclusion",
    "href": "bw/exam_1.html#conclusion",
    "title": "\n6  exam_1\n",
    "section": "\n6.5 Conclusion:",
    "text": "6.5 Conclusion:\nThese two plots can be used to assess country’s consumption of food categories in relation to their total food consumption, and also in relation to other countries consumption of each food category as a percent of their total consumption. There is a pattern in which the 3 most consumed food categories in countries tend to be wheat and wheat product, rice, and dairy. Dairy tends to be consumed in large portions in at least some countries across all continents, and in high quantities across all of the Americas, Europe, and Oceania. Rice is also consumed internationally, but the countries that consume it most are in East, Southeast, and South Asia along with Africa. Wheat and wheat product is consumed at a moderate rate to high rate across the whole world, with the only countries that consume it at low rates being in Southeast Asia and Africa South of the Sahara. The biggest consumers of wheat and wheat product are Algeria, Egypt, and Iran.",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>exam_1</span>"
    ]
  },
  {
    "objectID": "bw/solo_project.html",
    "href": "bw/solo_project.html",
    "title": "\n7  Solo Project\n",
    "section": "",
    "text": "7.1 Research Question:\nWhat is the distribution of Mormon Temples in the Contigious United States by State. (A Mormon Temple is not the same as a church. It holds particular religious importance)",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Solo Project</span>"
    ]
  },
  {
    "objectID": "bw/solo_project.html#step-1-load-necessary-packages",
    "href": "bw/solo_project.html#step-1-load-necessary-packages",
    "title": "\n7  Solo Project\n",
    "section": "\n7.2 Step 1: Load Necessary Packages",
    "text": "7.2 Step 1: Load Necessary Packages\n\nCodelibrary(sf)\n\nLinking to GEOS 3.13.0, GDAL 3.8.5, PROJ 9.5.1; sf_use_s2() is TRUE\n\nCodelibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nCodelibrary(dplyr)",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Solo Project</span>"
    ]
  },
  {
    "objectID": "bw/solo_project.html#step-2-import-clean-wrangle-the-data",
    "href": "bw/solo_project.html#step-2-import-clean-wrangle-the-data",
    "title": "\n7  Solo Project\n",
    "section": "\n7.3 Step 2: Import / Clean / Wrangle the Data",
    "text": "7.3 Step 2: Import / Clean / Wrangle the Data\nImport a shapefile of the United States and clean / wrangle it\n\nCodemessy_us_states_sf &lt;- read_sf(\"../data/archive/cb_2018_us_state_500k.shp\")\n\nus_states_sf &lt;- messy_us_states_sf |&gt;\n  filter(NAME != \"Guam\") |&gt;  # I am deleting the names of states or territories that are not in the contigious United States so that the dataset does not include States like Hawaii or territories like Guam\n  filter(NAME != \"Commonwealth of the Northern Mariana Islands\") |&gt;\n  filter(NAME != \"Hawaii\") |&gt;\n  filter(NAME != \"Alaska\") |&gt;\n  filter(NAME != \"Puerto Rico\") |&gt;\n  filter(NAME != \"United States Virgin Islands\") |&gt;\n  filter(NAME != \"American Samoa\")\n\n\nImport data on mormon temples and clean / wrangle it\n\nCodemessy_mormon_temples &lt;- read_csv(\"../data/ChurchofJesusChristTemples.csv\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 382 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (11): Temple, Status, LatitudeDegrees, LongitudeDegress, Address, City, ...\ndbl  (2): Latitude, Longitude\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nCodemormon_temples_national &lt;- messy_mormon_temples |&gt;\n  filter(Country == \"United States\") |&gt; # I am using filter to get rid of Mormon temples outside of the USA, so that my dataset is just states within the United States\n  group_by(State) |&gt; # I am making sure my unit of observation is states, as the research question demands the unit of observation be states\n  summarize(total_temples = n()) # I am counting the number of mormon temples per each state, as the research question asks for the number of temples in each unit of observation (state)\n\n\nJoin the shapefile and the data on Mormon temples\nsidenote: make sure any NA values in the total_temples column become 0, and assign quantitative classes and color classes for the total_temples variable\n\nCodegeospatial_mormon_temples &lt;- us_states_sf |&gt;\n  left_join(mormon_temples_national, join_by(NAME == State)) |&gt; # I am joining the states shapefile and the mormon temples dataset to see the number of mormon temples per state with shapefile data, so that the data can be displayed on a map\n  mutate(total_temples = replace_na(total_temples, 0)) |&gt; # because states with no mormon temples have no match between the shapefile and mormon temples dataset, their value for the total number of temples is NA, when it should be 0. I am correcting it so that the total number of temples variable displays as 0 when the value is NA\n  mutate(total_temples = cut(total_temples, # here I am breaking the quantitative data on temples into classes so that the map does not have proportional color, but instead has clear classes of quantitative data, making it easier to read\n                             breaks = c(0, 1, 6, 11, 16, 16-21, 30, Inf), # here I am setting up the breaks for each class. I am doing it by distribution, and also creating a class for Utah, since it is an especially power outlier compared to all other states. Additionally, a class for states with 0 temples is important to denote states with no temples, and a class for states with 30+ temples is important to denote Utah, which is an outlier in terms of temples\n                             labels = c(\"0\", \"1-4\", \"5-9\", \"10-14\", \"15-19\", \"20-29\", \"30+\"), # this assigns a string to each class, important for assigning colors to each class, later in the code, that will be used to create the choropleth map\n                             include.lowest = TRUE)) # this makes it so that the breaks include the lowest values in the cuts. This is important for creating the class of states with no temples\n\nmy_colors &lt;- c( # this will assign colors to each string previously mentioned in the code about classes. It is done in a gradient from brown to blue, which helps to create a noticeable transition in the choropleth map\n  \"0\" = \"#9E3D22\",\n  \"1-4\" = \"#CA5621\",\n  \"5-9\" = \"#E3732A\",\n  \"10-14\" = \"#EFB27E\",\n  \"15-19\" = \"#72A6CE\",\n  \"20-29\" = \"#3A6B99\",\n  \"30+\" = \"#2B5C8A\")",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Solo Project</span>"
    ]
  },
  {
    "objectID": "bw/solo_project.html#step-3-finally-create-a-choropleth-map-of-the-contiguous-united-states-by-total-temples-in-each-state",
    "href": "bw/solo_project.html#step-3-finally-create-a-choropleth-map-of-the-contiguous-united-states-by-total-temples-in-each-state",
    "title": "\n7  Solo Project\n",
    "section": "\n7.4 Step 3: Finally, create a choropleth map of the contiguous United States by total temples in each state",
    "text": "7.4 Step 3: Finally, create a choropleth map of the contiguous United States by total temples in each state\nNote: this color palette uses a colorblind friendly palette\n\nCodeggplot() +\n  geom_sf(data = geospatial_mormon_temples, # this imports the data from the file with both geospatial data and spatial data, to create the map\n          aes(fill = total_temples)) + # this uses the data from each state to set the fill to be value in total_temples, assigning one of the quantitative classes to each state\n  scale_fill_manual(name = \"Total Mormon Temples\", # this sets the name of the legend, renaming the mapped quantitative variable \"Total Mormon Temples\", for the sake of making the legend understandable\n                    values = my_colors) + # the colors of the classes is changed to the assigned classes in my_colors to make the map a readable choropleth map\n  theme_void() + # this removes the latitude and longitude along the axes because they are add unnecessary to the choropleth map\n  coord_sf(crs = 5070) + # this uses a projcetion that is more accurate than the coordinate reference system created by default with geom_sf(). This is for the sake of accuracy, but also allows the map to still be readable (every projection always has distortion) \n  labs(title = \"Total Mormon Temples by State in the Contigious United States\")\n\n\n\nChoropleth map of the contigious U.S States colored by their total Mormon temples\n\n\n\nInteresting. Utah has an incredibly high number of temples. I wonder how temples are distributed spatially in Utah.",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Solo Project</span>"
    ]
  },
  {
    "objectID": "bw/solo_project.html#research-question-2",
    "href": "bw/solo_project.html#research-question-2",
    "title": "\n7  Solo Project\n",
    "section": "\n7.5 Research Question 2:",
    "text": "7.5 Research Question 2:\nWhat is the distribution of Mormon temples in Utah by County",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Solo Project</span>"
    ]
  },
  {
    "objectID": "bw/solo_project.html#step-1-load-necessary-packages-1",
    "href": "bw/solo_project.html#step-1-load-necessary-packages-1",
    "title": "\n7  Solo Project\n",
    "section": "\n7.6 Step 1: Load Necessary Packages",
    "text": "7.6 Step 1: Load Necessary Packages\nPackages were already loaded earlier",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Solo Project</span>"
    ]
  },
  {
    "objectID": "bw/solo_project.html#step-2-import-clean-wrangle-the-data-1",
    "href": "bw/solo_project.html#step-2-import-clean-wrangle-the-data-1",
    "title": "\n7  Solo Project\n",
    "section": "\n7.7 Step 2: Import / Clean / Wrangle the Data",
    "text": "7.7 Step 2: Import / Clean / Wrangle the Data\nUse the already imported data on Mormon temples, and clean / wrangle it\n\nCodemormon_temples_utah &lt;- messy_mormon_temples |&gt;\n  filter(State == \"Utah\") |&gt; # make sure we are exclusively working with data in Utah\n  group_by(County) |&gt; # set the unit of observation to counties\n  summarize(total_temples = n()) # use this to count the total temples per county\n\n\nImport data of counties’ fips codesm and their names, across the United States and clean / wrangle it\n\nCodemessy_utah_county_fips &lt;- read_csv(\"../data/state_and_county_fips_master.csv\") \n\nRows: 3195 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): name, state\ndbl (1): fips\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nCodeutah_county_fips &lt;- messy_utah_county_fips |&gt;\n  mutate(name = str_replace(name, \" County\", \"\")) # remove \" County\" from the name variable so that it is easier to join data from this dataset with data from the temples dataset later\n\n\nImport a shapefile of counties in Utah, and clean / wrangle it while also joining the dataset on county fips codes\n\nCodemessy_utah_counties_sf &lt;- read_sf(\"../data/UtahCountyBoundaries_6245553605277884471/Counties.shp\")\n\nutah_counties_sf &lt;- messy_utah_counties_sf |&gt;\n  mutate(FIPS_STR = as.numeric(FIPS_STR)) |&gt; # change the fips code to be a number so that it is easier to join data from this dataset with the data on fips codes and names\n  left_join(utah_county_fips, join_by(FIPS_STR == fips))\n\n\nJoin the data on Mormon temples to the shapefile\nsidenote: make sure any NA values in the total_temples column become 0. Also, create classes and a color palette to use for them in the choropleth map.\n\nCodemormon_temples_utah_sf &lt;- utah_counties_sf |&gt;\n  left_join(mormon_temples_utah, join_by(name == County)) |&gt;\n  mutate(total_temples = replace_na(total_temples, 0)) |&gt;\n  mutate(total_temples = cut(total_temples, \n                             breaks = c(0, 1, 2, 4, 6, 8, Inf), # again, create quantitative classes. States with 0 temples should have their own class, and so should states with an especially high number of temples.\n                             labels = c(\"0\", \"1\", \"2-3\", \"4-5\", \"6-7\", \"8+\"), # again, use labels\n                             include.lowest = TRUE)) # again, make sure to include the lowest value\n\nmy_colors &lt;- c( # again, create a color palette for the classes in the choropleth map\n  \"0\" = \"#F4D166\",\n  \"1\" = \"#BEC45C\",\n  \"2-3\" = \"#6EAC56\",\n  \"4-5\" = \"#38884C\",\n  \"8+\" = \"#146C36\")",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Solo Project</span>"
    ]
  },
  {
    "objectID": "bw/solo_project.html#step-3-create-a-choropleth-map-of-utahs-counties-by-total-temples-in-each-state",
    "href": "bw/solo_project.html#step-3-create-a-choropleth-map-of-utahs-counties-by-total-temples-in-each-state",
    "title": "\n7  Solo Project\n",
    "section": "\n7.8 Step 3: Create a choropleth map of Utah’s counties by total temples in each state",
    "text": "7.8 Step 3: Create a choropleth map of Utah’s counties by total temples in each state\n\nCodeggplot() +\n  geom_sf(data = mormon_temples_utah_sf,\n          aes(fill = total_temples)) + # this imports the data from the file with both geospatial data and spatial data, to create the map\n  scale_fill_manual(name = \"Total Mormon Temples\", # this sets the name of the legend, renaming the mapped quantitative variable \"Total Mormon Temples\", for the sake of making the legend understandable\n                    values = my_colors) + # the colors of the classes is changed to the assigned classes in my_colors to make the map a readable choropleth map\n  labs(title = \"Total Mormon Temples by County in Utah\") +\n  theme_void() # this removes the latitude and longitude along the axes because they are add unnecessary to the choropleth map\n\n\n\nChoropleth map of Utah’s counties and how many Mormon temples they have\n\n\n\nInterestingly, it seems as though nearly all of the Mormon temples focused themselves into one cluser of counties near the center of the state. There are only 2 other counties that are disconnected from the cluster of counties, one in the north and one in the southwest. Most counties, across the state, have no temples. In the central counties, there is a gradient from the south to north, with a decreasing number of temples in each county, with the only exception being the southernmost county which has only 1 temple.",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Solo Project</span>"
    ]
  },
  {
    "objectID": "bw/solo_project.html#conclusion",
    "href": "bw/solo_project.html#conclusion",
    "title": "\n7  Solo Project\n",
    "section": "\n7.9 Conclusion:",
    "text": "7.9 Conclusion:\nThroughout the contigious United States, the states with the most Mormon temples tend to be in the Rocky Mountains or on the West Coast. The region of states with the fewest temples is the Great Plains. But Utah stands out as the state with the highest concentration of temples, far surpassing all other states. When you investigate Utah’s spatial distribution of temples by county, you discover that they are focused in a cluster of counties in the center of the state, with 2 other outlier counties (that have only one temple) in the state. The counties clustered in the center have an incredibly dense number of temples, in comparison to the rest of the united cities. One singular county has 8+ temples, more temples than most states have. This leads to the second conclusion about the distribution of Mormon temples in the contigious United States: Utah has an incredibly spatially concentrated distribution of temples near the center of its state, making the state surpass the number of temples per state across the contigious United States",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Solo Project</span>"
    ]
  },
  {
    "objectID": "bw/solo_project.html#references",
    "href": "bw/solo_project.html#references",
    "title": "\n7  Solo Project\n",
    "section": "\n7.10 References",
    "text": "7.10 References\n\nhttps://churchofjesuschristtemples.org/statistics/ (accessed March 30th)\nhttps://www.census.gov/geographies/mapping-files/time-series/geo/carto-boundary-file.html (accessed: March 30th)\nhttps://github.com/kjhealy/fips-codes/blob/master/state_and_county_fips_master.csv (accessed: March 31st)\nhttps://hub.arcgis.com/datasets/utah::utah-county-boundaries/explore (accessed: March 31st)",
    "crumbs": [
      "Best Work",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Solo Project</span>"
    ]
  },
  {
    "objectID": "summary/exam_1.html",
    "href": "summary/exam_1.html",
    "title": "\n8  Exam 1 Summary\n",
    "section": "",
    "text": "8.1 The Max Number of Variables in a Viz is 7:",
    "crumbs": [
      "Summary",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exam 1 Summary</span>"
    ]
  },
  {
    "objectID": "summary/exam_1.html#the-max-number-of-variables-in-a-viz-is-7",
    "href": "summary/exam_1.html#the-max-number-of-variables-in-a-viz-is-7",
    "title": "\n8  Exam 1 Summary\n",
    "section": "",
    "text": "X-axis\nY-axis\nOpacity\nColor\nSize\nShape\nFacets\n3 dimensions",
    "crumbs": [
      "Summary",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exam 1 Summary</span>"
    ]
  },
  {
    "objectID": "summary/exam_1.html#effective-viz-checklist",
    "href": "summary/exam_1.html#effective-viz-checklist",
    "title": "\n8  Exam 1 Summary\n",
    "section": "\n8.2 Effective Viz Checklist:",
    "text": "8.2 Effective Viz Checklist:\n\nIs graph effective?\nright for data\nappropriate for story\nclear purpose\nappropriate audience\nunbiased / inclusive\nnot misleading\nIs graph complete?\ntitle\nsubtitle\nX-axis label\nX-axis marks\nY-axis label\nY-axis marks\nlegend title\nlegend labels\ncapition (author, date, source)\ndata labels\ndate annotation\nIs graph accessible\ncolor (fill, border, background, text)\nalt-text\ntext size",
    "crumbs": [
      "Summary",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exam 1 Summary</span>"
    ]
  },
  {
    "objectID": "summary/exam_1.html#steps-to-an-effective-viz",
    "href": "summary/exam_1.html#steps-to-an-effective-viz",
    "title": "\n8  Exam 1 Summary\n",
    "section": "\n8.3 Steps to an Effective Viz:",
    "text": "8.3 Steps to an Effective Viz:\n\nIdentify simple research questions\nwhat do you want to understand about the variables or the relationships among them?\nStart with the basic and work incrementally\nIdentify what variables you want to include in your plot and what structure these have (e.g: categorical, quantitative, dates)\nstart simply, build a plot of just one of these variables, or the relationship between two of the variables\nset up a plotting frame and add just one geometric layer at a time\nstart tweaking: add whatever new variables you want to examine\nAsk your plot questions\nwhat questions does your plot answer? What questions are left unanswered by your plot?\nwhat new questions does your plot spark/inspire?\ndo you have the visualization tools to answer these questions, or might you learn more?\nFocus\nreporting a large number of visualizations can overwhelm the audience and obscure your conclusions. Instead, pick out a focused yet comprehensive set of visualizations.",
    "crumbs": [
      "Summary",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exam 1 Summary</span>"
    ]
  },
  {
    "objectID": "summary/exam_1.html#data-in-spreadsheets-is-called-tidy-when",
    "href": "summary/exam_1.html#data-in-spreadsheets-is-called-tidy-when",
    "title": "\n8  Exam 1 Summary\n",
    "section": "\n8.4 Data in Spreadsheets is Called Tidy When:",
    "text": "8.4 Data in Spreadsheets is Called Tidy When:\n\nEach row = a unit of observation\nEach column = a measure of some variable of interest:\nquantitative = numbers with units\ncategorical = discrete possibilities or categories\nEach entry contains a single data value, ie, no analysis, summaries, footnotes, comments, etc. Only one value per cell",
    "crumbs": [
      "Summary",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exam 1 Summary</span>"
    ]
  },
  {
    "objectID": "summary/exam_1.html#bivariate-multivariate-viz",
    "href": "summary/exam_1.html#bivariate-multivariate-viz",
    "title": "\n8  Exam 1 Summary\n",
    "section": "\n8.5 Bivariate / Multivariate Viz:",
    "text": "8.5 Bivariate / Multivariate Viz:\nIn bivariate viz there are two variables. One is an independent variable and one is a dependent variable. You are trying to explain the variability of one variable relative to the other.\n\nCodeelections &lt;- read.csv(\"https://mac-stat.github.io/data/election_2020_county.csv\")\n\nggplot(elections, aes(x = repub_pct_16, y = repub_pct_20)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nCode  labs(x = \"Percent of Republican Vote in 2016\", title = \"Republican Vote by County in 2016 vs 2020\", y = \"Percent of Republican Support in 2020\")\n\n$x\n[1] \"Percent of Republican Vote in 2016\"\n\n$y\n[1] \"Percent of Republican Support in 2020\"\n\n$title\n[1] \"Republican Vote by County in 2016 vs 2020\"\n\nattr(,\"class\")\n[1] \"labels\"\n\n\nIn multivariate viz, you just use more variables to show the relationship between them.\n\nCodeweather &lt;- read.csv(\"https://mac-stat.github.io/data/weather_3_locations.csv\") |&gt; \n  mutate(date = as.Date(date))  \n\nggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) + \n  geom_point(alpha = 0.5) +\n  geom_smooth(method = \"lm\") +\n  labs(x = \"Temperature at 9 am\", title = \"Weather observation in Australia\",y = \"Temperature at 3 pm\", color = \"Location\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 27 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 27 rows containing missing values or values outside the scale range\n(`geom_point()`).",
    "crumbs": [
      "Summary",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exam 1 Summary</span>"
    ]
  },
  {
    "objectID": "summary/exam_1.html#spatial-viz",
    "href": "summary/exam_1.html#spatial-viz",
    "title": "\n8  Exam 1 Summary\n",
    "section": "\n8.6 Spatial Viz:",
    "text": "8.6 Spatial Viz:\nCreate a map widget by calling leaflet( ) and telling it the data to use\n\nCodefave_places &lt;- read.csv(\"https://hash-mac.github.io/stat112site-s25/data/our_fave_places.csv\")\n\nleaflet(data = fave_places)\n\n\n\n\n\nAdd a base map using addTiles( ) or addProviderTiles( )\n\nCodeleaflet(data = fave_places) |&gt; \n  addTiles()\n\n\n\n\n\nAdd layers to the map using layer functions(addMarkers( ) or addPolygons( ))\n\nCodeleaflet(data = fave_places) |&gt; \n  addTiles() |&gt; \n  addMarkers(lng = ~longitude, lat = ~latitude)\n\n\n\n\n\nPrint the map widget to display it",
    "crumbs": [
      "Summary",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exam 1 Summary</span>"
    ]
  },
  {
    "objectID": "summary/exam_1.html#the-3-types-of-spatial-viz",
    "href": "summary/exam_1.html#the-3-types-of-spatial-viz",
    "title": "\n8  Exam 1 Summary\n",
    "section": "\n8.7 The 3 Types of Spatial Viz:",
    "text": "8.7 The 3 Types of Spatial Viz:\nPoint map: Maps plotting individual observations\n\nCodestarbucks &lt;- read.csv(\"https://mac-stat.github.io/data/starbucks.csv\")\n\nggplot(starbucks, aes(y = Latitude, x = Longitude)) + \n  geom_point(size = 0.5)\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\nContour maps: Maps plotting the density of the distribution of observations\n\nCodestarbucks_cma &lt;- starbucks_cma &lt;- starbucks |&gt; \n  filter(Country %in% c('CA', 'MX', 'US'))\n\ncma_boundaries &lt;- ne_states(\n  country = c(\"canada\", \"mexico\", \"united states of america\"),\n  returnclass = \"sf\")\n\nggplot(cma_boundaries) + \n  geom_sf() + \n  geom_density_2d(\n    data = starbucks_cma,\n    aes(x = Longitude, y = Latitude),\n    size = 0.2,\n    color = \"darkgreen\"\n  ) +\n  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +\n  theme_map()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\nChoropleth maps: Maps plotting outcomes in different regions\n\nCodeelections_by_state &lt;-  read.csv(\"https://mac-stat.github.io/data/election_2020_by_state.csv\")\nelections_by_counties &lt;- read.csv(\"https://mac-stat.github.io/data/election_2020_county.csv\")\n\nelections_by_state &lt;- elections_by_state |&gt; \n  filter(state_abbr != \"DC\") |&gt; \n  select(state_name, state_abbr, repub_pct_20) |&gt; \n  mutate(repub_20_categories = \n           cut(repub_pct_20, \n               breaks = seq(30, 70, by = 5), \n               labels = c(\"30-34\", \"35-39\", \"40-44\", \"45-49\",\n                          \"50-54\", \"55-59\", \"60-64\", \"65-70\"), \n               include.lowest = TRUE))\n\nelections_by_counties &lt;- elections_by_counties |&gt; \n  select(state_name, state_abbr, county_name, county_fips,\n          repub_pct_20, median_age, median_rent) |&gt; \n  mutate(repub_20_categories = \n           cut(repub_pct_20, \n               breaks = seq(0, 100, by = 10),\n               labels = c(\"0-9\", \"10-19\", \"20-29\", \"30-39\", \"40-49\",\n                          \"50-59\", \"60-69\", \"70-79\", \"80-89\", \"90-100\"),\n               include.lowest = TRUE))\n\nstates_map &lt;- map_data(\"state\")\n\nggplot(elections_by_state, aes(map_id = state_name, fill = repub_pct_20)) +\n  geom_map(map = states_map) +\n  expand_limits(x = states_map$long, y = states_map$lat) +\n  theme_map() +\n  labs(fill = \"% of Republican Support\")",
    "crumbs": [
      "Summary",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exam 1 Summary</span>"
    ]
  },
  {
    "objectID": "summary/exam_1.html#alt-text-and-titles",
    "href": "summary/exam_1.html#alt-text-and-titles",
    "title": "\n8  Exam 1 Summary\n",
    "section": "\n8.8 Alt text and titles",
    "text": "8.8 Alt text and titles\nAlt text is a written description of the viz that can be read by a screen reader\n\nCodeggplot(weather, aes(x = temp3pm, fill = location)) + \n  geom_density(alpha = 0.5) + \n  labs(x = \"3pm temperature (Celsius)\")  \n\nWarning: Removed 19 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\nThe title is a 1-sentence description of a plot\n\nCodeggplot(weather, aes(x = temp3pm, fill = location)) + \n  geom_density(alpha = 0.5) + \n  labs(x = \"3pm temperature (Celsius)\")  \n\nWarning: Removed 19 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\nDensity plots of 3pm temperatures in 3 Australian locations.",
    "crumbs": [
      "Summary",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exam 1 Summary</span>"
    ]
  },
  {
    "objectID": "summary/exam_1.html#categorical-plots",
    "href": "summary/exam_1.html#categorical-plots",
    "title": "\n8  Exam 1 Summary\n",
    "section": "\n8.9 Categorical plots",
    "text": "8.9 Categorical plots\n1 variable:\nBar chart (just counts observations)\n\nCodehikes &lt;- read.csv(\"https://mac-stat.github.io/data/high_peaks.csv\")\n\nggplot(hikes, aes(x = rating)) +\n  geom_bar()\n\n\n\n\n\n\n\n2 variables:\nBar charts: - stacked (heights vary, but each color (stripe) of the bar follows the Y-axis)\n\nCodeggplot(elections, aes(x = historical, fill = winner_20)) +\n  geom_bar()\n\n\n\n\n\n\n\n\ndodge (side by side)\n\n\nCodeggplot(elections, aes(x = historical, fill = winner_20)) +\n  geom_bar(position = \"dodge\")\n\n\n\n\n\n\n\n\nproportional (all same height)\n\nthis loses information about the number of observations\n\n\n\n\nCodeggplot(elections, aes(x = historical, fill = winner_20)) +\n  geom_bar(position = \"fill\")\n\n\n\n\n\n\n\n3 variables:\nFacted wrapped bar charts: - facet wrapped stacked\n\nCodeggplot(weather, aes(x = raintoday, fill = raintomorrow)) + \n  geom_bar() +\n  facet_wrap(~location)\n\n\n\n\n\n\n\n\nfacet wrapped dodge\n\n\nCodeggplot(weather, aes(x = raintoday, fill = raintomorrow)) + \n  geom_bar(position = \"dodge\") +\n  facet_wrap(~location)\n\n\n\n\n\n\n\n\nfacet wrapped proportional\n\n\nCodeggplot(weather, aes(x = raintoday, fill = raintomorrow)) + \n  geom_bar(position = \"fill\") +\n  facet_wrap(~location)",
    "crumbs": [
      "Summary",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exam 1 Summary</span>"
    ]
  },
  {
    "objectID": "summary/exam_1.html#numerical-plots",
    "href": "summary/exam_1.html#numerical-plots",
    "title": "\n8  Exam 1 Summary\n",
    "section": "\n8.10 Numerical Plots:",
    "text": "8.10 Numerical Plots:\n1 variable:\nHistogram\n\nCodeggplot(weather, aes(x = maxtemp)) +\n  geom_histogram(color = \"white\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 34 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\nBox plot\n\nCodeggplot(weather, aes(y = maxtemp)) +\n  geom_boxplot()\n\nWarning: Removed 34 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\nDensity plot\n\nCodeggplot(weather, aes(x = maxtemp)) +\n  geom_density()\n\nWarning: Removed 34 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n2 variables:\nScatterplot\n\nCodeggplot(weather, aes(x = maxtemp, y = mintemp)) +\n  geom_point()\n\nWarning: Removed 54 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\nLine plot\n\nCodeggplot(weather, aes(x = maxtemp, y = mintemp)) +\n  geom_line()\n\nWarning: Removed 34 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n3 variables:\nScatterplot - color\n\nCodeggplot(weather, aes(x = maxtemp, y = mintemp, color = windspeed9am)) +\n  geom_point(alpha = 1)\n\nWarning: Removed 54 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nproportional symbols\n\n\nCodeggplot(weather, aes(x = maxtemp, y = mintemp, size = rainfall)) +\n  geom_point(alpha = 0.5) +\n  scale_size_continuous(name = \"rainfall\", range = c(1, 5))\n\nWarning: Removed 93 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nopacity\n\n\nCodeggplot(weather, aes(x = maxtemp, y = mintemp, alpha = windgustspeed)) +\n  geom_point()\n\nWarning: Removed 54 rows containing missing values or values outside the scale range\n(`geom_point()`).",
    "crumbs": [
      "Summary",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exam 1 Summary</span>"
    ]
  },
  {
    "objectID": "summary/exam_1.html#mixed-variable-plots",
    "href": "summary/exam_1.html#mixed-variable-plots",
    "title": "\n8  Exam 1 Summary\n",
    "section": "\n8.11 Mixed Variable Plots:",
    "text": "8.11 Mixed Variable Plots:\n1 numerical + 1 categorical:\nDensity plots: - faceted\n\nCodeggplot(weather, aes(x = windgustspeed)) +\n  geom_density() +\n  facet_wrap(~location)\n\nWarning: Removed 35 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\ncolor\n\n\nCodeggplot(weather, aes(x = windgustspeed, fill = location)) +\n  geom_density(alpha = 0.5)\n\nWarning: Removed 35 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\nBox plot (faceted)\n\nCodeggplot(weather, aes(y = windgustspeed)) +\n  geom_boxplot() +\n  facet_wrap(~location)\n\nWarning: Removed 35 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\nViolin\n\nCodeggplot(weather, aes(y = windgustspeed, x = location)) +\n  geom_violin()\n\nWarning: Removed 35 rows containing non-finite outside the scale range\n(`stat_ydensity()`).\n\n\n\n\n\n\n\n\nHistograms: - faceted\n\nCodeggplot(weather, aes(x = windgustspeed)) +\n  geom_histogram(color = \"white\") +\n  facet_wrap(~location)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 35 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\nfill / color\n\n\nCodeggplot(weather, aes(x = windgustspeed, fill = location)) +\n  geom_histogram(color = \"white\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 35 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n1 numerical + 2 categorical:\nHeat map\n\nCodeeducation &lt;- read.csv(\"https://mac-stat.github.io/data/sat.csv\")\n\nplot_data &lt;- education |&gt; \n  column_to_rownames(\"State\") |&gt; \n  data.matrix() |&gt; \n  scale()\n\nheatmap.2(plot_data,\n  dendrogram = \"none\",\n  Rowv = NA, \n  scale = \"column\",\n  keysize = 0.7, \n  density.info = \"none\",\n  col = hcl.colors(256), \n  margins = c(10, 20),\n  colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05),\n  sepcolor = \"white\", trace = \"none\"\n)\n\n\n\n\n\n\n\n2 numerical + 1 categorical:\nScatterplots: - faceted\n\nCodeggplot(weather, aes(x = mintemp, y = maxtemp)) +\n  geom_point() +\n  facet_wrap(~location)\n\nWarning: Removed 54 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nfill / coor\n\n\nCodeggplot(weather, aes(x = mintemp, y = maxtemp, color = location)) +\n  geom_point()\n\nWarning: Removed 54 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nshape\n\n\nCodeggplot(weather, aes(x = mintemp, y = maxtemp, shape = location)) +\n  geom_point(size = 1, alpha = 0.5)\n\nWarning: Removed 54 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nlabeled points\n\n\nCodeggplot(weather, aes(x = mintemp, y = maxtemp)) +\n  geom_text(aes(label = windgustdir), alpha = 1, size = 2)\n\nWarning: Removed 73 rows containing missing values or values outside the scale range\n(`geom_text()`).",
    "crumbs": [
      "Summary",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exam 1 Summary</span>"
    ]
  },
  {
    "objectID": "summary/exam_1.html#data-manipulation",
    "href": "summary/exam_1.html#data-manipulation",
    "title": "\n8  Exam 1 Summary\n",
    "section": "\n8.12 Data manipulation",
    "text": "8.12 Data manipulation\nPiping: Use the |&gt; pipe operator. It makes the object on the left side pass to the function on the right to the get a new object.\nTypes of reshaped data: - Aggregated data - Data that has had functions like group_by() or summarize() done to it. It gains aggregate information about the observations but loses data on individual observations - Raw data, reshaped - Data that is reshaped to maintain individual observations, but in a way that it can be properly manipulated\nUnit of observation: The level at which data is collected and analyzed, by individual cases or groups.\nFor example, in a dataset of students, each student is the unit of observation. In a dataset of cities, each city is the unit of observation. In a datset of daily weather data, each day is the unit of observation",
    "crumbs": [
      "Summary",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exam 1 Summary</span>"
    ]
  },
  {
    "objectID": "summary/exam_1.html#command-list",
    "href": "summary/exam_1.html#command-list",
    "title": "\n8  Exam 1 Summary\n",
    "section": "\n8.13 Command List:",
    "text": "8.13 Command List:\n\n\n\n\n\n\nVerb\nOutcome\n\n\n\narrange\nArrange the rows according to a variable\n\n\nfilter\nFilter out or obtain a subset of the rows\n\n\nselect\nSelect a subset of the columns\n\n\nmutate\nMutate or create a column\n\n\nsummarize\nCalculate a numerical summary of a column\n\n\ngroup_by\nGroup the rows by a specified column\n\n\nungroup\nUngroups the previous group_by\n\n\n\ncount()\nCounts the number of observations in a group or just the whole column\n\n\nn()\nAlso counts the number of observations in a group, but must be used inside of summarize or mutate\n\n\n\nna.rm\nMakes it so that the expressions you use in your command do not have the NA value\n\n\nas.factor\nUse it in the mutate command to make a variable categorical\n\n\nas.numeric\nUse it in the mutate command to make a variable numeric\n\n\nhead()\nShows first rows of dataset\n\n\nlibrary(package)\nLoads package into program\n\n\n\narrange:\nWe have dataset weather\n\nCodehead(weather)\n\n        date   location mintemp maxtemp rainfall evaporation sunshine\n1 2020-01-01 Wollongong    17.1    23.1        0          NA       NA\n2 2020-01-02 Wollongong    17.7    24.2        0          NA       NA\n3 2020-01-03 Wollongong    19.7    26.8        0          NA       NA\n4 2020-01-04 Wollongong    20.4    35.5        0          NA       NA\n5 2020-01-05 Wollongong    19.8    21.4        0          NA       NA\n6 2020-01-06 Wollongong    18.3    22.9        0          NA       NA\n  windgustdir windgustspeed winddir9am winddir3pm windspeed9am windspeed3pm\n1         SSW            39        SSW        SSE           20           15\n2         SSW            37          S        ENE           13           15\n3          NE            41        NNW        NNE            7           17\n4         SSW            78         NE        NNE           15           17\n5         SSW            57        SSW          S           31           35\n6          NE            35        ESE         NE           17           20\n  humidity9am humidity3pm pressure9am pressure3pm cloud9am cloud3pm temp9am\n1          69          64      1014.9      1014.0        8        1    19.1\n2          72          54      1020.1      1017.7        7        1    19.8\n3          72          71      1017.5      1013.0        6       NA    23.4\n4          77          69      1008.8      1003.9       NA       NA    24.5\n5          70          75      1018.9      1019.9       NA        7    20.7\n6          71          71      1021.2      1018.2       NA       NA    20.9\n  temp3pm raintoday risk_mm raintomorrow\n1    22.9        No     0.0           No\n2    23.6        No     0.0           No\n3    25.7        No     0.0           No\n4    26.7        No     0.0           No\n5    20.0        No     0.0           No\n6    22.6        No     0.8           No\n\n\nAnd we use arrange(maxtemp) on it to order observations from lowest to highest value in maxtemp\n\nCodeweather |&gt;\n  arrange(maxtemp) |&gt;\n  head()\n\n        date location mintemp maxtemp rainfall evaporation sunshine windgustdir\n1 2020-07-10   Hobart     2.1     8.6      0.0         0.4       NA         NNW\n2 2020-06-18   Hobart     2.0     8.7      0.0         0.8       NA         NNW\n3 2021-06-22   Hobart     2.7     8.7      0.0         0.6       NA         NNW\n4 2021-07-25   Hobart     4.8     8.7      1.4         1.2       NA          NW\n5 2020-07-11   Hobart     2.1     8.8      0.0         0.0       NA         NNW\n6 2020-08-05   Hobart     2.6     8.8     46.2         1.2       NA           S\n  windgustspeed winddir9am winddir3pm windspeed9am windspeed3pm humidity9am\n1            37        NNW          N           20           13          92\n2            31        NNW        NNW           17           11          82\n3            31        NNW        NNW           19           13          94\n4            69        WNW          W           35           17          64\n5            30        NNW        NNW           20           13          88\n6            70        SSW        SSW           30           28          79\n  humidity3pm pressure9am pressure3pm cloud9am cloud3pm temp9am temp3pm\n1          80      1026.0      1022.4        7        7     2.1     7.5\n2          65      1035.2      1030.4        1        7     3.3     8.6\n3          75      1030.2      1027.5        7        7     3.7     8.2\n4          81       987.5       992.3        6        7     6.5     4.9\n5          75      1018.4      1015.9        7        7     4.5     8.8\n6          76      1012.0      1011.6        7        7     6.6     7.4\n  raintoday risk_mm raintomorrow\n1        No     0.0           No\n2        No     0.0           No\n3        No     0.0           No\n4       Yes     2.8          Yes\n5        No     0.8           No\n6       Yes     2.6          Yes\n\n\nOr arrange(desc(maxtemp)) to order observations from highest to lowest value in maxtemp\n\nCodeweather |&gt;\n  arrange(desc(maxtemp)) |&gt;\n  head()\n\n        date location mintemp maxtemp rainfall evaporation sunshine windgustdir\n1 2021-12-18    Uluru    25.6    45.4        0          NA       NA         NNE\n2 2020-11-28    Uluru    23.0    45.2        0          NA       NA         SSW\n3 2021-12-17    Uluru    23.0    44.0        0          NA       NA          NW\n4 2022-01-11    Uluru    26.8    43.8        0          NA       NA         ESE\n5 2020-02-13    Uluru    28.8    43.6        0          NA       NA         NNE\n6 2020-02-14    Uluru    27.9    43.5        0          NA       NA         SSW\n  windgustspeed winddir9am winddir3pm windspeed9am windspeed3pm humidity9am\n1            39        ESE         NW           17           22          20\n2            54          S          N           15           17          18\n3            50         NE        WNW           19           13          21\n4            56         SE        ESE           20           20          26\n5            52         NE          E           24            7          16\n6            46        ESE          S           19           20          17\n  humidity3pm pressure9am pressure3pm cloud9am cloud3pm temp9am temp3pm\n1           8      1005.7      1002.0       NA       NA    36.8    44.5\n2           6      1005.4      1001.3       NA       NA    36.6    43.7\n3          10      1006.4      1001.7        2        1    33.4    43.5\n4           7      1011.7      1007.5       NA       NA    31.7    42.2\n5          14      1006.8      1002.0       NA        2    34.8    42.2\n6          13      1006.8      1002.8        2        2    34.7    41.3\n  raintoday risk_mm raintomorrow\n1        No       0           No\n2        No       0           No\n3        No       0           No\n4        No       0           No\n5        No       0           No\n6        No       0           No\n\n\nfilter:\nWe can use filter(maxtemp &lt; 45) to get observations with a maxtemp below 45\n\nCodeweather |&gt;\n  filter(maxtemp &lt; 45) |&gt;\n  head()\n\n        date   location mintemp maxtemp rainfall evaporation sunshine\n1 2020-01-01 Wollongong    17.1    23.1        0          NA       NA\n2 2020-01-02 Wollongong    17.7    24.2        0          NA       NA\n3 2020-01-03 Wollongong    19.7    26.8        0          NA       NA\n4 2020-01-04 Wollongong    20.4    35.5        0          NA       NA\n5 2020-01-05 Wollongong    19.8    21.4        0          NA       NA\n6 2020-01-06 Wollongong    18.3    22.9        0          NA       NA\n  windgustdir windgustspeed winddir9am winddir3pm windspeed9am windspeed3pm\n1         SSW            39        SSW        SSE           20           15\n2         SSW            37          S        ENE           13           15\n3          NE            41        NNW        NNE            7           17\n4         SSW            78         NE        NNE           15           17\n5         SSW            57        SSW          S           31           35\n6          NE            35        ESE         NE           17           20\n  humidity9am humidity3pm pressure9am pressure3pm cloud9am cloud3pm temp9am\n1          69          64      1014.9      1014.0        8        1    19.1\n2          72          54      1020.1      1017.7        7        1    19.8\n3          72          71      1017.5      1013.0        6       NA    23.4\n4          77          69      1008.8      1003.9       NA       NA    24.5\n5          70          75      1018.9      1019.9       NA        7    20.7\n6          71          71      1021.2      1018.2       NA       NA    20.9\n  temp3pm raintoday risk_mm raintomorrow\n1    22.9        No     0.0           No\n2    23.6        No     0.0           No\n3    25.7        No     0.0           No\n4    26.7        No     0.0           No\n5    20.0        No     0.0           No\n6    22.6        No     0.8           No\n\n\nselect:\nWe can use select(maxtemp, mintemp, location) to only select those columns\n\nCodeweather |&gt;\n  select(maxtemp, mintemp, location) |&gt;\n  head()\n\n  maxtemp mintemp   location\n1    23.1    17.1 Wollongong\n2    24.2    17.7 Wollongong\n3    26.8    19.7 Wollongong\n4    35.5    20.4 Wollongong\n5    21.4    19.8 Wollongong\n6    22.9    18.3 Wollongong\n\n\nOr we can use (-maxtemp) to select all columns except maxtemp\n\nCodeweather |&gt;\n  select(-maxtemp) |&gt;\n  head()\n\n        date   location mintemp rainfall evaporation sunshine windgustdir\n1 2020-01-01 Wollongong    17.1        0          NA       NA         SSW\n2 2020-01-02 Wollongong    17.7        0          NA       NA         SSW\n3 2020-01-03 Wollongong    19.7        0          NA       NA          NE\n4 2020-01-04 Wollongong    20.4        0          NA       NA         SSW\n5 2020-01-05 Wollongong    19.8        0          NA       NA         SSW\n6 2020-01-06 Wollongong    18.3        0          NA       NA          NE\n  windgustspeed winddir9am winddir3pm windspeed9am windspeed3pm humidity9am\n1            39        SSW        SSE           20           15          69\n2            37          S        ENE           13           15          72\n3            41        NNW        NNE            7           17          72\n4            78         NE        NNE           15           17          77\n5            57        SSW          S           31           35          70\n6            35        ESE         NE           17           20          71\n  humidity3pm pressure9am pressure3pm cloud9am cloud3pm temp9am temp3pm\n1          64      1014.9      1014.0        8        1    19.1    22.9\n2          54      1020.1      1017.7        7        1    19.8    23.6\n3          71      1017.5      1013.0        6       NA    23.4    25.7\n4          69      1008.8      1003.9       NA       NA    24.5    26.7\n5          75      1018.9      1019.9       NA        7    20.7    20.0\n6          71      1021.2      1018.2       NA       NA    20.9    22.6\n  raintoday risk_mm raintomorrow\n1        No     0.0           No\n2        No     0.0           No\n3        No     0.0           No\n4        No     0.0           No\n5        No     0.0           No\n6        No     0.8           No\n\n\nmutate:\nWe can use mutate(double_maxtemp = maxtemp * 2) to create a new column\n\nCodeweather |&gt;\n  mutate(double_maxtemp = maxtemp * 2) |&gt;\n  select(maxtemp, mintemp) |&gt;\n  head()\n\n  maxtemp mintemp\n1    23.1    17.1\n2    24.2    17.7\n3    26.8    19.7\n4    35.5    20.4\n5    21.4    19.8\n6    22.9    18.3\n\n\nsummarize:\nWe can use summarize(mean_mintemp = mean(mintemp)) to summarize the mintemp column as a mean\n\nCodeweather |&gt;\n  summarize(mean_mintemp = mean(mintemp, na.rm = TRUE)) |&gt;\n  head()\n\n  mean_mintemp\n1     13.26417\n\n\ngroup_by:\nWe can use group_by(location) to make the unit of observation location, and then use a function like summarize(avg_mintemp = mean(mintemp))\n\nCodeweather |&gt;\n  group_by(location) |&gt;\n  summarize(avg_mintemp = mean(mintemp, na.rm = TRUE)) |&gt;\n  head()\n\n# A tibble: 3 × 2\n  location   avg_mintemp\n  &lt;chr&gt;            &lt;dbl&gt;\n1 Hobart            9.47\n2 Uluru            15.3 \n3 Wollongong       15.1 \n\n\nungroup:\nYou can reverse the unit of observation you select in group_by by using ungroup by, but only if you didn’t use summarize. In this example, we use group_by(location), then mutate(avg_mintemp = mean(mintemp)), then ungroup()\n\nCodeweather |&gt;\n  group_by(location) |&gt;\n  mutate(avg_mintemp = mean(mintemp, na.rm = TRUE)) |&gt;\n  ungroup() |&gt;\n  head()\n\n# A tibble: 6 × 25\n  date       location  mintemp maxtemp rainfall evaporation sunshine windgustdir\n  &lt;date&gt;     &lt;chr&gt;       &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;       &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt;      \n1 2020-01-01 Wollongo…    17.1    23.1        0          NA       NA SSW        \n2 2020-01-02 Wollongo…    17.7    24.2        0          NA       NA SSW        \n3 2020-01-03 Wollongo…    19.7    26.8        0          NA       NA NE         \n4 2020-01-04 Wollongo…    20.4    35.5        0          NA       NA SSW        \n5 2020-01-05 Wollongo…    19.8    21.4        0          NA       NA SSW        \n6 2020-01-06 Wollongo…    18.3    22.9        0          NA       NA NE         \n# ℹ 17 more variables: windgustspeed &lt;int&gt;, winddir9am &lt;chr&gt;, winddir3pm &lt;chr&gt;,\n#   windspeed9am &lt;int&gt;, windspeed3pm &lt;int&gt;, humidity9am &lt;int&gt;,\n#   humidity3pm &lt;int&gt;, pressure9am &lt;dbl&gt;, pressure3pm &lt;dbl&gt;, cloud9am &lt;int&gt;,\n#   cloud3pm &lt;int&gt;, temp9am &lt;dbl&gt;, temp3pm &lt;dbl&gt;, raintoday &lt;chr&gt;,\n#   risk_mm &lt;dbl&gt;, raintomorrow &lt;chr&gt;, avg_mintemp &lt;dbl&gt;\n\n\ncount:\nWe have dataset hikes\n\nCodehead(hikes)\n\n             peak elevation difficulty ascent length time    rating\n1     Mt. Marcy        5344          5   3166   14.8 10.0  moderate\n2 Algonquin Peak       5114          5   2936    9.6  9.0  moderate\n3   Mt. Haystack       4960          7   3570   17.8 12.0 difficult\n4   Mt. Skylight       4926          7   4265   17.9 15.0 difficult\n5 Whiteface Mtn.       4867          4   2535   10.4  8.5      easy\n6       Dix Mtn.       4857          5   2800   13.2 10.0  moderate\n\n\nWe can use count(rating) to count the number of observations in the location column for each value\n\nCodehikes |&gt;\n  count(rating) |&gt;\n  head()\n\n     rating  n\n1 difficult  8\n2      easy 11\n3  moderate 27\n\n\nWe can also use count() to count the total observations in the dataset\n\nCodehikes |&gt;\n  count() |&gt;\n  head()\n\n   n\n1 46\n\n\nn:\nWe can use n() in a summarize function to count the number of observations in a group, similar to count\n\nCodehikes &lt;- read.csv(\"https://mac-stat.github.io/data/high_peaks.csv\")\n\nhikes |&gt;\n  group_by(rating) |&gt;\n  filter(!is.na(rating)) |&gt;\n  summarize(total_trails = n())\n\n# A tibble: 3 × 2\n  rating    total_trails\n  &lt;chr&gt;            &lt;int&gt;\n1 difficult            8\n2 easy                11\n3 moderate            27\n\n\nna.rm:\nWe can use na.rm = TRUE in a summarize function to remove all NA values in a column\n\nCodeweather |&gt;\n  summarize(avg_mintemp = mean(mintemp, na.rm = TRUE))\n\n  avg_mintemp\n1    13.26417\n\n\nas.factor:\nWe can use as.factor(windgustdir) in a mutate function to make it a factor\n\nCodeweather |&gt;\n  mutate(windgustdir = as.factor(windgustdir)) |&gt;\n  head()\n\n        date   location mintemp maxtemp rainfall evaporation sunshine\n1 2020-01-01 Wollongong    17.1    23.1        0          NA       NA\n2 2020-01-02 Wollongong    17.7    24.2        0          NA       NA\n3 2020-01-03 Wollongong    19.7    26.8        0          NA       NA\n4 2020-01-04 Wollongong    20.4    35.5        0          NA       NA\n5 2020-01-05 Wollongong    19.8    21.4        0          NA       NA\n6 2020-01-06 Wollongong    18.3    22.9        0          NA       NA\n  windgustdir windgustspeed winddir9am winddir3pm windspeed9am windspeed3pm\n1         SSW            39        SSW        SSE           20           15\n2         SSW            37          S        ENE           13           15\n3          NE            41        NNW        NNE            7           17\n4         SSW            78         NE        NNE           15           17\n5         SSW            57        SSW          S           31           35\n6          NE            35        ESE         NE           17           20\n  humidity9am humidity3pm pressure9am pressure3pm cloud9am cloud3pm temp9am\n1          69          64      1014.9      1014.0        8        1    19.1\n2          72          54      1020.1      1017.7        7        1    19.8\n3          72          71      1017.5      1013.0        6       NA    23.4\n4          77          69      1008.8      1003.9       NA       NA    24.5\n5          70          75      1018.9      1019.9       NA        7    20.7\n6          71          71      1021.2      1018.2       NA       NA    20.9\n  temp3pm raintoday risk_mm raintomorrow\n1    22.9        No     0.0           No\n2    23.6        No     0.0           No\n3    25.7        No     0.0           No\n4    26.7        No     0.0           No\n5    20.0        No     0.0           No\n6    22.6        No     0.8           No\n\n\nas.numeric:\nWe can use as.numeric(mintemp) in a mutate function to make mintemp a number (even though it was already a number)\n\nCodeweather |&gt;\n  mutate(mintemp = as.numeric(mintemp)) |&gt;\n  head()\n\n        date   location mintemp maxtemp rainfall evaporation sunshine\n1 2020-01-01 Wollongong    17.1    23.1        0          NA       NA\n2 2020-01-02 Wollongong    17.7    24.2        0          NA       NA\n3 2020-01-03 Wollongong    19.7    26.8        0          NA       NA\n4 2020-01-04 Wollongong    20.4    35.5        0          NA       NA\n5 2020-01-05 Wollongong    19.8    21.4        0          NA       NA\n6 2020-01-06 Wollongong    18.3    22.9        0          NA       NA\n  windgustdir windgustspeed winddir9am winddir3pm windspeed9am windspeed3pm\n1         SSW            39        SSW        SSE           20           15\n2         SSW            37          S        ENE           13           15\n3          NE            41        NNW        NNE            7           17\n4         SSW            78         NE        NNE           15           17\n5         SSW            57        SSW          S           31           35\n6          NE            35        ESE         NE           17           20\n  humidity9am humidity3pm pressure9am pressure3pm cloud9am cloud3pm temp9am\n1          69          64      1014.9      1014.0        8        1    19.1\n2          72          54      1020.1      1017.7        7        1    19.8\n3          72          71      1017.5      1013.0        6       NA    23.4\n4          77          69      1008.8      1003.9       NA       NA    24.5\n5          70          75      1018.9      1019.9       NA        7    20.7\n6          71          71      1021.2      1018.2       NA       NA    20.9\n  temp3pm raintoday risk_mm raintomorrow\n1    22.9        No     0.0           No\n2    23.6        No     0.0           No\n3    25.7        No     0.0           No\n4    26.7        No     0.0           No\n5    20.0        No     0.0           No\n6    22.6        No     0.8           No\n\n\nhead():\nWe can use head(weather) to check out the first few rows of the weather dataset\n\nCodehead(weather)\n\n        date   location mintemp maxtemp rainfall evaporation sunshine\n1 2020-01-01 Wollongong    17.1    23.1        0          NA       NA\n2 2020-01-02 Wollongong    17.7    24.2        0          NA       NA\n3 2020-01-03 Wollongong    19.7    26.8        0          NA       NA\n4 2020-01-04 Wollongong    20.4    35.5        0          NA       NA\n5 2020-01-05 Wollongong    19.8    21.4        0          NA       NA\n6 2020-01-06 Wollongong    18.3    22.9        0          NA       NA\n  windgustdir windgustspeed winddir9am winddir3pm windspeed9am windspeed3pm\n1         SSW            39        SSW        SSE           20           15\n2         SSW            37          S        ENE           13           15\n3          NE            41        NNW        NNE            7           17\n4         SSW            78         NE        NNE           15           17\n5         SSW            57        SSW          S           31           35\n6          NE            35        ESE         NE           17           20\n  humidity9am humidity3pm pressure9am pressure3pm cloud9am cloud3pm temp9am\n1          69          64      1014.9      1014.0        8        1    19.1\n2          72          54      1020.1      1017.7        7        1    19.8\n3          72          71      1017.5      1013.0        6       NA    23.4\n4          77          69      1008.8      1003.9       NA       NA    24.5\n5          70          75      1018.9      1019.9       NA        7    20.7\n6          71          71      1021.2      1018.2       NA       NA    20.9\n  temp3pm raintoday risk_mm raintomorrow\n1    22.9        No     0.0           No\n2    23.6        No     0.0           No\n3    25.7        No     0.0           No\n4    26.7        No     0.0           No\n5    20.0        No     0.0           No\n6    22.6        No     0.8           No\n\n\nlibrary():\nWhen you want to use a package that has been downloaded, use download(the package’s name). For example:\n\nCodelibrary(tidyverse)",
    "crumbs": [
      "Summary",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exam 1 Summary</span>"
    ]
  },
  {
    "objectID": "summary/exam_1.html#logical-operators",
    "href": "summary/exam_1.html#logical-operators",
    "title": "\n8  Exam 1 Summary\n",
    "section": "\n8.14 Logical Operators:",
    "text": "8.14 Logical Operators:\n\n\nOperator\nMeaning\n\n\n\n==\nEqual to\n\n\n!=\nNot equal to\n\n\n&gt;\nGreater than\n\n\n&gt;=\nGreater than or equal to\n\n\n&lt;\nLess than\n\n\n&lt;=\nLess than or equal to\n\n\n%in% c(var1, var2)\nIs equal to var1, var2, etc.\n\n\n\nWe can use logical operators to do various things. For example, in data manipulation, you can use it with a filter function like this:\n\nCodeweather |&gt;\n  filter(mintemp &gt; 0) |&gt;\n  head()\n\n        date   location mintemp maxtemp rainfall evaporation sunshine\n1 2020-01-01 Wollongong    17.1    23.1        0          NA       NA\n2 2020-01-02 Wollongong    17.7    24.2        0          NA       NA\n3 2020-01-03 Wollongong    19.7    26.8        0          NA       NA\n4 2020-01-04 Wollongong    20.4    35.5        0          NA       NA\n5 2020-01-05 Wollongong    19.8    21.4        0          NA       NA\n6 2020-01-06 Wollongong    18.3    22.9        0          NA       NA\n  windgustdir windgustspeed winddir9am winddir3pm windspeed9am windspeed3pm\n1         SSW            39        SSW        SSE           20           15\n2         SSW            37          S        ENE           13           15\n3          NE            41        NNW        NNE            7           17\n4         SSW            78         NE        NNE           15           17\n5         SSW            57        SSW          S           31           35\n6          NE            35        ESE         NE           17           20\n  humidity9am humidity3pm pressure9am pressure3pm cloud9am cloud3pm temp9am\n1          69          64      1014.9      1014.0        8        1    19.1\n2          72          54      1020.1      1017.7        7        1    19.8\n3          72          71      1017.5      1013.0        6       NA    23.4\n4          77          69      1008.8      1003.9       NA       NA    24.5\n5          70          75      1018.9      1019.9       NA        7    20.7\n6          71          71      1021.2      1018.2       NA       NA    20.9\n  temp3pm raintoday risk_mm raintomorrow\n1    22.9        No     0.0           No\n2    23.6        No     0.0           No\n3    25.7        No     0.0           No\n4    26.7        No     0.0           No\n5    20.0        No     0.0           No\n6    22.6        No     0.8           No",
    "crumbs": [
      "Summary",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exam 1 Summary</span>"
    ]
  },
  {
    "objectID": "summary/exam_1.html#selection-commands",
    "href": "summary/exam_1.html#selection-commands",
    "title": "\n8  Exam 1 Summary\n",
    "section": "\n8.15 Selection Commands:",
    "text": "8.15 Selection Commands:\n\n\n\n\n\n\nVerb\nOutput\n\n\n\nstarts_with(\"string\")\nSelects columns that start with the given string\n\n\nends_with(\"string\")\nSelects columns that end with the given string\n\n\ncontains(\"string\")\nSelects columns that contain the given string\n\n\nnames(dataset1)\nReturns the names of all columns in the dataset\n\n\nis.na\nSelects values that are NA\n\n\n\n!is.na\nSelects values that are not NA\n\n\n\nna.omit()\nRemoves rows with any NA values from the dataset\n\n\n\nstarts_with():\nWe can use starts_with(“wind”) in a select function to select columns that start with wind\n\nCodeweather |&gt;\n  select(starts_with(\"wind\")) |&gt;\n  head()\n\n  windgustdir windgustspeed winddir9am winddir3pm windspeed9am windspeed3pm\n1         SSW            39        SSW        SSE           20           15\n2         SSW            37          S        ENE           13           15\n3          NE            41        NNW        NNE            7           17\n4         SSW            78         NE        NNE           15           17\n5         SSW            57        SSW          S           31           35\n6          NE            35        ESE         NE           17           20\n\n\nends_with():\nWe can use ends_with(“pm”) in a select function to select columns of measurements taken in the second half of the day\n\nCodeweather |&gt;\n  select(ends_with(\"pm\")) |&gt;\n  head()\n\n  winddir3pm windspeed3pm humidity3pm pressure3pm cloud3pm temp3pm\n1        SSE           15          64      1014.0        1    22.9\n2        ENE           15          54      1017.7        1    23.6\n3        NNE           17          71      1013.0       NA    25.7\n4        NNE           17          69      1003.9       NA    26.7\n5          S           35          75      1019.9        7    20.0\n6         NE           20          71      1018.2       NA    22.6\n\n\ncontains():\nWe can use contains(“3”) in a select function to select columns with measurements at 3 pm or am\n\nCodeweather |&gt;\n  select(contains(\"3\")) |&gt;\n  head()\n\n  winddir3pm windspeed3pm humidity3pm pressure3pm cloud3pm temp3pm\n1        SSE           15          64      1014.0        1    22.9\n2        ENE           15          54      1017.7        1    23.6\n3        NNE           17          71      1013.0       NA    25.7\n4        NNE           17          69      1003.9       NA    26.7\n5          S           35          75      1019.9        7    20.0\n6         NE           20          71      1018.2       NA    22.6\n\n\nname:\nWe can use names(weather) to get the names of each column in the weather dataset\n\nCodenames(weather)\n\n [1] \"date\"          \"location\"      \"mintemp\"       \"maxtemp\"      \n [5] \"rainfall\"      \"evaporation\"   \"sunshine\"      \"windgustdir\"  \n [9] \"windgustspeed\" \"winddir9am\"    \"winddir3pm\"    \"windspeed9am\" \n[13] \"windspeed3pm\"  \"humidity9am\"   \"humidity3pm\"   \"pressure9am\"  \n[17] \"pressure3pm\"   \"cloud9am\"      \"cloud3pm\"      \"temp9am\"      \n[21] \"temp3pm\"       \"raintoday\"     \"risk_mm\"       \"raintomorrow\" \n\n\nis.na():\nWe can use is.na(cloud9am) in a filter function to select observations which have NA values in the clouds9am column\n\nCodeweather |&gt;\n  filter(is.na(cloud9am)) |&gt;\n  head()\n\n        date   location mintemp maxtemp rainfall evaporation sunshine\n1 2020-01-04 Wollongong    20.4    35.5      0.0          NA       NA\n2 2020-01-05 Wollongong    19.8    21.4      0.0          NA       NA\n3 2020-01-06 Wollongong    18.3    22.9      0.0          NA       NA\n4 2020-01-07 Wollongong    19.9    25.6      0.8          NA       NA\n5 2020-01-09 Wollongong    19.8    23.1      0.0          NA       NA\n6 2020-01-10 Wollongong    20.5    25.4      0.0          NA       NA\n  windgustdir windgustspeed winddir9am winddir3pm windspeed9am windspeed3pm\n1         SSW            78         NE        NNE           15           17\n2         SSW            57        SSW          S           31           35\n3          NE            35        ESE         NE           17           20\n4           S            44        NNW          E           30            7\n5           S            39        SSW          S           24           26\n6          NE            56          N         NE           19           39\n  humidity9am humidity3pm pressure9am pressure3pm cloud9am cloud3pm temp9am\n1          77          69      1008.8      1003.9       NA       NA    24.5\n2          70          75      1018.9      1019.9       NA        7    20.7\n3          71          71      1021.2      1018.2       NA       NA    20.9\n4          76          72      1015.4      1012.0       NA       NA    22.9\n5          76          79      1018.4      1016.9       NA       NA    21.2\n6          79          76      1013.0      1006.1       NA       NA    23.0\n  temp3pm raintoday risk_mm raintomorrow\n1    26.7        No     0.0           No\n2    20.0        No     0.0           No\n3    22.6        No     0.8           No\n4    24.9        No     1.6          Yes\n5    22.2        No     0.0           No\n6    25.1        No     1.0           No\n\n\n!is.na():\nWe can use !is.na(cloud9am) in a filter function to select observations which don’t have NA values in the clouds9am column\n\nCodeweather |&gt;\n  filter(!is.na(cloud9am)) |&gt;\n  head()\n\n        date   location mintemp maxtemp rainfall evaporation sunshine\n1 2020-01-01 Wollongong    17.1    23.1      0.0          NA       NA\n2 2020-01-02 Wollongong    17.7    24.2      0.0          NA       NA\n3 2020-01-03 Wollongong    19.7    26.8      0.0          NA       NA\n4 2020-01-08 Wollongong    20.1    23.2      1.6          NA       NA\n5 2020-01-18 Wollongong    17.0    22.4      9.6          NA       NA\n6 2020-01-19 Wollongong    18.3    22.8      2.8          NA       NA\n  windgustdir windgustspeed winddir9am winddir3pm windspeed9am windspeed3pm\n1         SSW            39        SSW        SSE           20           15\n2         SSW            37          S        ENE           13           15\n3          NE            41        NNW        NNE            7           17\n4           S            41          S          S           31           33\n5         SSW            57        SSW        SSW           41           31\n6           S            19        SSW        SSW            6           15\n  humidity9am humidity3pm pressure9am pressure3pm cloud9am cloud3pm temp9am\n1          69          64      1014.9      1014.0        8        1    19.1\n2          72          54      1020.1      1017.7        7        1    19.8\n3          72          71      1017.5      1013.0        6       NA    23.4\n4          77          76      1016.2      1015.2        8       NA    21.3\n5          86          71      1010.6      1009.6        8        7    19.6\n6          87          87      1009.0      1006.8        8        8    20.1\n  temp3pm raintoday risk_mm raintomorrow\n1    22.9        No     0.0           No\n2    23.6        No     0.0           No\n3    25.7        No     0.0           No\n4    22.2       Yes     0.0           No\n5    21.6       Yes     2.8          Yes\n6    20.9       Yes     1.0           No\n\n\nna.omit():\nWe can use na.omit(weather) to remove all observations with NA values\n\nCodena.omit(weather) |&gt;\n  head()\n\n          date location mintemp maxtemp rainfall evaporation sunshine\n790 2020-01-01   Hobart    11.9    23.3        0         7.8     10.4\n791 2020-01-02   Hobart    15.7    25.9        0         9.6     10.4\n792 2020-01-03   Hobart    14.8    20.7        0         7.0      7.1\n793 2020-01-04   Hobart    15.8    28.1        0         6.8      3.5\n794 2020-01-05   Hobart    11.6    22.9        0         6.4      9.7\n795 2020-01-06   Hobart     9.6    20.9        0         6.8     11.2\n    windgustdir windgustspeed winddir9am winddir3pm windspeed9am windspeed3pm\n790         NNW            52         NW        NNW           26           28\n791          NW            50        NNW         SE           22           30\n792         SSE            30        ESE        ESE            9           17\n793           W            80        NNW        WSW           20           24\n794         WNW            52        NNW          E           22           15\n795         SSW            37          E        SSE            9           20\n    humidity9am humidity3pm pressure9am pressure3pm cloud9am cloud3pm temp9am\n790          41          36      1010.8      1009.3        3        7    17.4\n791          43          60      1015.1      1015.0        6        6    19.0\n792          64          59      1016.6      1011.8        7        7    16.2\n793          49          28      1001.6      1005.3        6        6    19.9\n794          48          27      1020.7      1019.6        7        3    14.2\n795          54          53      1022.9      1019.7        3        1    15.3\n    temp3pm raintoday risk_mm raintomorrow\n790    22.1        No       0           No\n791    19.0        No       0           No\n792    19.7        No       0           No\n793    20.6        No       0           No\n794    21.9        No       0           No\n795    20.8        No       0           No",
    "crumbs": [
      "Summary",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exam 1 Summary</span>"
    ]
  },
  {
    "objectID": "summary/exam_1.html#date-commands",
    "href": "summary/exam_1.html#date-commands",
    "title": "\n8  Exam 1 Summary\n",
    "section": "\n8.16 Date Commands:",
    "text": "8.16 Date Commands:\n\n\n\n\n\n\nInput\nOutput\n\n\n\nas.Date(today())\nReturns today’s date\n\n\nyear(date)\nReturns the year from the date\n\n\nmonth(date)\nReturns the month (1–12) from the date\n\n\nmonth(date, label = TRUE)\nReturns the month as Jan, Feb, Mar, etc.\n\n\nweek(date)\nReturns the week of the year from the date\n\n\nmday(date)\nReturns the day of the month from the date\n\n\nyday(date)\nReturns the day of the year from the date\n\n\nwday(date)\nReturns the day of the week (1 = Sunday by default)\n\n\nwday(date, label = TRUE)\nReturns the day of the week as text (e.g. Mon, Tue)\n\n\n\nWhen you type date1 &gt; date2, you are typing a boolean expression that claims that date 1 occurred after date 2. Same goes for &gt;= and &lt;=\nWhen filtering by dates, use “” marks, or it won’t identify the numbers as a date, for example:\n\nCodeweather |&gt;\n  filter(date &gt; \"2020-05-12\") |&gt;\n  head()\n\n        date   location mintemp maxtemp rainfall evaporation sunshine\n1 2020-05-13 Wollongong    12.0    19.4      0.0          NA       NA\n2 2020-05-14 Wollongong    11.7    17.1      0.0          NA       NA\n3 2020-05-15 Wollongong    11.9    17.7      0.0          NA       NA\n4 2020-05-16 Wollongong    11.9    18.0      9.0          NA       NA\n5 2020-05-17 Wollongong    11.5    18.3      1.0          NA       NA\n6 2020-05-18 Wollongong    12.1    19.0     17.2          NA       NA\n  windgustdir windgustspeed winddir9am winddir3pm windspeed9am windspeed3pm\n1          NW            24        SSW        ESE            9            9\n2         SSW            46         SW          S           26           35\n3           S            50         SW        SSW           22           33\n4         WSW            24         SW        SSE           11            9\n5           W            24         SW        WSW           13            7\n6           S            28        SSW        ENE            7           15\n  humidity9am humidity3pm pressure9am pressure3pm cloud9am cloud3pm temp9am\n1          46          47      1023.1      1021.5        4        6    15.8\n2          67          61      1028.1      1027.2        3        8    14.8\n3          58          70      1030.6      1029.0       NA        7    15.2\n4          88          71      1032.1      1029.7        8        8    14.4\n5          77          86      1031.7      1030.3       NA        8    16.7\n6          85          74      1033.7      1030.9        8        8    16.6\n  temp3pm raintoday risk_mm raintomorrow\n1    17.8        No     0.0           No\n2    15.9        No     0.0           No\n3    15.5        No     9.0          Yes\n4    17.5       Yes     1.0           No\n5    15.9        No    17.2          Yes\n6    17.4       Yes     0.0           No",
    "crumbs": [
      "Summary",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exam 1 Summary</span>"
    ]
  },
  {
    "objectID": "summary/exam_1.html#reshaping",
    "href": "summary/exam_1.html#reshaping",
    "title": "\n8  Exam 1 Summary\n",
    "section": "\n8.17 Reshaping:",
    "text": "8.17 Reshaping:\nYou can condense information (pivot longer) to combine information from multiple columns into one. You can also spread information from one column into multiple columns (pivot wider).\n\n\n\n\n\n\nFunction\nResult\n\n\n\npivot_wider(names_from = variable1, values_from = variable2)\nCreates a new column for each unique value in variable1; fills each with values from variable2.\n\n\npivot_longer(cols = c(variable1, variable2, variable3), names_to = \"variable4\", values_to = \"variable5\")\nConverts multiple columns into two: variable4 stores the original column names, variable5 holds their values.\n\n\npivot_longer(cols = -c(variable1, variable2, variable3), names_to = \"variable4\", values_to = \"variable5\")\nSame as above, but pivots all columns except variable1, variable2, and variable3.\n\n\n\nTo add a prefix to the name of every new column, use “names_prefix = ‘prefix1’” for pivot_wider at the end of the command. To remove the prefix of the column names in pivot wider, use “names_prefix = ‘prefix2’”. Use it in between names_to and values_to, and it will remove the text (from left to right) in the columns that are combining.\npivot_wider():\nWe can use the pivot_wider() function to create columns for each row, and assign the value of the average maxtemp for each location depending on if it rained or not\n\nCodeweather |&gt;\n  filter(!is.na(maxtemp)) |&gt;\n  filter(!is.na(raintoday)) |&gt;\n  group_by(raintoday, location) |&gt;\n  summarize(mean_maxtemp = mean(maxtemp)) |&gt;\n  pivot_wider(names_from = location, values_from = mean_maxtemp, names_prefix = \"avg_maxtemp_\")\n\n`summarise()` has grouped output by 'raintoday'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 2 × 4\n# Groups:   raintoday [2]\n  raintoday avg_maxtemp_Hobart avg_maxtemp_Uluru avg_maxtemp_Wollongong\n  &lt;chr&gt;                  &lt;dbl&gt;             &lt;dbl&gt;                  &lt;dbl&gt;\n1 No                      18.7              31.2                   22.0\n2 Yes                     15.7              28.1                   21.2\n\n\npivot_longer:\nWe can use pivot_longer() to create a column for if the temperature measured in the min or max temp that day, and another column for the value of the mintemp or maxtemp\n\nCodeweather |&gt;\n  pivot_longer(cols = c(mintemp, maxtemp), names_to = \"temp\", values_to = \"temperature\") |&gt;\n  select(date, location, temp, temperature) |&gt;\n  head()\n\n# A tibble: 6 × 4\n  date       location   temp    temperature\n  &lt;date&gt;     &lt;chr&gt;      &lt;chr&gt;         &lt;dbl&gt;\n1 2020-01-01 Wollongong mintemp        17.1\n2 2020-01-01 Wollongong maxtemp        23.1\n3 2020-01-02 Wollongong mintemp        17.7\n4 2020-01-02 Wollongong maxtemp        24.2\n5 2020-01-03 Wollongong mintemp        19.7\n6 2020-01-03 Wollongong maxtemp        26.8",
    "crumbs": [
      "Summary",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exam 1 Summary</span>"
    ]
  },
  {
    "objectID": "summary/exam_1.html#joining",
    "href": "summary/exam_1.html#joining",
    "title": "\n8  Exam 1 Summary\n",
    "section": "\n8.18 Joining:",
    "text": "8.18 Joining:\n\n\n\n\n\n\nFunction\nResult\n\n\n\ndataset1 |&gt; left_join(dataset2)\nAdds matching data from dataset2 to dataset1; keeps all rows from dataset1.\n\n\ndataset1 |&gt; right_join(dataset2)\nAdds matching data from dataset1 to dataset2; keeps all rows from dataset2.\n\n\ndataset1 |&gt; inner_join(dataset2)\nKeeps only rows with matches in both datasets; removes rows with no match (no NAs).\n\n\ndataset1 |&gt; full_join(dataset2)\nCombines all rows from both datasets; fills with NA where there are no matches.\n\n\ndataset1 |&gt; anti_join(dataset2)\nKeeps rows from dataset1 that do not match anything in dataset2.\n\n\ndataset1 |&gt; semi_join(dataset2)\nKeeps rows from dataset1 that have a match in dataset2, but includes only columns from dataset1.\n\n\n\nInside the join functions, you should specify join_by(commonon_column == common_column) to make sure the right observations are matched together\nleft_join:\nWe can insert how many students are enrolled in each class by inserting information from the courses_combined dataset into the grades dataset by using left_join()\n\nCodegrades &lt;- read.csv(\"https://mac-stat.github.io/data/grades.csv\")\n\ncourses &lt;- read.csv(\"https://mac-stat.github.io/data/courses.csv\")\n\ncourses_combined &lt;- courses |&gt;\n  group_by(sessionID) |&gt;\n  summarise(enroll = sum(enroll))\n\ngrades |&gt;\n  left_join(courses_combined, join_by(sessionID == sessionID)) |&gt;\n  head()\n\n     sid grade   sessionID enroll\n1 S31185    D+ session1784     22\n2 S31185    B+ session1785     52\n3 S31185    A- session1791     22\n4 S31185    B+ session1792     20\n5 S31185    B- session1794     22\n6 S31185    C+ session1795     26\n\n\nright_join:\nWe can also add information about grades and student identification number to courses_combined by using right_join(). New observations(rows) will be created in courses_combined to accomodate the larger number of observations in grades\n\nCodegrades |&gt;\n  right_join(courses_combined, join_by(sessionID == sessionID)) |&gt;\n  head()\n\n     sid grade   sessionID enroll\n1 S31185    D+ session1784     22\n2 S31185    B+ session1785     52\n3 S31185    A- session1791     22\n4 S31185    B+ session1792     20\n5 S31185    B- session1794     22\n6 S31185    C+ session1795     26\n\n\nfull_join():\nWe can use full_join() between the voters and contact datasets to combine as much information as we can about each observation. However, there will be NA values, meaning that some observations will be missing information for certain columns\n\nCodevoters &lt;- data.frame(\n  id = c(\"A\", \"D\", \"E\", \"F\", \"G\"),\n  times_voted = c(2, 4, 17, 6, 20)\n)\n  \ncontact &lt;- data.frame(\n  name = c(\"A\", \"B\", \"C\", \"D\"),\n  address = c(\"summit\", \"grand\", \"snelling\", \"fairview\"),\n  age = c(24, 89, 43, 38)\n)\n\nvoters |&gt;\n  full_join(contact, join_by(id == name))\n\n  id times_voted  address age\n1  A           2   summit  24\n2  D           4 fairview  38\n3  E          17     &lt;NA&gt;  NA\n4  F           6     &lt;NA&gt;  NA\n5  G          20     &lt;NA&gt;  NA\n6  B          NA    grand  89\n7  C          NA snelling  43\n\n\ninner_join():\nWe can use inner_join() between the voters and contact datasets to combine only observations where the combined information will fill all fields, so that no NA values will be created\n\nCodevoters |&gt;\n  inner_join(contact, join_by(id == name))\n\n  id times_voted  address age\n1  A           2   summit  24\n2  D           4 fairview  38\n\n\nanti_join():\nWe can use anti_join() to exclude all observations in voters that have a match in contact with no NA values\n\nCodevoters |&gt;\n  anti_join(contact, join_by(id == name))\n\n  id times_voted\n1  E          17\n2  F           6\n3  G          20\n\n\nsemi_join:\nWe can use inner_join() between the voters and contact datasets to only show observations in voters where the match in contact has no NA values. This will also not add information to the dataset from contact.\n\nCodevoters |&gt;\n  semi_join(contact, join_by(id == name))\n\n  id times_voted\n1  A           2\n2  D           4",
    "crumbs": [
      "Summary",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Exam 1 Summary</span>"
    ]
  },
  {
    "objectID": "ica/ica-uni.html",
    "href": "ica/ica-uni.html",
    "title": "\n9  Univariate Viz\n",
    "section": "",
    "text": "9.1 Exercises\nCodelibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nCode# Import data\nhikes &lt;- read.csv(\"https://mac-stat.github.io/data/high_peaks.csv\")",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-uni.html#exercises",
    "href": "ica/ica-uni.html#exercises",
    "title": "\n9  Univariate Viz\n",
    "section": "",
    "text": "Exercise 1: Research Questions\nLet’s dig into the hikes data, starting with the elevation and difficulty ratings of the hikes:\n\nCodehead(hikes)\n\n             peak elevation difficulty ascent length time    rating\n1     Mt. Marcy        5344          5   3166   14.8 10.0  moderate\n2 Algonquin Peak       5114          5   2936    9.6  9.0  moderate\n3   Mt. Haystack       4960          7   3570   17.8 12.0 difficult\n4   Mt. Skylight       4926          7   4265   17.9 15.0 difficult\n5 Whiteface Mtn.       4867          4   2535   10.4  8.5      easy\n6       Dix Mtn.       4857          5   2800   13.2 10.0  moderate\n\n\n\nWhat features would we like a visualization of the categorical difficulty rating variable to capture?\n\n\nWe would want to capture the difficulty rating through faceting, separating it into groups, to compare and contrast them\n\n\nWhat about a visualization of the quantitative elevation variable?\n\n\nWe would want to capture the difficulty rating to be captured in either the y-axis or x-axis of a frame\nExercise 2: Load tidyverse\nWe’ll address the above questions using ggplot tools. Try running the following chunk and simply take note of the error message – this is one you’ll get a lot!\n\nCode# Use the ggplot function\nggplot(hikes, aes(x = rating))\n\n\n\n\n\n\n\nIn order to use ggplot tools, we have to first load the tidyverse package in which they live. We’ve installed the package but we need to tell R when we want to use it. Run the chunk below to load the library. You’ll need to do this within any .qmd file that uses ggplot().\n\nCode# Load the package\nlibrary(tidyverse)\n\n\nExercise 3: Bar Chart of Ratings - Part 1\nConsider some specific research questions about the difficulty rating of the hikes:\n\nHow many hikes fall into each category?\nAre the hikes evenly distributed among these categories, or are some more common than others?\n\nAll of these questions can be answered with: (1) a bar chart; of (2) the categorical data recorded in the rating column. First, set up the plotting frame:\n\nCodeggplot(hikes, aes(x = rating))\n\n\n\n\n\n\n\nThink about:\n\nWhat did this do? What do you observe?\nWhat, in general, is the first argument of the ggplot() function?\nWhat is the purpose of writing x = rating?\nWhat do you think aes stands for?!?\nExercise 4: Bar Chart of Ratings - Part 2\nNow let’s add a geometric layer to the frame / canvas, and start customizing the plot’s theme. To this end, try each chunk below, one by one. In each chunk, make a comment about how both the code and the corresponding plot both changed.\nNOTE:\n\nPay attention to the general code properties and structure, not memorization.\nNot all of these are “good” plots. We’re just exploring ggplot.\n\n\nCode# This added a second line, geom_bar(), which added the geometric element of a bar representing quantity of a variable to the ggplot(hikes)\nggplot(hikes, aes(x = rating)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nCode# This added a third line of code, labs(x = \"Rating\", y = \"Number of hikes\"), which defined the x-axis and y-axis for the ggplot(hikes). \"ratings\" was already the x-axis, but it was capitalized, and the y-axis changed from \"count\" to \"Number of hikes\"\nggplot(hikes, aes(x = rating)) +\n  geom_bar() +\n  labs(x = \"Rating\", y = \"Number of hikes\")\n\n\n\n\n\n\n\n\nCode# This added a function to the geom_bar(), adding fill = \"blue\" to it, which made the bars blue\nggplot(hikes, aes(x = rating)) +\n  geom_bar(fill = \"blue\") +\n  labs(x = \"Rating\", y = \"Number of hikes\")\n\n\n\n\n\n\n\n\nCode# This changed the geom_bar line of code, adding in color = orange, making the whole bar orange including its edges, but then the fill function filled in the inner part of the bars to be blue, making the edges of the bar orange and the filling blue\nggplot(hikes, aes(x = rating)) +\n  geom_bar(color = \"orange\", fill = \"blue\") +\n  labs(x = \"Rating\", y = \"Number of hikes\")\n\n\n\n\n\n\n\n\nCode# This added a third line of code, theme_minimal(), making the background white instead of grey\nggplot(hikes, aes(x = rating)) +\n  geom_bar(color = \"orange\", fill = \"blue\")  +\n  labs(x = \"Rating\", y = \"Number of hikes\") +\n  theme_minimal()\n\n\n\n\n\n\n\nExercise 5: Bar Chart Follow-up\nPart a\nReflect on the ggplot() code.\n\nWhat’s the purpose of the +? When do we use it?\nThe point of the + is to add on changes to the hike data within the ggplot\nWe added the bars using geom_bar()? Why “geom”?\ngeom_bar() is called geom because it is short for geometric element (a bar in this case)\nWhat does labs() stand for?\nlabs() is short for labels\nWhat’s the difference between color and fill?\nColor changes the color of the whole bar, whereas fill fill in the inner part of the bar\nPart b\nIn general, bar charts allow us to examine the following properties of a categorical variable:\n\n\nobserved categories: What categories did we observe?\nWe saw the categories of easy, moderate, and difficult rating of each observation\n\nvariability between categories: Are observations evenly spread out among the categories, or are some categories more common than others?\nObservations are not evenly spread out among difficulty ratings, with moderate being the most common, and difficult being the least common\n\nWe must then translate this information into the context of our analysis, here hikes in the Adirondacks. Summarize below what you learned from the bar chart, in context. - From the bar chart we learned that most people are more likely to rate their hikes on trails as moderate than difficult or easy. They are least likely to rate their hike as difficult, but only slightly less than they are to rate it as easy.\nPart c\nIs there anything you don’t like about this barplot? For example: check out the x-axis again. - This bar chart should graduate its classes of difficulty from easy to difficult, to make it intuitively easier to read, but it instead places the difficult bar furthest left and the moderate bar the furthest right\nExercise 6: Sad Bar Chart\nLet’s now consider some research questions related to the quantitative elevation variable:\n\nAmong the hikes, what’s the range of elevation and how are the hikes distributed within this range (e.g. evenly, in clumps, “normally”)?\n\nHikes are relatively evenly distributed, with few observations that have the same elevation. The range is from roughly 3,500 ft to 6,00 ft\n\n\nWhat’s a typical elevation?\n\nBecause elevation is roughly evenly spread, it is difficult to find an average or median to resemble the elevation of most of the observations effectively. A median or average might fall around 4,400 ft.\n\n\nAre there any outliers, i.e. hikes that have unusually high or low elevations?\n\n\ntwo observaitons, above 5,000 ft, and 4 observations below 4,000 ft stand out as outliers\n\nHere:\n\nConstruct a bar chart of the quantitative elevation variable.\nExplain why this might not be an effective visualization for this and other quantitative variables. (What questions does / doesn’t it help answer?)\nThis bar chart allows us to see the distribution of elevation, but it does not effectively reveal a median or average for the human eye because the results are seemingly quite evenly distributed but not (with a few breakaway chunks). The x-axis, the count of observations per an elevation, isn’t very useful because there are nearly no observations with the same elevation and it mostly just clutters the image, whose main value is showing the distribution of elevations.\n\n\nCodeggplot(hikes, aes(x = elevation)) + geom_bar(color = \"orange\") + theme_minimal()\n\n\n\n\n\n\n\nExercise 7: A Histogram of Elevation\nQuantitative variables require different viz than categorical variables. Especially when there are many possible outcomes of the quantitative variable. It’s typically insufficient to simply count up the number of times we’ve observed a particular outcome as the bar graph did above. It gives us a sense of ranges and typical outcomes, but not a good sense of how the observations are distributed across this range. We’ll explore two methods for graphing quantitative variables: histograms and density plots.\nHistograms are constructed by (1) dividing up the observed range of the variable into ‘bins’ of equal width; and (2) counting up the number of cases that fall into each bin. Check out the example below:\n\nPart a\nLet’s dig into some details.\n\nHow many hikes have an elevation between 4500 and 4700 feet?\n6\nHow many total hikes have an elevation of at least 5100 feet?\na little less than 4\nPart b\nNow the bigger picture. In general, histograms allow us to examine the following properties of a quantitative variable:\n\n\ntypical outcome: Where’s the center of the data points? What’s typical?\n\nvariability & range: How spread out are the outcomes? What are the max and min outcomes?\n\nshape: How are values distributed along the observed range? Is the distribution symmetric, right-skewed, left-skewed, bi-modal, or uniform (flat)?\n\noutliers: Are there any outliers, i.e. outcomes that are unusually large/small?\n\nWe must then translate this information into the context of our analysis, here hikes in the Adirondacks. Addressing each of the features in the above list, summarize below what you learned from the histogram, in context.\n\nTypical outcome: this historogram illustrated how hikes in the Adirondacks tend to be focused around 4000-5000 feet in elevation\nVariability and range: this historogram showed that the elevation of the hikes tend to concentrate towards the lower end of the range, but also illustrates that there are outliers on the edge -shape: this historogram shows that the shape is of the distribution is a hump that quickly rises on the edge of the range, and gradually drops off as it goes right\noutliers: this historogram shows that there were a few outliers at the lower elevation, and more at the higher elevations\nExercise 8: Building Histograms - Part 1\n2-MINUTE CHALLENGE: Thinking of the bar chart code, try to intuit what line you can tack on to the below frame of elevation to add a histogram layer. Don’t forget a +. If it doesn’t come to you within 2 minutes, no problem – all will be revealed in the next exercise.\n\nCodeggplot(hikes, aes(x = elevation, y = difficulty)) \n\n\n\n\n\n\nCode  #geom_histogram(breaks = c(1, 1000, 1001, 2000, 2001, 3000))\n\n\nExercise 9: Building Histograms - Part 2\nLet’s build some histograms. Try each chunk below, one by one. In each chunk, make a comment about how both the code and the corresponding plot both changed.\n\nCode# instead of using geom_bar, geom_historogram was used which automatically created bins\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nCode# ( color = \"white\") was added to geom_historogram which added a white outline to each bar in the historogram, separating the bars and making it easier to read\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\") \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nCode# fill = \"blue\" was added to geom_historogram(color = \"white\") which made the fill of the bars blue\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\", fill = \"blue\") \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nCode# labs() was added and a value was added to the x-axis and y-axis was added between the parentheses which changed their labels on the historogram\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\") +\n  labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nCode# The width of the bins was changed to be 1000, and since the range was 2000, two bins were created that are displayed as bars\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\", binwidth = 1000) +\n  labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n\n\n\n\n\n\n\n\nCode# The binwidth was changed to 5, and because the range was 2000, many bars could be created across such a large range with such small bins\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\", binwidth = 5) +\n  labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n\n\n\n\n\n\n\n\nCode# The binwidth was changed to 200, and across a range of roughly 2000 there were a few observations that fell into each bin making a relatively normal looking historogram\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\", binwidth = 200) +\n  labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n\n\n\n\n\n\n\nExercise 10: Histogram Follow-up\n\nWhat function added the histogram layer / geometry?\ngeom_historogram\nWhat’s the difference between color and fill?\ncolor makes the outline of the historogram bars the same as the input color, fill fills the whole bar excluding the outline\nWhy does adding color = \"white\" improve the visualization?\nit makes it easier to differentiate the bars visually, improving readability\nWhat did binwidth do?\nit set the range of the bins, which would then determine how many bins were in the historogram based on the range of the data/binwidth\nWhy does the histogram become ineffective if the binwidth is too big (e.g. 1000 feet)?\nit fits too many observations into the same bin, which may have drastically different values\nWhy does the histogram become ineffective if the binwidth is too small (e.g. 5 feet)?\nit does not fit enough results into each bin, making it harder to aggregate and therefore read\nExercise 11: Density Plots\nDensity plots are essentially smooth versions of the histogram. Instead of sorting observations into discrete bins, the “density” of observations is calculated across the entire range of outcomes. The greater the number of observations, the greater the density! The density is then scaled so that the area under the density curve always equals 1 and the area under any fraction of the curve represents the fraction of cases that lie in that range.\nCheck out a density plot of elevation. Notice that the y-axis (density) has no contextual interpretation – it’s a relative measure. The higher the density, the more common are elevations in that range.\n\nCodeggplot(hikes, aes(x = elevation)) +\n  geom_density()\n\n\n\n\n\n\n\nQuestions\n\n\nINTUITION CHECK: Before tweaking the code and thinking back to geom_bar() and geom_histogram(), how do you anticipate the following code will change the plot?\n\ngeom_density(color = \"blue\")\ngeom_density(fill = \"orange\")\n\n\nTRY IT! Test out those lines in the chunk below. Was your intuition correct?\n\n\nCodeggplot(hikes, aes(x = elevation)) + geom_density(color = \"blue\") + geom_density(fill = \"orange\")\n\n\n\n\n\n\n\n\nExamine the density plot. How does it compare to the histogram? What does it tell you about the typical elevation, variability / range in elevations, and shape of the distribution of elevations within this range?\nThe density plot tells you the range of the x-axis, but nothing about the range of the y-axis. It tells you the shape of the distribution of elevations effectively, giving it an organic and easy to read shape. Overall, from this density plot we can see that there are very few hikes at the lower end of the range, a high number at the low-to-mid level, and a decline in the number of hikes at the top of the range.\nExercise 12: Density Plots vs Histograms\nThe histogram and density plot both allow us to visualize the behavior of a quantitative variable: typical outcome, variability / range, shape, and outliers. What are the pros/cons of each? What do you like/not like about each?\n\nThe historogram provides more data about the range of the y-axis, but it does not have an organic shape that allows one to see the distribution of observations along the y-axis (unless it has tiny bins, which is a bad visualization) and it cant fit observations with wildly different values into the same bin. The density plot does not provide any information about the range of the y-axis. It makes up for this by providing information about the distribution of observations on the y-axis\nExercise 13: Code = communication\nWe obviously won’t be done until we talk about communication. All code above has a similar general structure (where the details can change):\n\nCodeggplot(___, aes(x = ___)) + \n  geom___(color = \"___\", fill = \"___\") + \n  labs(x = \"___\", y = \"___\")\n\n\n\nThough not necessary to the code working, it’s common, good practice to indent or tab the lines of code after the first line (counterexample below). Why?\n\n\nCode# YUCK\nggplot(hikes, aes(x = elevation)) +\ngeom_histogram(color = \"white\", binwidth = 200) +\nlabs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n\n\n\n\n\n\n\n\nThough not necessary to the code working, it’s common, good practice to put a line break after each + (counterexample below). Why?\n\n\nCode# YUCK \nggplot(hikes, aes(x = elevation)) + geom_histogram(color = \"white\", binwidth = 200) + labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n\n\n\n\n\n\n\nExercise 14: Practice\nPart a\nPractice your viz skills to learn about some of the variables in one of the following datasets from the previous class:\n\nCode# Data on students in this class\nsurvey &lt;- read.csv(\"https://hash-mac.github.io/stat112site-s25/data/survey.csv\")\n\n# World Cup data\nworld_cup &lt;- read.csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-29/worldcups.csv\")\n\n\nPart b\nCheck out the RStudio Data Visualization cheat sheet to learn more features of ggplot.\n\n\n\n\n\n\nCheck → Commit → Push\n\n\n\nWhen done, don’t forgot to click Render Book and check the resulting HTML files. If happy, jump to GitHub Desktop and commit the changes with the message Finish activity 3 and push to GitHub. Wait few seconds, then visit your portfolio website and make sure the changes are there.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-uni.html#solutions",
    "href": "ica/ica-uni.html#solutions",
    "title": "\n9  Univariate Viz\n",
    "section": "\n9.2 Solutions",
    "text": "9.2 Solutions\n\nClick for Solutions\nExercise 1: Research Questions\n\nFor example: how many hikes are there in each category? are any categories more common than others?\nFor example: What’s a typical elevation? What’s the range in elevations?\nExercise 3: Bar Chart of Ratings - Part 1\n\nCodeggplot(hikes, aes(x = rating))\n\n\n\n\n\n\n\n\njust a blank canvas\nname of the dataset\nindicate which variable to plot on x-axis\n\naesthetics\nExercise 4: Bar Chart of Ratings - Part 2\n\nCode# Add a bar plot LAYER\nggplot(hikes, aes(x = rating)) +\n  geom_bar()\n\n\n\n\n\n\nCode# Add meaningful axis labels\nggplot(hikes, aes(x = rating)) +\n  geom_bar() +\n  labs(x = \"Rating\", y = \"Number of hikes\")\n\n\n\n\n\n\nCode# FILL the bars with blue\nggplot(hikes, aes(x = rating)) +\n  geom_bar(fill = \"blue\") +\n  labs(x = \"Rating\", y = \"Number of hikes\")\n\n\n\n\n\n\nCode# COLOR the outline of the bars in orange\nggplot(hikes, aes(x = rating)) +\n  geom_bar(color = \"orange\", fill = \"blue\") +\n  labs(x = \"Rating\", y = \"Number of hikes\")\n\n\n\n\n\n\nCode# Change the theme to a white background\nggplot(hikes, aes(x = rating)) +\n  geom_bar(color = \"orange\", fill = \"blue\")  +\n  labs(x = \"Rating\", y = \"Number of hikes\") + \n  theme_minimal()\n\n\n\n\n\n\n\nExercise 5: Bar Chart Follow-up\nPart a\n\nTo indicate we’re still adding layers to / modifying our plot.\nBars are the geometric elements we’re adding in this layer.\nlabels\n\nfill fills in the bars. color outlines the bars.\nPart b\nMost hikes are moderate, the fewest number are difficult.\nPart c\nI don’t like that the categories are alphabetical, not in order of difficulty level.\nExercise 6: Sad Bar Chart\nThere are too many different outcomes of elevation.\n\nCodeggplot(hikes, aes(x = elevation)) + \n  geom_bar()\n\n\n\n\n\n\n\nExercise 7: A Histogram of Elevation\nPart a\n\n6\n1 + 1 = 2\nPart b\nElevations range from roughly 3700 to 5500 feet. Elevations vary from hike to hike relatively normally (with a bell shape) around a typical elevation of roughly 4500 feet.\nExercise 9: Building Histograms - Part 2\n\nCode# Add a histogram layer\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\nCode# Outline the bars in white\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\") \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\nCode# Fill the bars in blue\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\", fill = \"blue\") \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\nCode# Add axis labels\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\") +\n  labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\nCode# Change the width of the bins to 1000 feet\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\", binwidth = 1000) +\n  labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n\n\n\n\n\n\nCode# Change the width of the bins to 5 feet\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\", binwidth = 5) +\n  labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n\n\n\n\n\n\nCode# Change the width of the bins to 200 feet\nggplot(hikes, aes(x = elevation)) +\n  geom_histogram(color = \"white\", binwidth = 200) +\n  labs(x = \"Elevation (feet)\", y = \"Number of hikes\")\n\n\n\n\n\n\n\nExercise 10: Histogram Follow-up\n\ngeom_histogram()\n\ncolor outlined the bars and fill filled them\neasier to distinguish between the bars\nchanged the bin width\nwe lump too many hikes together and lose track of the nuances\nwe don’t lump enough hikes together and lose track of the bigger picture trends\nExercise 11: Density plots\n\nCodeggplot(hikes, aes(x = elevation)) +\n geom_density(color = \"blue\", fill = \"orange\")\n\n\n\n\n\n\n\nExercise 13: Code = Communication\n\nClarifies that the subsequent lines are a continuation of the first. That is, we’re not done with the plot yet. These lines are all part of the same idea.\nThis is like a run-on sentence. It’s tough to track the distinct steps that go into building the plot.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Univariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-bi.html",
    "href": "ica/ica-bi.html",
    "title": "\n10  Bivariate Viz\n",
    "section": "",
    "text": "10.1 Review\nLet’s review some univariate concepts and code using our class survey data. If the answers aren’t at the top of your mind, don’t fret! We’ve barely started speaking this new language, and learned a ton of vocab last week, so you naturally won’t remember it all.\nCode# Import data\nsurvey &lt;- read.csv(\"https://ajohns24.github.io/data/112/about_us_2024.csv\")\n\n# How many students have now filled out the survey?\n# - 28\n\n# What type of variables do we have?\n# - cafe_mac, minutes to campus, fave_temp, hangout",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-bi.html#review",
    "href": "ica/ica-bi.html#review",
    "title": "\n10  Bivariate Viz\n",
    "section": "",
    "text": "EXAMPLE 1: Hangout Preferences\nStudents were asked, in that moment, where they’d most like to spend time outside. How did they answer? Was there a lot of agreement or a lot of variability in answers? Build and interpret a plot that helps address these questions while reviewing:\n\n“code as communication”\nconnecting with the components of a plot:\n\nset up a frame\n\nadd a layer / geometric element\nchange the theme, e.g. axis labels, color, fill\n\n\n\n\nCode# Attach a package needed to use the ggplot function\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nCode# Make a ggplot\n\nggplot(survey, aes(x = hangout)) +\n  geom_bar(color = \"black\", fill = \"brown\") +\n  theme_minimal()\n\n\n\n\n\n\n\nEXAMPLE 2: Temperature Preferences\nStudents were asked about their ideal outdoor temperature, in degrees Celsius. How did they answer? What was the typical response? What was the range in responses? Were there any outliers? Build and interpret 2 plots that help address these questions.\n\nCodeggplot(survey, aes(x = fave_temp)) +\n  geom_histogram(binwidth = 5, color = \"white\", fill = \"brown\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nBar Charts vs. Histograms\n\n\n\nBar charts & histograms can appear pretty similar, but they do different things.\n\n\nBar charts count up the number of observations of each outcome of a variable. They’re good for categorical variables, or quantitative variables with only a handful of possible outcomes.\n\nHistograms count up the number of observations that fall into different numerical ranges of variable. They’re good for quantitative variables, especially those with many different observed outcomes.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-bi.html#new-stuff",
    "href": "ica/ica-bi.html#new-stuff",
    "title": "\n10  Bivariate Viz\n",
    "section": "\n10.2 New stuff",
    "text": "10.2 New stuff\nThus far, we’ve been studying one variable at a time, using univariate plots. But once we get a sense of how individual variables behave on their own, our questions often turn to relationships among variables. For example, in our hikes data:\n\nHow much time does it take to complete a hike? ——&gt; How is time related to a hike’s elevation? What about its length?\nHow does difficult rating vary from hike to hike? ——-&gt; How is difficulty rating related to a hike’s ascent?\n\n\n10.2.1 Exploring relationships\nExploring univariate patterns often sparks follow-up questions about relationships between 2+ variables. Often, but not always, variables take on specific roles:\n\n\nresponse variable: the variable whose variability we would like to explain (time to complete a hike)\n\npredictors: variables that might explain some of the variability in the response (a hike’s elevation or length)\n\nVisualizations can help explore:\n\nrelationship trends (direction and form)\nrelationship strength (degree of variability from the trend)\n\noutliers in the relationship\n\nEXAMPLE 3\nFor each pair of variables below, sketch on paper a visualization of their relationship. Focus on general viz process, don’t worry about the exact details. The data here are totally made up.\n\n3pm temperature (response) vs 9am temperature (predictor)\n\n\nCodedata.frame(temp_3pm = c(24, 26, 20, 15, 15, 15), temp_9am = c(14, 18, 15, 13, 11, 11))\n\n  temp_3pm temp_9am\n1       24       14\n2       26       18\n3       20       15\n4       15       13\n5       15       11\n6       15       11\n\n\n\n3pm temperature (response) vs location (predictor)\n\n\nCodeweather &lt;- data.frame(temp_3pm = c(24, 26, 20, 15, 15, 0, 40, 60, 57, 44, 51, 75),\n                      location = rep(c(\"A\", \"B\"), each = 6))\nweather\n\n   temp_3pm location\n1        24        A\n2        26        A\n3        20        A\n4        15        A\n5        15        A\n6         0        A\n7        40        B\n8        60        B\n9        57        B\n10       44        B\n11       51        B\n12       75        B\n\n\nThink: How might we modify the below density plot of temp_3pm to distinguish between locations?\n\nCodeggplot(weather, aes(x = temp_3pm)) +\n  geom_density() +\n  facet_wrap(~location)\n\n\n\n\n\n\n\n\n\nrain_today (the response) and location (the predictor)\n\n\nCodeweather &lt;- data.frame(rain_today = c(\"no\", \"no\", \"no\", \"no\", \"yes\", \"no\", \"yes\", \"no\", \"yes\", \"yes\", \"no\", \"yes\"),\n                        location = c(rep(\"A\", 7), rep(\"B\", 5)))\n    weather\n\n   rain_today location\n1          no        A\n2          no        A\n3          no        A\n4          no        A\n5         yes        A\n6          no        A\n7         yes        A\n8          no        B\n9         yes        B\n10        yes        B\n11         no        B\n12        yes        B\n\n\nThink: How might we modify the below bar plot of location to distinguish between days on which it did or didn’t rain?\n\nCodeggplot(weather, aes(x = location)) +\n      geom_bar()\n\n\n\n\n\n\n\n\n10.2.2 General guidance for building bivariate plots\nAs with univariate plots, an appropriate visualization for the relationship between 2 variables depends upon whether the variables are quantitative or categorical. In general:\n\nEach quantitative variable requires a new axis (or a quantitative scale if we run out of axes).\nEach categorical variable requires a new way to “group” the graphic (eg: using colors, shapes, separate facets, etc)\nFor visualizations in which overlap in glyphs or plots obscures the patterns, try faceting or transparency.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-bi.html#exercises-required",
    "href": "ica/ica-bi.html#exercises-required",
    "title": "\n10  Bivariate Viz\n",
    "section": "\n10.3 Exercises (required)",
    "text": "10.3 Exercises (required)\nGithub user Tony McGovern has compiled and made available 2020/2016/2012 presidential election results for most of 3000+ U.S. counties, except Alaska. (Image: Wikimedia Commons)\n\nA wrangled version of this data, is imported below, after being combined with:\n\n2013 county-level demographics from the df_county_demographics data set from the choroplethr R package\nhistorical voting trends in the state in which the county falls (from https://www.270towin.com/content/blue-and-red-states):\n\nred = consistently Republican\nblue = consistently Democratic\npurple = something in between\n\n\n\n\nCode# Load data\nelections &lt;- read.csv(\"https://mac-stat.github.io/data/election_2020_county.csv\")\n\n# Check it out\nhead(elections)\n\n  state_name state_abbr historical    county_name county_fips total_votes_20\n1    Alabama         AL        red Autauga County        1001          27770\n2    Alabama         AL        red Baldwin County        1003         109679\n3    Alabama         AL        red Barbour County        1005          10518\n4    Alabama         AL        red    Bibb County        1007           9595\n5    Alabama         AL        red  Blount County        1009          27588\n6    Alabama         AL        red Bullock County        1011           4613\n  repub_pct_20 dem_pct_20 winner_20 total_votes_16 repub_pct_16 dem_pct_16\n1        71.44      27.02     repub          24661        73.44      23.96\n2        76.17      22.41     repub          94090        77.35      19.57\n3        53.45      45.79     repub          10390        52.27      46.66\n4        78.43      20.70     repub           8748        76.97      21.42\n5        89.57       9.57     repub          25384        89.85       8.47\n6        24.84      74.70       dem           4701        24.23      75.09\n  winner_16 total_votes_12 repub_pct_12 dem_pct_12 winner_12 total_population\n1     repub          23909        72.63      26.58     repub            54907\n2     repub          84988        77.39      21.57     repub           187114\n3     repub          11459        48.34      51.25       dem            27321\n4     repub           8391        73.07      26.22     repub            22754\n5     repub          23980        86.49      12.35     repub            57623\n6       dem           5318        23.51      76.31       dem            10746\n  percent_white percent_black percent_asian percent_hispanic per_capita_income\n1            76            18             1                2             24571\n2            83             9             1                4             26766\n3            46            46             0                5             16829\n4            75            22             0                2             17427\n5            88             1             0                8             20730\n6            22            71             0                6             18628\n  median_rent median_age\n1         668       37.5\n2         693       41.5\n3         382       38.3\n4         351       39.4\n5         403       39.6\n6         276       39.6\n\n\nWe’ll use this data to explore voting outcomes within the U.S.’s 2-party system. Here’s a list of candidates by year:\n\n\nyear\nRepublican candidate\nDemocratic candidate\n\n\n\n2020\nDonald Trump\nJoe Biden\n\n\n2016\nDonald Trump\nHillary Clinton\n\n\n2012\nMitt Romney\nBarack Obama\n\n\n\nExercise 0: Review\nPart a\nHow many, or roughly what percent, of the 3000+ counties did the Republican candidate win in 2020?\n\nTake a guess.\nThen make a plot of the winner variable.\nThen discuss what follow-up questions you might have (and that our data might help us answer).\n\nhow did republicans lose in 2020 if they overwhelmingly won the majority of counties? Is it because many of these counties had small populations\n\n\n\n\nCodeggplot(elections, aes(x = winner_20)) +\n  geom_bar()\n\n\n\n\n\n\n\nPart b\nThe repub_pct_20 variable provides more detail about the Republican support in each county. Construct a plot of repub_pct_20.\nNotice that the distribution of Republican support from county to county is slightly left skewed or negatively skewed.\nWhat follow-up questions do you have? - Of the counties where Republicans had x&gt;50 percent of the vote, how big were their populations compared to the other counties\n\nCodeggplot(elections, aes(x = repub_pct_20)) +\n  geom_histogram(color = \"white\") +\n  theme_minimal()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nExercise 1: Quantitative vs Quantitative Intuition Check\n\n\n\n\n\n\nBe Quick\n\n\n\nDon’t spend more than 3 minutes on this!\n\n\nBelow is a scatterplot of the Republican support in 2020 vs 2016. Notice that:\n\nboth variables are quantitative, and get their own axes\nthe response variable is on the y-axis, demonstrating how repub_pct_20 might be predicted by repub_pct_16, not vice versa\n\nTry to replicate this using ggplot(). THINK:\n\nWhat info do you need to set up the canvas?\nWhat geometric layer (geom_???) might add these dots / points for each county? We haven’t learned this yet, just take some guesses.\n\n\n\nCodeggplot(elections, aes(x = repub_pct_16, y = repub_pct_20)) +\n  geom_point()\n\n\n\n\n\n\n\nExercise 2: 2 Quantitiative Variables\nRun each chunk below to build up a a scatterplot of repub_pct_20 vs repub_pct_16 with different glyphs representing each county. Address or think about any prompts in the comments (#).\n\nCode# Set up the plotting frame\n# This compares the repub_pct_20 and repub_pct_16 on the y-axis?\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16))\n\n\n\nCode# Add a layer of points for each county\n# The geom used here is points, to create a scatterplot\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point()\n\n\n\nCode# Change the shape of the points\n# You can change the shape of the geom-point to game it easier to read\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point(shape = 3)\n\n\n\nCode# YOU TRY: Modify the code to make the points \"orange\"\n# NOTE: If you use color, the color of the dots will be entirely that color and the fill color will have no effect. If you do not use color, but use fill, the dots will be the same color as the fill\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point(color = \"blue\", fill = \"white\")\n\n\n\n\n\n\n\n\nCode# Add a layer that represents each county by the state it's in\n# To add a label of which state every county is from, you need to add (aes(label = state_abbr)), within the geom_text()\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_text(aes(label = state_abbr))\n\n\nExercise 3: Reflect\nSummarize the relationship between the Republican support in 2020 and 2016. Be sure to comment on:\n\nthe strength of the relationship (weak/moderate/strong)\nOveral, There was a strong relationship between Republican support in a county in 2020 depending on its support in 2016\n\n\nthe direction of the relationship (positive/negative)\nThe direction of support was positive\n\n\noutliers (in what state do counties deviate from the national trend? Any ideas why this might be the case?)\n\nStates where Republicans have enjoyed significant support for decades saw a few outliers where Republican support significantly increased in 2020 compared to 2016. There were practically no outliers where there was a significant decrease in support. Perhaps this is because across the country there was an average decrease in the support for Trump, enough to make him lose. The reason a few counties saw a significant increase in support in Republican states is because 1) he has a very polarizing effect on his supporters, either making them hate him or love him even more and/or 2) he enjoys support in rural counties where a small increase in the absolute number of people accounts for a large increase in the percent of people who support him in the county.\n\n\nExercise 4: Visualizing trend\nThe trend of the relationship between repub_pct_20 and repub_pct_16 is clearly positive and (mostly) linear. We can highlight this trend by adding a model “smooth” to the plot:\n\nCodeggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point() +\n  geom_smooth()\n\n\nPart a\nConstruct a new plot that contains the model smooth but does not include the individual point glyphs.\n\nCodeggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_smooth()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\nPart b\nBy default, geom_smooth() adds a smooth, localized model line. To examine the “best” linear model, we can specify method = \"lm\". It’s pretty similar in this example!\n\nCodeggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n\nExercise 5: Your Turn\nTo examine how the 2020 results are related to some county demographics, construct scatterplots of repub_pct_20 vs median_rent, and repub_pct_20 vs median_age. Summarize the relationship between these two variables and comment on which is the better predictor of repub_pct_20, median_rent or median_age. - median rent is negatively correlated with support for republicans in 2020 and median age is positively correlated. Median rent is a better predictor, as the scatterplot formed creates a clearer line than the median age scatterplot\n\nCode# Scatterplot of repub_pct_20 vs median_rent\n\nggplot(elections, aes(y = repub_pct_20, x = median_rent)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nCode# Scatterplot of repub_pct_20 vs median_age\n\nggplot(elections, aes(y = repub_pct_20, x = median_age)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nExercise 6: A Sad Scatterplot\nNext, let’s explore the relationship between a county’s 2020 Republican support repub_pct_20 and the historical political trends in its state. In this case repub_pct_20 is quantitative, but historical is categorical. Explain why a scatterplot might not be an effective visualization for exploring this relationship. (What questions does / doesn’t it help answer?) - A scatterplot is ineffective because what is being mapped is qualitative, not quantitative, and the leanings of states would be better done with a bar chart which more effectively visualizes categories\n\nCodeggplot(elections, aes(y = repub_pct_20, x = historical)) +\n  geom_point()\n\n\n\n\n\n\n\nExercise 7: Quantitative vs Categorical – Violins & Boxes\nThough the above scatterplot did group the counties by historical category, it’s nearly impossible to pick out meaningful patterns in 2020 Republican support in each category. Let’s try adding 2 different geom layers to the frame:\n\nCode# Side-by-side violin plots\nggplot(elections, aes(y = repub_pct_20, x = historical)) +\n  geom_violin()\n\n\n\nCode# Side-by-side boxplots (defined below)\nggplot(elections, aes(y = repub_pct_20, x = historical)) +\n  geom_boxplot()\n\n\nBox plots are constructed from five numbers - the minimum, 25th percentile, median, 75th percentile, and maximum value of a quantitative variable:\n\nREFLECT:\nSummarize what you’ve learned about the 2020 Republican county-level support within and between red/purple/blue states.\n\nIn 2020, the median historically democratic county voted for a republican by about 55%. 25% of them voted for the republicans at between 55-65%, and 25% voted for a republican at 45-55%. The maximum was roughly 85% and the minimum was roughly 12.5%. In purple counties, the median county voted for a republican at 60%, the upper 25% at anywhere between 60-70%, and the lower 25% at anywhere between 55-60%. The maximum was roughly 90% and the minimum was roughly 25%. In historically Republican counties, the median county voted for republicans at 75%, the upper 25% voted for republicans at 75-80%, and the lower 25% at 60-75%. The maximum was roughly 95% and the minimum was roughly 40%.\nExercise 8: Quantitative vs Categorical – Intuition Check\n\n\n\n\n\n\nBe Quick\n\n\n\nDon’t spend more than 3 minutes on this!\n\n\nWe can also visualize the relationship between repub_pct_20 and historical using our familiar density plots. In the plot below, notice that we simply created a separate density plot for each historical category. (The plot itself is “bad” but we’ll fix it below.) Try to adjust the code chunk below, which starts with a density plot of repub_pct_20 alone, to re-create this image.\n\n\nCodeggplot(elections, aes(x = repub_pct_20)) +\n  geom_density()\n\n\n\n\n\n\n\nExercise 9: Quantitative vs Categorical – Density Plots\nWork through the chunks below and address the comments therein.\n\nCode# This plot does not fully show the variability of each category, and it does not effectively use color to match the theme (such as making the colors match by historical party)\nggplot(elections, aes(x = repub_pct_20, fill = historical)) +\n  geom_density()\n\n\n\nCode# scale_fill() allows the categories displayed in the plot to be customized, including in their fill\nggplot(elections, aes(x = repub_pct_20, fill = historical)) +\n  geom_density() +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\"))\n\n\n\nCode# alpha = 0.5 sets the opacity of the fill\nggplot(elections, aes(x = repub_pct_20, fill = historical)) +\n  geom_density(alpha = 0.45) +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\"))\n\n\n\nCode# Facet wrap separates the categories so that they each have their own x-axis, not intruding on each other, while also retaining the same shape from the original plot density plot\nggplot(elections, aes(x = repub_pct_20, fill = historical)) +\n  geom_density() +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\")) +\n  facet_wrap(~ historical)\n\n\n\nCode# Let's try a similar grouping strategy with a histogram instead of density plot.\n# This ineffectively separates the categories, placing them on top of each other and making the viz worse\nggplot(elections, aes(x = repub_pct_20, fill = historical)) +\n  geom_histogram(color = \"white\") +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\"))\n\n\nExercise 10\nWe’ve now learned 3 (of many) ways to visualize the relationship between a quantitative and categorical variable: side-by-side violins, boxplots, and density plots.\n\nWhich do you like best?\n\nboxplots provide the most immediate information about medians, the lower and upper range (excluding outliers), and the upper 75th and lower 25th percentile’s range. They, however, do not display all of the data but rather summarize.\n\n\nWhat is one pro of density plots relative to boxplots?\n\ndensity plots allow one to see which categories and how the range of the predictor variable is affecting the response variable, with more information shown in the organic shape whereas boxplots remove all the points (except outliers) to show the upper 75th and lower 25th percentile along with the median and the maximum and minimums\n\n\nWhat is one con of density plots relative to boxplots?\n\nDensity plots do not provide information about the range of the response variable, only the distribution of the response variable to the predictor variable\n\n\nExercise 11: Categorical vs Categorical – Intuition Check\nFinally, let’s simply explore who won each county in 2020 (winner_20) and how this breaks down by historical voting trends in the state. That is, let’s explore the relationship between 2 categorical variables! Following the same themes as above, we can utilize grouping features such as fill/color or facets to distinguish between different categories of winner_20 and historical.\n\n\n\n\n\n\nBe Quick\n\n\n\nSpend at most 5 minutes on the following intuition check. Adjust the code below to recreate the following two plots.\n\n\n\n\nCode# Plot 1: adjust this to recreate the top plot\nggplot(elections, aes(x = winner_20)) +\n  geom_bar() +\n  facet_wrap(~historical) +\n  scale_fill_manual(values = c(\"orange\", \"blue\"))\n\n\n\n\n\n\nCodeggplot(elections, aes(x = historical, fill = winner_20)) +\n  geom_bar() +\n  scale_fill_manual(values = c(\"orange\", \"blue\"))\n\n\n\n\n\n\n\n\nCode# Plot 2: adjust this to recreate the bottom plot\nggplot(elections, aes(x = winner_20)) +\n  geom_bar() +\n  facet_wrap(~historical)\n\n\n\n\n\n\n\nExercise 12: Categorical vs Categorical\nConstruct the following 4 bar plot visualizations.\n\nCode# A stacked bar plot\n# historical is assigned to the x-axis for categories, while winner 20 is applied as a fill within the bars that show the number of counties within it\nggplot(elections, aes(x = historical, fill = winner_20)) +\n  geom_bar()\n\n\n\nCode# this divides the plot the that each variable has an x-axis\nggplot(elections, aes(x = winner_20)) +\n  geom_bar() +\n  facet_wrap(~ historical)\n\n\n\nCode# A side-by-side bar plot\n# The dodge function makes it so that instead of filling the bar with the dem and repub category, they are instead just seperated into two bars next to each other\nggplot(elections, aes(x = historical, fill = winner_20)) +\n  geom_bar(position = \"dodge\")\n\n\n\nCode# A proportional bar plot\n# the position = \"fill\" function makes it so that all of the bars are equally tall and instead of displaying the number of counties that voted republican or democrat, the chart displays the proportion of counties in the historical categories who voted for trump or biden\nggplot(elections, aes(x = historical, fill = winner_20)) +\n  geom_bar(position = \"fill\")\n\n\nPart a\nName one pro and one con of using the “proportional bar plot” instead of one of the other three options. - The proportional bar plot shows the proportion within each category oh how the other category relates, but it fails to show the number of observations like the other three options do\nPart b\nWhat’s your favorite bar plot from part and why? - my favorite bar plot is the side-by-side bar plot because it not only makes it easier to see the comparison between the two categories in each pair of bars, but also to compare the number of each categories from the other side by side bars\nExercise 13: Practice (now or later)\n\n\n\n\n\n\nDecide\n\n\n\nDecide what’s best for you:\n\nTry this extra practice now.\nReflect on the above exercises and come back to this extra practice later (but before the next class).\n\n\n\nImport some daily weather data from a few locations in Australia:\n\nCodeweather &lt;- read.csv(\"https://mac-stat.github.io/data/weather_3_locations.csv\")\n\n\nConstruct plots that address the research questions in each chunk. You might make multiple plots–there are many ways to do things!. However, don’t just throw spaghetti at the wall.\nReflect before doing anything. What types of variables are these? How might you plot just 1 of the variables, and then tweak the plot to incorporate the other?\n\nCode# How do 3pm temperatures (temp3pm) differ by location?\n\nggplot(weather, aes(x = temp3pm)) +\n  geom_histogram(color = \"white\") +\n  facet_wrap(~location)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 19 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n\nCode# How might we predict the 3pm temperature (temp3pm) by the 9am temperature (temp9am)?\n\nggplot(weather, aes(x = temp9am, y = temp3pm)) +\n  geom_point(size = 0.5) +\n  geom_smooth()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\nWarning: Removed 27 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 27 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nCode# How do the number of rainy days (raintoday) differ by location?\n\nggplot(weather, aes(x = raintoday)) +\n  geom_bar() +\n  facet_wrap(~location)",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-bi.html#exercises-optional",
    "href": "ica/ica-bi.html#exercises-optional",
    "title": "\n10  Bivariate Viz\n",
    "section": "\n10.4 Exercises (optional)",
    "text": "10.4 Exercises (optional)\nThe above visualizations are foundational and important. But they’re not the only way to visualize the variables in our dataset.\nOptional Exercise 1: Many Categories\nSuppose we wanted to better understand how the 2020 Republican support varied from county to county within each state. Since repub_pct_20 is quantitative and state_abbr is categorical, we could make a density plot of repub_pct_20 for each state. Reflect on why this is bad.\n\nCodeggplot(elections, aes(x = repub_pct_20, fill = state_abbr)) + \n  geom_density(alpha = 0.5)\n\nWarning: Groups with fewer than two data points have been dropped.\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nA facet wrap would also be bad!\n\nCodeggplot(elections, aes(x = repub_pct_20)) + \n  geom_density(alpha = 0.5) + \n  facet_wrap(~ state_abbr)\n\nWarning: Groups with fewer than two data points have been dropped.\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nWhen we want to compare the distribution of some quantitative outcome among many groups / categories, a ridgeline plot can be a good option. These are also called joy plots, named after the album cover for “Unknown Pleasures” by Joy Division. (Look it up!) To make a ridgeline plot, we can use the geom_density_ridges() function from the ggridges package.\n\nCode# Install ggridges package\nlibrary(ggridges)\n\n# Make our first joy plot\n# THINK: What DON'T you like about this?\nggplot(elections, aes(x = repub_pct_20, y = state_abbr)) + \n  geom_density_ridges()\n\n\n\nCode# Let's put the states in order by Republican support, not alphabet\n# How do you think fct_reorder works? We'll learn about this later in the semester.\nggplot(elections, aes(x = repub_pct_20, y = fct_reorder(state_abbr, repub_pct_20))) + \n  geom_density_ridges(alpha = 0.5)\n\n\n\nCode# YOUR TURN: color/fill the ridges according to a state's historical voting patterns \n# and add meaningful axis labels\n\n\nFollow-up questions\n\nWhich states tend to have the most variability in outcomes from county to county? The least?\nWhat other interesting patterns do you notice?\nDoes this plot prompt any other questions?\nOptional Exercise 2: Total Outcomes by State\nLet’s import some new data and counts up the total votes (Republican and Democratic) by state, not county. This was wrangled from the elections data!\n\nCodeelections_by_state &lt;- read.csv(\"https://mac-stat.github.io/data/election_2020_by_state.csv\")\n\n\nFor example, we might make a scatterplot of the 2020 vs 2016 outcomes:\n\nCodeggplot(elections_by_state, aes(y = repub_pct_20, x = repub_pct_16)) + \n  geom_point()\n\n\n\n\n\n\n\nBUT this isn’t the easiest way to communicate or identify the changes from 1 year to the next.\n\nCode# YOU TRY\n# Start by creating a \"scatterplot\" of state_abbr (y-axis) by 2020 Republican support on the x-axis\n# Color the points red\n# Scroll to solutions below when you're ready\n\n\n\nCode# Check it out\nggplot(elections_by_state, aes(x = repub_pct_20, y = state_abbr)) + \n  geom_point(color = \"red\")\n\n\n\n\n\n\n\n\nCode# YOU TRY\n# Reorder the states in terms of their 2020 Republican support (not alphabet)\n# Scroll to solutions below when you're ready\n\n\n\nCode# Check it out\nggplot(elections_by_state, aes(x = repub_pct_20, y = fct_reorder(state_abbr, repub_pct_20))) + \n  geom_point(color = \"red\")\n\n\n\n\n\n\n\n\nCode# Finally, add ANOTHER layer of points for the 2016 outcomes\n# What info does this new geom_point() layer need to run?\nggplot(elections_by_state, aes(x = repub_pct_20, y = fct_reorder(state_abbr, repub_pct_20))) + \n  geom_point(color = \"red\") + \n  geom_point(aes(x = repub_pct_16, y = state_abbr))\n\n\n\n\n\n\n\nReflect on the following\n\nWhat do you think this plot needs? Try it! You might need to do some digging online.\nSummarize the main takeaways from the plots. Which states changed the most from 2016 to 2020? The least? Where did the Republican support increase? Where did it decrease?\nWhat other questions are you left with?",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-bi.html#solutions",
    "href": "ica/ica-bi.html#solutions",
    "title": "\n10  Bivariate Viz\n",
    "section": "\n10.5 Solutions",
    "text": "10.5 Solutions\n\nClick for Solutions\n\nCode# Import data\nsurvey &lt;- read.csv(\"https://ajohns24.github.io/data/112/about_us_2024.csv\")\n\n# How many students have now filled out the survey?\nnrow(survey)\n\n[1] 28\n\nCode# What type of variables do we have?\nstr(survey)\n\n'data.frame':   28 obs. of  4 variables:\n $ cafe_mac         : chr  \"Cheesecake\" \"Cheese pizza\" \"udon noodles\" \"egg rolls\" ...\n $ minutes_to_campus: int  15 10 4 7 5 35 5 15 7 20 ...\n $ fave_temp        : num  18 24 18 10 18 7 75 24 13 16 ...\n $ hangout          : chr  \"the mountains\" \"a beach\" \"the mountains\" \"a beach\" ...\n\n\nEXAMPLE 1: Hangout preferences\n\nCode# Attach a package needed to use the ggplot function\nlibrary(tidyverse)\n\n# Make a ggplot\nggplot(survey, aes(x = hangout)) + \n  geom_bar()\n\n\n\n\n\n\n\nEXAMPLE 2: Temperature preferences\n\nCodeggplot(survey, aes(x = fave_temp)) + \n  geom_histogram(color = \"white\", binwidth = 5)\n\n\n\n\n\n\nCodeggplot(survey, aes(x = fave_temp)) + \n  geom_density()\n\n\n\n\n\n\n\n\n10.5.1 Exercise 0:\n\nCodeggplot(elections, aes(x = winner_20)) + \n  geom_bar()\n\n\n\n\n\n\nCodeggplot(elections, aes(x = repub_pct_20)) + \n  geom_histogram(color = \"white\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\nCodeggplot(elections, aes(x = repub_pct_20)) + \n  geom_density()\n\n\n\n\n\n\n\nExercise 1: quantitative vs quantitative intuition check\nSee next exercise.\nExercise 2: 2 quantitiative variables\n\nCode# Set up the plotting frame\n# How does this differ than the frame for our histogram of repub_pct_20 alone?\n# ANSWER: we added a y-axis variable\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16))\n\n\n\n\n\n\nCode# Add a layer of points for each county\n# Take note of the geom: geom_point\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point()\n\n\n\n\n\n\nCode# Change the shape of the points\n# What happens if you change the shape to another number?\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point(shape = 3)\n\n\n\n\n\n\nCode# YOU TRY: Modify the code to make the points \"orange\"\n# NOTE: Try to anticipate if \"color\" or \"fill\" will be useful here. Then try both.\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point(color = \"orange\")\n\n\n\n\n\n\nCode# Add a layer that represents each county by the state it's in\n# Take note of the geom and the info it needs to run!\nggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_text(aes(label = state_abbr))\n\n\n\n\n\n\n\nExercise 3: Reflect\nThere’s a strong, positive association – the higher the Republican support in 2016, the higher it was in 2020. There are some counties in Texas and Utah where the R support in 2020 was disproportionately higher than in 2016.\nExercise 4: Visualizing trend\n\nCodeggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point() +\n  geom_smooth()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\nPart a\n\nCodeggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_smooth()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\n\n\n\nPart b\n\nCodeggplot(elections, aes(y = repub_pct_20, x = repub_pct_16)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nExercise 5: Your turn\nThere’s a moderate, positive association between R support and median age – the older the average age in a county, the higher the R support tends to be. However, there’s a stronger, negative association between R support and median rent – the higher the rent (a proxy for cost of living), the lower the R support tends to be.\n\nCode# Scatterplot of repub_pct_20 vs median_rent\nggplot(elections, aes(y = repub_pct_20, x = median_rent)) +\n  geom_point() \n\n\n\n\n\n\nCode# Scatterplot of repub_pct_20 vs median_age\nggplot(elections, aes(y = repub_pct_20, x = median_age)) +\n  geom_point() \n\n\n\n\n\n\n\nExercise 6: A sad scatterplot\nSee next exercise.\nExercise 7: quantitative vs categorical – violins & boxes\n\nCode# Side-by-side violin plots\nggplot(elections, aes(y = repub_pct_20, x = historical)) +\n  geom_violin()\n\n\n\n\n\n\nCode# Side-by-side boxplots (defined below)\nggplot(elections, aes(y = repub_pct_20, x = historical)) +\n  geom_boxplot()\n\n\n\n\n\n\n\nREFLECT:\nThere’s quite a bit of range in county-level R support within blue, purple, and red states. However, R support tends to be higher in red states and lower in blue states.\nExercise 8: quantitative vs categorical – intuition check\nSee next exercise.\nExercise 9: quantitative vs categorical – density plots\n\nCode# The colors used don't match up with the blue, purple, red labels\n# The density plots are on top of each other\nggplot(elections, aes(x = repub_pct_20, fill = historical)) +\n  geom_density()\n\n\n\n\n\n\nCode# scale_fill_manual \"hard codes\" or defines what colors to use for the fill categories\nggplot(elections, aes(x = repub_pct_20, fill = historical)) +\n  geom_density() +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\"))\n\n\n\n\n\n\nCode# alpha = 0.5 adds transparency\n# the closer alpha is to 0, the more transparent.\n# the closer alpha is to 1, the more opaque.\nggplot(elections, aes(x = repub_pct_20, fill = historical)) +\n  geom_density(alpha = 0.5) +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\"))\n\n\n\n\n\n\nCode# facet_wrap separates the density plots into \"facets\" for each historical group\nggplot(elections, aes(x = repub_pct_20, fill = historical)) +\n  geom_density() +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\")) +\n  facet_wrap(~ historical)\n\n\n\n\n\n\nCode# Let's try a similar grouping strategy with a histogram instead of density plot.\n# Why is this terrible?\nggplot(elections, aes(x = repub_pct_20, fill = historical)) +\n  geom_histogram(color = \"white\") +\n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\"))\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nExercise 10\n\nOne pro of density plots relative to boxplots: doesn’t oversimplify the data / boil the data down to just 5 numbers.\nName one con of density plots relative to boxplots: boxplots can be easier to interpret\nExercise 11: categorical vs categorical intuition check\nsee exercise below\nExercise 12: categorical vs categorical\n\nCode# A stacked bar plot\n# historical = x axis / bar categories\n# winner_20 = fills the bars\nggplot(elections, aes(x = historical, fill = winner_20)) +\n  geom_bar()\n\n\n\n\n\n\nCode# A faceted bar plot\nggplot(elections, aes(x = winner_20)) +\n  geom_bar() +\n  facet_wrap(~ historical)\n\n\n\n\n\n\nCode# A side-by-side bar plot\n# Note the new argument to geom_bar\nggplot(elections, aes(x = historical, fill = winner_20)) +\n  geom_bar(position = \"dodge\")\n\n\n\n\n\n\nCode# A proportional bar plot\n# Note the new argument to geom_bar\nggplot(elections, aes(x = historical, fill = winner_20)) +\n  geom_bar(position = \"fill\")\n\n\n\n\n\n\n\nPart a\npro = easier to compare the relative outcomes in blue vs purple vs red states con = lose track of how many counties fall into blue vs purple vs red states\nExercise 13: Practice (now or later)\n\nCodeweather &lt;- read.csv(\"https://mac-stat.github.io/data/weather_3_locations.csv\")\n\n# How do 3pm temperatures (temp3pm) differ by location?\nggplot(weather, aes(x = temp3pm, fill = location)) + \n  geom_density(alpha = 0.5)\n\nWarning: Removed 19 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\nCodeggplot(weather, aes(y = temp3pm, x = location)) + \n  geom_boxplot()\n\nWarning: Removed 19 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\nCode# How might we predict the 3pm temperature (temp3pm) by the 9am temperature (temp9am)?\nggplot(weather, aes(y = temp3pm, x = temp9am)) + \n  geom_point()\n\nWarning: Removed 27 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\nCode# How do the number of rainy days (raintoday) differ by location?\nggplot(weather, aes(x = location, fill = raintoday)) + \n  geom_bar()\n\n\n\n\n\n\n\nOptional exercise 1: Dealing with lots of categories\n\nCode# Install ggridges package\nlibrary(ggridges)\n\n# Make our first joy plot\n# THINK: What DON'T you like about this?\nggplot(elections, aes(x = repub_pct_20, y = state_abbr)) + \n  geom_density_ridges()\n\nPicking joint bandwidth of 4.43\n\n\n\n\n\n\n\nCode# Let's put the states in order by Republican support, not alphabet\n# How do you think fct_reorder works? We'll learn about this later in the semester.\nggplot(elections, aes(x = repub_pct_20, y = fct_reorder(state_abbr, repub_pct_20))) + \n  geom_density_ridges(alpha = 0.5)\n\nPicking joint bandwidth of 4.43\n\n\n\n\n\n\n\nCode# YOUR TURN: color/fill the ridges according to a state's historical voting patterns \n# and add meaningful axis labels\nggplot(elections, aes(x = repub_pct_20, y = fct_reorder(state_abbr, repub_pct_20), fill = historical)) + \n  geom_density_ridges(alpha = 0.5) + \n  labs(y = \"state\", x = \"2020 Republican support (%)\") + \n  scale_fill_manual(values = c(\"blue\", \"purple\", \"red\"))\n\nPicking joint bandwidth of 4.43\n\n\n\n\n\n\n\n\nOptional exercise 2: total outcomes by state\n\nCodeelections_by_state &lt;- read.csv(\"https://mac-stat.github.io/data/election_2020_by_state.csv\")\n\nggplot(elections_by_state, aes(y = repub_pct_20, x = repub_pct_16)) + \n  geom_point()\n\n\n\n\n\n\nCode# YOU TRY\n# Start by creating a \"scatterplot\" of state_abbr (y-axis) by 2020 Republican support on the x-axis\n# Color the points red\nggplot(elections_by_state, aes(x = repub_pct_20, y = state_abbr)) + \n  geom_point(color = \"red\")\n\n\n\n\n\n\nCode# YOU TRY\n# Reorder the states in terms of their 2020 Republican support (not alphabet)\nggplot(elections_by_state, aes(x = repub_pct_20, y = fct_reorder(state_abbr, repub_pct_20))) + \n  geom_point(color = \"red\")\n\n\n\n\n\n\nCode# Finally, add ANOTHER layer of points for the 2016 outcomes\n# What info does this new geom_point() layer need to run?\nggplot(elections_by_state, aes(x = repub_pct_20, y = fct_reorder(state_abbr, repub_pct_20))) + \n  geom_point(color = \"red\") + \n  geom_point(aes(x = repub_pct_16, y = state_abbr))",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Bivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-multi.html",
    "href": "ica/ica-multi.html",
    "title": "\n11  Mulivariate Viz\n",
    "section": "",
    "text": "Example 1\nConstruct a plot that allows us to examine how temp3pm varies.\nCodeggplot(weather, aes(x = temp3pm)) +\n  geom_density(color = \"blue\", fill = \"yellow\")\n\nWarning: Removed 19 rows containing non-finite outside the scale range\n(`stat_density()`).",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Mulivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-multi.html#new-stuff",
    "href": "ica/ica-multi.html#new-stuff",
    "title": "\n11  Mulivariate Viz\n",
    "section": "\n11.1 New Stuff",
    "text": "11.1 New Stuff\nNext, let’s consider the entire weather data for all 3 locations. The addition of location adds a 3rd variable into our research questions:\n\nHow does the relationship between raintoday and raintomorrow vary by location?\nHow does the behavior of temp3pm over date vary by location?\nAnd so on.\n\nThus far, we’ve focused on the following components of a plot:\n\nsetting up a frame\n\nadding layers / geometric elements\nsplitting the plot into facets for different groups / categories\nchange the theme, e.g. axis labels, color, fill\n\nWe’ll have to think about all of this, along with scales. Scales change the color, fill, size, shape, or other properties according to the levels of a new variable. This is different than just assigning scale by, for example, color = \"blue\".\nWork on the examples below in your groups. Check in with your intuition! We’ll then discuss as a group as relevant.\nExample 5\n\nCode# Plot temp3pm vs temp9am\n# Change the code in order to indicate the location to which each data point corresponds\nggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) + \n  geom_point() \n\nWarning: Removed 27 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nCode# Change the code in order to indicate the location to which each data point corresponds\n# AND identify the days on which it rained / didn't raintoday\nggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) + \n  geom_point(size = 0.5) +\n  facet_wrap(~raintoday)\n\nWarning: Removed 27 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nCode# How many ways can you think to make that plot of temp3pm vs temp9am with info about location and rain?\n# Play around!\nggplot(weather, aes(x = temp3pm, y = temp9am, color = raintoday)) +\n  geom_point() +\n  facet_wrap(~location)\n\nWarning: Removed 27 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\nCodeggplot(weather, aes(x = temp3pm, y = temp9am, color = raintoday)) +\n  geom_point() +\n  facet_wrap(~location) +\n  geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 27 rows containing non-finite outside the scale range\n(`stat_smooth()`).\nRemoved 27 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\nCodeggplot(weather, aes(x = temp3pm, y = temp9am, color = raintoday)) +\n  geom_point() +\n  facet_wrap(~location) +\n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning: Removed 27 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: span too small.  fewer data values than degrees of freedom.\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: pseudoinverse used at 12.045\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: neighborhood radius 6.555\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: reciprocal condition number 0\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: There are other near singularities as well. 20.748\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: Chernobyl! trL&gt;n 5\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: Chernobyl! trL&gt;n 5\n\n\nWarning in sqrt(sum.squares/one.delta): NaNs produced\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : span too small.  fewer\ndata values than degrees of freedom.\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : pseudoinverse used at\n12.045\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : neighborhood radius\n6.555\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : reciprocal condition\nnumber 0\n\n\nWarning in predLoess(object$y, object$x, newx = if (is.null(newdata)) object$x\nelse if (is.data.frame(newdata))\nas.matrix(model.frame(delete.response(terms(object)), : There are other near\nsingularities as well. 20.748\n\n\nWarning in stats::qt(level/2 + 0.5, pred$df): NaNs produced\n\n\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: Chernobyl! trL&gt;n 6\nWarning in simpleLoess(y, x, w, span, degree = degree, parametric = parametric,\n: Chernobyl! trL&gt;n 6\n\n\nWarning in sqrt(sum.squares/one.delta): NaNs produced\n\n\nWarning in stats::qt(level/2 + 0.5, pred$df): NaNs produced\n\n\nWarning: Removed 27 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nExample 6\n\nCode# Change the code in order to construct a line plot of temp3pm vs date for each separate location (no points!)\nggplot(weather, aes(y = temp3pm, x = date)) + \n  geom_line() +\n  geom_smooth()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\nWarning: Removed 19 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\n\n\n\n\n\nCode  facet_wrap(~location)\n\n&lt;ggproto object: Class FacetWrap, Facet, gg&gt;\n    compute_layout: function\n    draw_back: function\n    draw_front: function\n    draw_labels: function\n    draw_panels: function\n    finish_data: function\n    init_scales: function\n    map_data: function\n    params: list\n    setup_data: function\n    setup_params: function\n    shrink: TRUE\n    train_scales: function\n    vars: function\n    super:  &lt;ggproto object: Class FacetWrap, Facet, gg&gt;\n\n\nExample 7\n\nCode# Plot the relationship of raintomorrow & raintoday\n# Change the code in order to indicate this relationship by location\nggplot(weather, aes(x = raintoday, fill = raintomorrow)) + \n  geom_bar() +\n  facet_wrap(~location)\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to Not Get Overwhelmed?\n\n\n\nThere’s no end to the number and type of visualizations you could make. And it’s important to not just throw spaghetti at the wall until something sticks. FlowingData shows that one dataset can be visualized many ways, and makes good recommendations for data viz workflow, which we modify and build upon here:\n\nIdentify simple research questions.\nWhat do you want to understand about the variables or the relationships among them?\n\nStart with the basics and work incrementally.\n\nIdentify what variables you want to include in your plot and what structure these have (eg: categorical, quantitative, dates)\nStart simply. Build a plot of just 1 of these variables, or the relationship between 2 of these variables.\nSet up a plotting frame and add just one geometric layer at a time.\nStart tweaking: add whatever new variables you want to examine,\n\n\n\nAsk your plot questions.\n\nWhat questions does your plot answer? What questions are left unanswered by your plot?\nWhat new questions does your plot spark / inspire?\nDo you have the viz tools to answer these questions, or might you learn more?\n\n\nFocus.\nReporting a large number of visualizations can overwhelm the audience and obscure your conclusions. Instead, pick out a focused yet comprehensive set of visualizations.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Mulivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-multi.html#exercises-required",
    "href": "ica/ica-multi.html#exercises-required",
    "title": "\n11  Mulivariate Viz\n",
    "section": "\n11.2 Exercises (required)",
    "text": "11.2 Exercises (required)\nThe story\nThough far from a perfect assessment of academic preparedness, SAT scores have historically been used as one measurement of a state’s education system. The education dataset contains various education variables for each state:\n\nCode# Import and check out data\neducation &lt;- read.csv(\"https://mac-stat.github.io/data/sat.csv\")\nhead(education)\n\n       State expend ratio salary frac verbal math  sat  fracCat\n1    Alabama  4.405  17.2 31.144    8    491  538 1029   (0,15]\n2     Alaska  8.963  17.6 47.951   47    445  489  934 (45,100]\n3    Arizona  4.778  19.3 32.175   27    448  496  944  (15,45]\n4   Arkansas  4.459  17.1 28.934    6    482  523 1005   (0,15]\n5 California  4.992  24.0 41.078   45    417  485  902  (15,45]\n6   Colorado  5.443  18.4 34.571   29    462  518  980  (15,45]\n\n\nA codebook is provided by Danny Kaplan who also made these data accessible:\n\nExercise 1: SAT scores\nPart a\nConstruct a plot of how the average sat scores vary from state to state. (Just use 1 variable – sat not State!)\n\nCodeggplot(education, aes(x = sat, y = State)) +\n  geom_point() +\n  theme_minimal()\n\n\n\n\n\n\n\nPart b\nSummarize your observations from the plot. Comment on the basics: range, typical outcomes, shape. (Any theories about what might explain this non-normal shape?)\n\nThe range of sat scores between the bottom 25th percentile and upper 75th percentile within state is very small, with most students receiving similar scores from the median. But, the maximum and minimum range of all students in every state goes from 0-1600, because in every state there are enough students for a significant number to score 1600 or 0. there is a large disparity in median between different state, which could be due to a number of factors like wealth, quality of the education system, or whether each state has a culture that prioritizes education more or less than others.\nExercise 2: SAT Scores vs Per Pupil Spending & SAT Scores vs Salaries\nThe first question we’d like to answer is: Can the variability in sat scores from state to state be partially explained by how much a state spends on education, specifically its per pupil spending (expend) and typical teacher salary?\nPart a\n\nCode# Construct a plot of sat vs expend\n# Include a \"best fit linear regression model\" (HINT: method = \"lm\")\n\nggplot(education, aes(x = expend, y = sat)) +\n  geom_point(size = 0.5) +\n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nCode# Construct a plot of sat vs salary\n# Include a \"best fit linear regression model\" (HINT: method = \"lm\")\n\nggplot(education, aes(x = salary, y = sat)) +\n  geom_point(size = 0.5) +\n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\nPart b\nWhat are the relationship trends between SAT scores and spending? Is there anything that surprises you? - The relationship between SAT scores and spending seems to be very weak, having relatively little to no correlation on a scatterplot. Surprisingly, it is initially negative, before becoming positive and then having a negative plateua. What also makes sense is the similarity between the salary and SAT distribution and the spending and SAT distribution, since spending influences salaries\nExercise 3: SAT Scores vs Per Pupil Spending and Teacher Salaries\nConstruct one visualization of the relationship of sat with salary and expend. HINT: Start with just 2 variables and tweak that code to add the third variable. Try out a few things!\n\nCodeggplot(education, aes(x = salary, y = sat, color = expend)) +\n  geom_point(size = 8)\n\n\n\n\n\n\n\nExercise 4: Another way to Incorporate Scale\nIt can be tough to distinguish color scales and size scales for quantitative variables. Another option is to discretize a quantitative variable, or basically cut it up into categories.\nConstruct the plot below. Check out the code and think about what’s happening here. What happens if you change “2” to “3”?\n\nCodeggplot(education, aes(y = sat, x = salary, color = cut(expend, 3))) + \n  geom_point() + \n  geom_smooth(se = FALSE, method = \"lm\")\n\n\nDescribe the trivariate relationship between sat, salary, and expend. - As salary increases, SAT scores go down, unless salary is very high, in which case it increases slightly. As salary increases, so does expend - As SAT scores decrease, expenditure increases, unless expenditure is very high. Additionally, as SAT scores increase, they increase salary - As salary increases, SAT scores fall. As salary increases, so does expenditure\nExercise 5: Finally an Explanation\nIt’s strange that SAT scores seem to decrease with spending. But we’re leaving out an important variable from our analysis: the fraction of a state’s students that actually take the SAT. The fracCat variable indicates this fraction: low (under 15% take the SAT), medium (15-45% take the SAT), and high (at least 45% take the SAT).\nPart a\nBuild a univariate viz of fracCat to better understand how many states fall into each category.\n\nCodeggplot(education, aes(x = fracCat)) +\n  geom_bar()\n\n\n\n\n\n\n\nPart b\nBuild 2 bivariate visualizations that demonstrate the relationship between sat and fracCat. What story does your graphic tell and why does this make contextual sense?\n\nCodeggplot(education, aes(y = sat, x = fracCat)) +\n  geom_boxplot()\n\n\n\n\n\n\n\nPart c\nMake a trivariate visualization that demonstrates the relationship of sat with expend AND fracCat. Highlight the differences in fracCat groups through color AND unique trend lines. What story does your graphic tell?\nDoes it still seem that SAT scores decrease as spending increases?\n\nCodeggplot(education, aes(y = sat, x = expend)) +\n  geom_point() +\n  facet_wrap(~fracCat)\n\n\n\n\n\n\n\nPart d\nPutting all of this together, explain this example of Simpson’s Paradox. That is, why did it appear that SAT scores decrease as spending increases even though the opposite is true? - What we see is that SAT scores are not just influenced by expenditure, but also by the percentage of students who take them. If you break the observations into different classes, based on the percent of students who took the SAT, you can see that across all of them there is a clear positive correlation between expenditure and SAT score. But together, you are combining data points from states whose SAT scores are influenced by the percentage of students who take the SAT.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Mulivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-multi.html#exercises-optional",
    "href": "ica/ica-multi.html#exercises-optional",
    "title": "\n11  Mulivariate Viz\n",
    "section": "\n11.3 Exercises (optional)",
    "text": "11.3 Exercises (optional)\nExercise 6: Heat Maps\nAs usual, we’ve only just scratched the surface! There are lots of other data viz techniques for exploring multivariate relationships. Let’s start with a heat map.\nPart a\nRun the chunks below. Check out the code, but don’t worry about every little detail! NOTES:\n\nThis is not part of the ggplot() grammar, making it a bit complicated.\nIf you’re curious about what a line in the plot does, comment it out (#) and check out what happens!\nIn the plot, for each state (row), each variable (column) is scaled to indicate whether the state has a relative high value (yellow), a relatively low value (purple), or something in between (blues/greens).\nYou can also play with the color scheme. Type ?cm.colors in the console to learn about various options.\nWe’ll improve the plot later, so don’t spend too much time trying to learn something from this plot.\n\n\nCode# Remove the \"State\" column and use it to label the rows\n# Then scale the variables\nplot_data &lt;- education |&gt; \n  column_to_rownames(\"State\") |&gt; \n  data.matrix() |&gt; \n  scale()\n\n# Load the gplots package needed for heatmaps\nlibrary(gplots)\n\n# Construct heatmap 1\nheatmap.2(plot_data,\n  dendrogram = \"none\",\n  Rowv = NA, \n  scale = \"column\",\n  keysize = 0.7, \n  density.info = \"none\",\n  col = hcl.colors(256), \n  margins = c(10, 20),\n  colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05),\n  sepcolor = \"white\", trace = \"none\"\n)\n\n\n\nCode# Construct heatmap 2\nheatmap.2(plot_data,\n  dendrogram = \"none\",\n  Rowv = TRUE,             ### WE CHANGED THIS FROM NA TO TRUE\n  scale = \"column\",\n  keysize = 0.7, \n  density.info = \"none\",\n  col = hcl.colors(256), \n  margins = c(10, 20),\n  colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05),\n  sepcolor = \"white\", trace = \"none\"\n)\n\n\n\nCode# Construct heatmap 3\nheatmap.2(plot_data,\n  dendrogram = \"row\",       ### WE CHANGED THIS FROM \"none\" TO \"row\"\n  Rowv = TRUE,            \n  scale = \"column\",\n  keysize = 0.7, \n  density.info = \"none\",\n  col = hcl.colors(256), \n  margins = c(10, 20),\n  colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05),\n  sepcolor = \"white\", trace = \"none\"\n)\n\n\nPart b\nIn the final two plots, the states (rows) are rearranged by similarity with respect to these education metrics. The final plot includes a dendrogram which further indicates clusters of similar states. In short, states that have a shorter path to connection are more similar than others.\nPutting this all together, what insight do you gain about the education trends across U.S. states? Which states are similar? In what ways are they similar? Are there any outliers with respect to 1 or more of the education metrics?\n\nWe see a few patterns and a few outliers. Firstly, midwest states have high math, sat, verbal, and ratio values compared to their salary, expenditure, fracCat, and sometimes their ratio values. California and Utah stand out as states with high ratio scores in comparison to other states. New York, New Jersey, Connecticut, and Alaska stand out as states with salary and expenditure values but lower ratio, verbal, sat, and math values.\nExercise 7: Star plots\nLike heat maps, star plots indicate the relative scale of each variable for each state. Thus, we can use star maps to identify similar groups of states, and unusual states!\nPart a\nConstruct and check out the star plot below. Note that each state has a “pie”, with each segment corresponding to a different variable. The larger a segment, the larger that variable’s value is in that state. For example:\n\nCheck out Minnesota. How does Minnesota’s education metrics compare to those in other states? What metrics are relatively high? Relatively low?\nMinnesota’s education metrics are high in verbal, calc, and math but low in frac, salary, ratio, and and expenditure.\nWhat states appear to be similar? Do these observations agree with those that you gained from the heat map?\nSimilar patterns arise in the nearby states of Michigan and Wisconsin\n\n\nCodestars(plot_data,\n  flip.labels = FALSE,\n  key.loc = c(10, 1.5),\n  cex = 1, \n  draw.segments = TRUE\n)\n\n\nPart b\nFinally, let’s plot the state stars by geographic location! What new insight do you gain here?! - We can see that on the coasts fracCat tends to be emphasized much more strongly than in inland states. Inland states in the Midwest and Great Plains tend to focus on verbal, math, and the sat. Rocky Mountains states tend to be all over the place, with some spreading their focus evenly across categories and some hyper focusing on certain values.\n\nCodestars(plot_data,\n  flip.labels = FALSE,\n  locations = data.matrix(as.data.frame(state.center)),  # added external data to arrange by geo location\n  key.loc = c(-110, 28),\n  cex = 1, \n  draw.segments = TRUE\n)",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Mulivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-multi.html#solutions",
    "href": "ica/ica-multi.html#solutions",
    "title": "\n11  Mulivariate Viz\n",
    "section": "\n11.4 Solutions",
    "text": "11.4 Solutions\n\nClick for Solutions\n\nCodelibrary(tidyverse)\n\n# Import data\nweather &lt;- read.csv(\"https://mac-stat.github.io/data/weather_3_locations.csv\") |&gt; \n  mutate(date = as.Date(date))  \n\n# Check out the first 6 rows\n# What are the units of observation?\nhead(weather)\n\n        date   location mintemp maxtemp rainfall evaporation sunshine\n1 2020-01-01 Wollongong    17.1    23.1        0          NA       NA\n2 2020-01-02 Wollongong    17.7    24.2        0          NA       NA\n3 2020-01-03 Wollongong    19.7    26.8        0          NA       NA\n4 2020-01-04 Wollongong    20.4    35.5        0          NA       NA\n5 2020-01-05 Wollongong    19.8    21.4        0          NA       NA\n6 2020-01-06 Wollongong    18.3    22.9        0          NA       NA\n  windgustdir windgustspeed winddir9am winddir3pm windspeed9am windspeed3pm\n1         SSW            39        SSW        SSE           20           15\n2         SSW            37          S        ENE           13           15\n3          NE            41        NNW        NNE            7           17\n4         SSW            78         NE        NNE           15           17\n5         SSW            57        SSW          S           31           35\n6          NE            35        ESE         NE           17           20\n  humidity9am humidity3pm pressure9am pressure3pm cloud9am cloud3pm temp9am\n1          69          64      1014.9      1014.0        8        1    19.1\n2          72          54      1020.1      1017.7        7        1    19.8\n3          72          71      1017.5      1013.0        6       NA    23.4\n4          77          69      1008.8      1003.9       NA       NA    24.5\n5          70          75      1018.9      1019.9       NA        7    20.7\n6          71          71      1021.2      1018.2       NA       NA    20.9\n  temp3pm raintoday risk_mm raintomorrow\n1    22.9        No     0.0           No\n2    23.6        No     0.0           No\n3    25.7        No     0.0           No\n4    26.7        No     0.0           No\n5    20.0        No     0.0           No\n6    22.6        No     0.8           No\n\nCode# How many data points do we have? \nnrow(weather)\n\n[1] 2367\n\nCode# What type of variables do we have?\nstr(weather)\n\n'data.frame':   2367 obs. of  24 variables:\n $ date         : Date, format: \"2020-01-01\" \"2020-01-02\" ...\n $ location     : chr  \"Wollongong\" \"Wollongong\" \"Wollongong\" \"Wollongong\" ...\n $ mintemp      : num  17.1 17.7 19.7 20.4 19.8 18.3 19.9 20.1 19.8 20.5 ...\n $ maxtemp      : num  23.1 24.2 26.8 35.5 21.4 22.9 25.6 23.2 23.1 25.4 ...\n $ rainfall     : num  0 0 0 0 0 0 0.8 1.6 0 0 ...\n $ evaporation  : num  NA NA NA NA NA NA NA NA NA NA ...\n $ sunshine     : num  NA NA NA NA NA NA NA NA NA NA ...\n $ windgustdir  : chr  \"SSW\" \"SSW\" \"NE\" \"SSW\" ...\n $ windgustspeed: int  39 37 41 78 57 35 44 41 39 56 ...\n $ winddir9am   : chr  \"SSW\" \"S\" \"NNW\" \"NE\" ...\n $ winddir3pm   : chr  \"SSE\" \"ENE\" \"NNE\" \"NNE\" ...\n $ windspeed9am : int  20 13 7 15 31 17 30 31 24 19 ...\n $ windspeed3pm : int  15 15 17 17 35 20 7 33 26 39 ...\n $ humidity9am  : int  69 72 72 77 70 71 76 77 76 79 ...\n $ humidity3pm  : int  64 54 71 69 75 71 72 76 79 76 ...\n $ pressure9am  : num  1015 1020 1018 1009 1019 ...\n $ pressure3pm  : num  1014 1018 1013 1004 1020 ...\n $ cloud9am     : int  8 7 6 NA NA NA NA 8 NA NA ...\n $ cloud3pm     : int  1 1 NA NA 7 NA NA NA NA NA ...\n $ temp9am      : num  19.1 19.8 23.4 24.5 20.7 20.9 22.9 21.3 21.2 23 ...\n $ temp3pm      : num  22.9 23.6 25.7 26.7 20 22.6 24.9 22.2 22.2 25.1 ...\n $ raintoday    : chr  \"No\" \"No\" \"No\" \"No\" ...\n $ risk_mm      : num  0 0 0 0 0 0.8 1.6 0 0 1 ...\n $ raintomorrow : chr  \"No\" \"No\" \"No\" \"No\" ...\n\n\nExample 1\n\nCodeggplot(weather, aes(x = temp3pm)) + \n  geom_density()\n\nWarning: Removed 19 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\nExample 2\n\nCode# Plot 1 (no facets & starting from a density plot of temp3pm)\nggplot(weather, aes(x = temp3pm, fill = location)) + \n  geom_density(alpha = 0.5)\n\nWarning: Removed 19 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\nCode# Plot 2 (no facets or densities)\nggplot(weather, aes(y = temp3pm, x = location)) + \n  geom_boxplot()\n\nWarning: Removed 19 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\nCode# Plot 3 (facets)\nggplot(weather, aes(x = temp3pm, fill = location)) + \n  geom_density(alpha = 0.5) + \n  facet_wrap(~ location)\n\nWarning: Removed 19 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\nExample 3\n\nCode# How often does it raintoday?\n# Fill your geometric layer with the color blue.\nggplot(woll, aes(x = raintoday)) + \n  geom_bar(fill = \"blue\")\n\n\n\n\n\n\n\n\nCode# If it does raintoday, what does this tell us about raintomorrow?\n# Use your intuition first\nggplot(woll, aes(x = raintoday)) + \n  geom_bar(aes(fill = raintomorrow))\n\n\n\n\n\n\nCodeggplot(woll, aes(x = raintoday, fill = raintomorrow)) + \n  geom_bar()\n\n\n\n\n\n\n\n\nCode# Now compare different approaches\n\n# Default: stacked bars\nggplot(woll, aes(x = raintoday, fill = raintomorrow)) + \n  geom_bar()\n\n\n\n\n\n\n\n\nCode# Side-by-side bars\nggplot(woll, aes(x = raintoday, fill = raintomorrow)) + \n  geom_bar(position = \"dodge\")\n\n\n\n\n\n\n\n\nCode# Proportional bars\n# position = \"fill\" refers to filling the frame, nothing to do with the color-related fill\nggplot(woll, aes(x = raintoday, fill = raintomorrow)) + \n  geom_bar(position = \"fill\")\n\n\n\n\n\n\n\nExample 4\n\nCode# THINK: What variable goes on the y-axis?\n# For the curve, try adding span = 0.5 to tweak the curvature\nggplot(woll, aes(y = temp3pm, x = date)) + \n  geom_point() + \n  geom_smooth(span = 0.5)\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\nWarning: Removed 18 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 18 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nCode# Instead of a curve that captures the general TREND,\n# draw a line that illustrates the movement of RAW temperatures from day to day\n# NOTE: We haven't learned this geom yet! Guess.\nggplot(woll, aes(y = temp3pm, x = date)) + \n  geom_line()\n\n\n\n\n\n\n\nExample 5\n\nCode# Plot temp3pm vs temp9am\n# Change the code in order to indicate the location to which each data point corresponds\nggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) + \n  geom_point()\n\nWarning: Removed 27 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nCode# Change the code in order to indicate the location to which each data point corresponds\n# AND identify the days on which it rained / didn't raintoday\nggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) + \n  geom_point() +\n  facet_wrap(~ raintoday)\n\nWarning: Removed 27 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nCode# How many ways can you think to make that plot of temp3pm vs temp9am with info about location and rain?\n# Play around!\n\nggplot(weather, aes(y = temp3pm, x = temp9am, color = location, shape = raintoday)) + \n  geom_point()\n\nWarning: Removed 69 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\nExample 6\n\nCode# Change the code in order to construct a line plot of temp3pm vs date for each separate location (no points!)\nggplot(weather, aes(y = temp3pm, x = date, color = location)) + \n  geom_line()\n\n\n\n\n\n\n\nExample 7\n\nCode# Plot the relationship of raintomorrow & raintoday\n# Change the code in order to indicate this relationship by location\nggplot(weather, aes(x = raintoday, fill = raintomorrow)) + \n  geom_bar(position = \"fill\") + \n  facet_wrap(~ location)\n\n\n\n\n\n\n\nExercise 1: SAT scores\nPart a\n\nCode# A histogram would work too!\nggplot(education, aes(x = sat)) + \n  geom_density()\n\n\n\n\n\n\n\nPart b\naverage SAT scores range from roughly 800 to 1100. They appear bi-modal.\nExercise 2: SAT Scores vs Per Pupil Spending & SAT Scores vs Salaries\nPart a\n\nCode# Construct a plot of sat vs expend\n# Include a \"best fit linear regression model\"\nggplot(education, aes(y = sat, x = expend)) + \n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nCode# Construct a plot of sat vs salary\n# Include a \"best fit linear regression model\"\nggplot(education, aes(y = sat, x = salary)) + \n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nPart b\nThe higher the student expenditures and teacher salaries, the worse the SAT performance.\nExercise 3: SAT Scores vs Per Pupil Spending and Teacher Salaries\n\nCodeggplot(education, aes(y = sat, x = salary, color = expend)) + \n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: The following aesthetics were dropped during statistical transformation:\ncolour.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\n\n\n\n\n\n\nExercise 4: Another Way to Incorporate Scale\n\nCodeggplot(education, aes(y = sat, x = salary, color = cut(expend, 2))) + \n  geom_point() + \n  geom_smooth(se = FALSE, method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nCodeggplot(education, aes(y = sat, x = salary, color = cut(expend, 3))) + \n  geom_point() + \n  geom_smooth(se = FALSE, method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nStates with lower salaries and expenditures tend to have higher SAT scores.\nExercise 5: Finally an Explanation\nPart a\n\nCodeggplot(education, aes(x = fracCat)) + \n  geom_bar()\n\n\n\n\n\n\n\nPart b\nThe more students in a state that take the SAT, the lower the average scores tend to be. This is probably related to self-selection.\n\nCodeggplot(education, aes(x = sat, fill = fracCat)) + \n  geom_density(alpha = 0.5)\n\n\n\n\n\n\n\nPart c\nWhen we control for the fraction of students that take the SAT, SAT scores increase with expenditure.\n\nCodeggplot(education, aes(y = sat, x = expend, color = fracCat)) + \n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nPart d\nStudent participation tends to be lower among states with lower expenditures (which are likely also the states with higher ed institutions that haven’t historically required the SAT). Those same states tend to have higher SAT scores because of the self-selection of who participates.\nExercise 6: Heat Maps\nPart a\n\nCode# Remove the \"State\" column and use it to label the rows\n# Then scale the variables\nplot_data &lt;- education |&gt; \n  column_to_rownames(\"State\") |&gt; \n  data.matrix() |&gt; \n  scale()\n\n# Load the gplots package needed for heatmaps\nlibrary(gplots)\n\n\nAttaching package: 'gplots'\n\n\nThe following object is masked from 'package:stats':\n\n    lowess\n\nCode# Construct heatmap 1\nheatmap.2(plot_data,\n  dendrogram = \"none\",\n  Rowv = NA, \n  scale = \"column\",\n  keysize = 0.7, \n  density.info = \"none\",\n  col = hcl.colors(256), \n  margins = c(10, 20),\n  colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05),\n  sepcolor = \"white\", trace = \"none\"\n)\n\n\n\n\n\n\n\n\nCode# Construct heatmap 2\nheatmap.2(plot_data,\n  dendrogram = \"none\",\n  Rowv = TRUE,             ### WE CHANGED THIS FROM NA TO TRUE\n  scale = \"column\",\n  keysize = 0.7, \n  density.info = \"none\",\n  col = hcl.colors(256), \n  margins = c(10, 20),\n  colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05),\n  sepcolor = \"white\", trace = \"none\"\n)\n\n\n\n\n\n\n\n\nCode# Construct heatmap 3\nheatmap.2(plot_data,\n  dendrogram = \"row\",       ### WE CHANGED THIS FROM \"none\" TO \"row\"\n  Rowv = TRUE,            \n  scale = \"column\",\n  keysize = 0.7, \n  density.info = \"none\",\n  col = hcl.colors(256), \n  margins = c(10, 20),\n  colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05),\n  sepcolor = \"white\", trace = \"none\"\n)\n\n\n\n\n\n\n\nPart b\n\nSimilar values in verbal, math, and sat.\nHigh contrast (an inverse relationship) verbal/math/sat scores and the fraction of students that take the SAT.\nOutliers of Utah and California in ratio (more students per teacher).\nWhile grouped, fraction and salary are not as similar to each other as the sat scores; it is also interesting to notice states that have high ratios have generally low expenditures per student.\nExercise 7: Star Plots\nPart a\nMN is high on the SAT performance related metrics and low on everything else. MN is similar to Iowa, Kansas, Mississippi, Missouri, the Dakotas…\n\nCodestars(plot_data,\n  flip.labels = FALSE,\n  key.loc = c(10, 1.5),\n  cex = 1, \n  draw.segments = TRUE\n)\n\n\n\n\n\n\n\nPart b\nWhen the states are in geographical ordering, we’d notice more easily that states in similar regions of the U.S. have similar patterns of these variables.\n\nCodestars(plot_data,\n  flip.labels = FALSE,\n  locations = data.matrix(as.data.frame(state.center)),  # added external data to arrange by geo location\n  key.loc = c(-110, 28),\n  cex = 1, \n  draw.segments = TRUE\n)",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Mulivariate Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-spatial.html",
    "href": "ica/ica-spatial.html",
    "title": "\n12  Spatial Viz\n",
    "section": "",
    "text": "12.1 Review\nIn the previous activity, we explored a Simpson’s Paradox–it seemed that - states with higher spending… - tend to have lower average SAT scores.\nBUT this was explained by a confounding or omitted or lurking variable which is the % of students in a state that take the SAT. Hence,\nThus, when controlling for the % of students that take the SAT, more spending is correlated with higher scores.\nLet’s explore a Simpson’s paradox related to Mac!\nBack in the 2000s, Macalester invested in insulating a few campus-owned houses, with the hopes of leading to energy savings.  Former Mac Prof Danny Kaplan accessed monthly data on energy use and other info for these addresses, before and after renovations:\nCode# Load tidyverse package for plotting and wrangling\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nCode# Import the data and only keep 2 addresses\nenergy &lt;- read.csv(\"https://mac-stat.github.io/data/MacNaturalGas.csv\") |&gt; \n  mutate(date = as.Date(paste0(month, \"/1/\", year), \"%m/%d/%Y\")) |&gt; \n  filter(address != \"c\")\n\n# Check it out\nhead(energy)\n\n  month year  price therms hdd address renovated       date\n1     6 2005  35.21     21   0       a        no 2005-06-01\n2     7 2005  37.37     21   0       a        no 2005-07-01\n3     8 2005  36.93     21   3       a        no 2005-08-01\n4     9 2005  62.36     39  61       a        no 2005-09-01\n5    10 2005 184.15    120 416       a        no 2005-10-01\n6    11 2005 433.35    286 845       a        no 2005-11-01\nThe part of dataset codebook is below:",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Spatial Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-spatial.html#review",
    "href": "ica/ica-spatial.html#review",
    "title": "\n12  Spatial Viz\n",
    "section": "",
    "text": "States with higher spending…\ntend to have a higher % of students of students that take the SAT…\nwhich then “leads to” lower average SAT scores.\n\n\n\n\n\n\n\n\n\n\n\n\nvariable\nmeaning\n\n\n\ntherms\na measure of energy use–the more energy used, the larger the therms\n\n\naddress\na or b\n\n\nrenovated\nwhether the location had been renovated, yes or no\n\n\nmonth\nfrom 1 (January) to 12 (December)\n\n\nhdd\nmonthly heating degree days. A proxy measure of outside temperatures–the higher the hdd, the COLDER it was outside",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Spatial Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-spatial.html#examples",
    "href": "ica/ica-spatial.html#examples",
    "title": "\n12  Spatial Viz\n",
    "section": "\n12.2 Examples",
    "text": "12.2 Examples\n\n\n\n\n\n\nInstructions\n\n\n\n\nConstruct a plot that addresses each research question\nInclude a 1-sentence summary of the plot.\n\n\n\nExample 1\nWhat was the range and typical energy used each month, as measured by therms? How does this differ by address? - Energy use decreased in the summer and increased in the winter\n\nCodeggplot(energy, aes(x = month, y = therms, color = address)) +\n  geom_point()\n\nWarning: Removed 12 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\nCodestr(energy)\n\n'data.frame':   78 obs. of  8 variables:\n $ month    : int  6 7 8 9 10 11 12 1 2 3 ...\n $ year     : int  2005 2005 2005 2005 2005 2005 2005 2006 2006 2006 ...\n $ price    : num  35.2 37.4 36.9 62.4 184.2 ...\n $ therms   : int  21 21 21 39 120 286 443 367 473 356 ...\n $ hdd      : int  0 0 3 61 416 845 1403 1123 1253 967 ...\n $ address  : chr  \"a\" \"a\" \"a\" \"a\" ...\n $ renovated: chr  \"no\" \"no\" \"no\" \"no\" ...\n $ date     : Date, format: \"2005-06-01\" \"2005-07-01\" ...\n\n\nExample 2\nHow did energy use (therms) change over time (date) at the two addresses? - Both addresses saw a gradual increase\n\nCodeggplot(energy, aes(x = date, y = therms)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  facet_wrap(~address)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 12 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 12 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\nExample 3\nHow did the typical energy use (therms) at the two addresses change before and after they were renovated? - in address a, before the renovation the energy use was decreasing, but then started to increase after the renovation. In address b, the energy use was increasing before the renovation and then started to increase even more after the renovation\n\nCodeggplot(energy, aes (x = date, y = therms, color = renovated)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  facet_wrap(~address)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 12 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 12 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\nExample 4\nThat seems unfortunate that energy usage went up after renovations. But also fishy.\nTake 5 minutes (in your groups) to try and explain what’s going on here. Think: What confounding or lurking or omitted variable related to energy usage are we ignoring here? Try to make some plots to prove your point.\n\nCodeggplot(energy, aes (x = date, y = hdd, color = renovated)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  facet_wrap(~address)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nCodeggplot(energy, aes (x = hdd, y = therms, color = renovated)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  facet_wrap(~address)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 12 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 12 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\nExample 5\nLet’s summarize the punchlines by filling in the ???. It seemed that:\n\nAfter renovation…\nenergy use increased.\n\nBUT this was explained by a confounding or omitted or lurking variable: ???\n\nAfter renovation…\nthe temperature outside dropped…\nwhich then leads to higher energy use.\n\nThus, when controlling for how cold it was outside, renovations led to decreased energy use.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Spatial Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-spatial.html#new-stuff",
    "href": "ica/ica-spatial.html#new-stuff",
    "title": "\n12  Spatial Viz\n",
    "section": "\n12.3 New stuff",
    "text": "12.3 New stuff\nTypes of spatial viz:\n\nPoint Maps: plotting locations of individual observations\nexample: bigfoot sightings\nContour Maps: plotting the density or distribution of observations (not the individual observations themselves)\n\nChoropleth Maps: plotting outcomes in different regions\n\nNYT article on effects of redlining\nMinnesota Reformer article on how Mpls / St Paul voted on 2021 ballot measures related to mayoral, policing, and rent policies\n\n\n\nThese spatial maps can be static or dynamic/interactive.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Spatial Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-spatial.html#exercises",
    "href": "ica/ica-spatial.html#exercises",
    "title": "\n12  Spatial Viz\n",
    "section": "\n12.4 Exercises",
    "text": "12.4 Exercises\n\n12.4.1 Preview\nYou’ll explore some R spatial viz tools below. In general, there are two important pieces to every map:\nPiece 1: A dataset\nThis dataset must include either:\n\nlocation coordinates for your points of interest (for point maps); or\nvariable outcomes for your regions of interest (for choropleth maps)\n\n\nPiece 2: A background map\nWe need latitude and longitude coordinates to specify the boundaries for your regions of interest (eg: countries, states). This is where it gets really sticky!\n\nCounty-level, state-level, country-level, continent-level info live in multiple places.\nWhere we grab this info can depend upon whether we want to make a point map or a choropleth map. (The background maps can be used somewhat interchangeably, but it requires extra code :/)\nWhere we grab this info can also depend upon the structure of our data and how much data wrangling / cleaning we’re up for. For choropleth maps, the labels of regions in our data must match those in the background map. For example, if our data labels states with their abbreviations (eg: MN) and the background map refers to them as full names in lower case (eg: minnesota), we have to wrangle our data so that it matches the background map.\n\nIn short, the code for spatial viz gets very specialized. The goal of these exercises is to:\n\nplay around and experience the wide variety of spatial viz tools out there\nunderstand the difference between point maps and choropleth maps\nhave fun\n\nYou can skip around as you wish and it’s totally fine if you don’t finish everything. Just come back at some point to play around.\nPart 1: Interactive points on a map with leaflet\n\nLeaflet is an open-source JavaScript library for creating maps. We can use it inside R through the leaflet package.\nThis uses a different plotting framework than ggplot2, but still has a tidyverse feel (which will become more clear as we learn other tidyverse tools!).\nThe general steps are as follows:\n\nCreate a map widget by calling leaflet() and telling it the data to use.\nAdd a base map using addTiles() (the default) or addProviderTiles().\nAdd layers to the map using layer functions (e.g. addMarkers(), addPolygons()).\nPrint the map widget to display it.\nExercise 1: A leaflet with markers / points\nEarlier this semester, I asked for the latitude and longitude of one of your favorite places. I rounded these to the nearest whole number, so that they’re near to but not exactly at those places. Let’s load the data and map it!\n\n\n  latitude longitude\n1       59        18\n2       45       -93\n3       33      -117\n4       40       116\n5       40       106\n6       37      -122\n\n\n\nCodefave_places &lt;- read.csv(\"https://hash-mac.github.io/stat112site-s25/data/our_fave_places.csv\")\n\n# Check it out\nhead(fave_places)\n\n\nPart a\nYou can use a “two-finger scroll” to zoom in and out.\n\nCode# Load the leaflet package\nlibrary(leaflet)\n\n# Just a plotting frame\nleaflet(data = fave_places)\n\n\n\n\n\n\nCode# Now what do we have?\nleaflet(data = fave_places) |&gt; \n  addTiles()\n\n\n\n\n\n\nCode# Now what do we have?\n# longitude and latitude refer to the variables in our data\nleaflet(data = fave_places) |&gt; \n  addTiles() |&gt; \n  addMarkers(lng = ~longitude, lat = ~latitude)\n\n\n\n\n\n\nCode# Since we named them \"longitude\" and \"latitude\", the function\n# automatically recognizes these variables. No need to write them!\nleaflet(data = fave_places) |&gt; \n  addTiles() |&gt; \n  addMarkers()\n\n\n\n\n\nPart b\nPLAY AROUND! This map is interactive. Zoom in on one location. Keep zooming – what level of detail can you get into? How does that detail depend upon where you try to zoom in (thus what are the limitations of this tool)?\nExercise 2: Details\nWe can change all sorts of details in leaflet maps.\n\nCode# Load package needed to change color\nlibrary(gplots)\n\n\nAttaching package: 'gplots'\n\n\nThe following object is masked from 'package:stats':\n\n    lowess\n\nCode# We can add colored circles instead of markers at each location\nleaflet(data = fave_places) |&gt; \n  addTiles() |&gt; \n  addCircles(color = col2hex(\"red\"))\n\n\n\n\n\n\nCode# We can change the background\n# Mark locations with yellow dots\n# And connect the dots, in their order in the dataset, with green lines\n# (These green lines don't mean anything here, but would if this were somebody's travel path!)\nleaflet(data = fave_places) |&gt;\n  addProviderTiles(\"USGS\") |&gt;\n  addCircles(weight = 10, opacity = 1, color = col2hex(\"yellow\")) |&gt;\n  addPolylines(\n    lng = ~longitude,\n    lat = ~latitude,\n    color = col2hex(\"green\")\n  )\n\n\n\n\n\nIn general:\n\naddProviderTiles() changes the base map.\nTo explore all available provider base maps, type providers in the console. (Though some don’t work :/)\n\nUse addMarkers() or addCircles() to mark locations. Type ?addControl into the console to pull up a help file which summarizes the aesthetics of these markers and how you can change them. For example:\n\n\nweight = how thick to make the lines, points, pixels\n\nopacity = transparency (like alpha in ggplot2)\ncolors need to be in “hex” form. We used the col2hex() function from the gplots library to do that\n\n\nExercise 3: Your turn\nThe starbucks data, compiled by Danny Kaplan, contains information about every Starbucks in the world at the time the data were collected, including Latitude and Longitude:\n\nCode# Import starbucks location data\nstarbucks &lt;- read.csv(\"https://mac-stat.github.io/data/starbucks.csv\")\n\n\nLet’s focus on only those in Minnesota for now:\n\nCode# Don't worry about the syntax\nstarbucks_mn &lt;- starbucks |&gt;   \n  filter(Country == \"US\", State.Province == \"MN\")\n\nleaflet(data = starbucks_mn) |&gt;\n  addProviderTiles(\"USGS\") |&gt;\n  addCircles(weight = 5, opacity = 1, color = col2hex(\"black\"))\n\nAssuming \"Longitude\" and \"Latitude\" are longitude and latitude, respectively\n\n\n\n\n\n\nCreate a leaflet map of the Starbucks locations in Minnesota. Keep it simple – go back to Exercise 1 for an example.\nPart 2: Static points on a map\nLeaflet is very powerful and fun. But:\n\nIt’s not great when we have lots of points to map – it takes lots of time.\nIt makes good interactive maps, but we often need a static map (eg: we can not print interactive maps!).\n\nLet’s explore how to make point maps with ggplot(), not leaflet().\nExercise 3: A simple scatterplot\nLet’s start with the ggplot() tools we already know. Construct a scatterplot of all starbucks locations, not just those in Minnesota, with:\n\nLatitude and Longitude coordinates (which goes on the y-axis?!)\nMake the points transparent (alpha = 0.2) and smaller (size = 0.2)\n\nIt’s pretty cool that the plots we already know can provide some spatial context. But what don’t you like about this plot?\n\nCodeggplot(starbucks, aes(x = Longitude, y = Latitude)) +\n  geom_point(alpha = 0.2, size = 0.2)\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\nExercise 4: Adding a country-level background\nLet’s add a background map of country-level boundaries.\nPart a\nFirst, we can grab country-level boundaries from the rnaturalearth package.\n\nCode# Load the package\nlibrary(rnaturalearth)\n\n# Get info about country boundaries across the world\n# in a \"sf\" or simple feature format\nworld_boundaries &lt;- ne_countries(returnclass = \"sf\")\n\n\nIn your console, type world_boundaries to check out what’s stored there. Don’t print it our in your Rmd – printing it would be really messy there (even just the head()).\nPart b\nRun the chunks below to build up a new map.\n\nCode# What does this code produce?\n# What geom are we using for the point map?\nggplot(world_boundaries) + \n  geom_sf()\n\n\n\n\n\n\n\n\nCode# Load package needed to change map theme\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\n\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\n\n\nAttaching package: 'mosaic'\n\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nCode# Add a point for each Starbucks\n# NOTE: The Starbucks info is in our starbucks data, not world_boundaries\n# How does this change how we use geom_point?!\nggplot(world_boundaries) + \n  geom_sf() + \n  geom_point(\n    data = starbucks,\n    aes(x = Longitude, y = Latitude),\n    alpha = 0.3, size = 0.2, color = \"darkgreen\"\n  ) +\n  theme_map()\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\nPart c\nSummarize what you learned about Starbucks from this map. - I learned that starbucks locations tend to be concentrated in areas with dense populations, with some exceptions. For example, France is densely populated, but has few starbucks locations in comparison to Germany. In Europe there are a lot of Starbucks locations in the lowlands, Germany, and England. IN the United States, they are on the coasts and cities. In East Asia, they are focused in China’s coast, South Korea, and Japan. However, there are next to none in India, which is densely populated. In certain developed countries with large cities, like Australia, New Zealand, and France there are few Starbucks locations. For some reason, Starbucks seems to have a strong presence in South East Asia too, and Turkey. It is hard to properly gage the number of locations on this world map, but countries like Russia, Saudi Arabia, and Kuwait seem to have a large number of Starbucks locations focused in relatively small areas. Starbucks seems to be nearly absent from certain countries(the DRC), regions(Central Asia), and continents(Africa).\nExercise 5: Zooming in on some countries\nInstead of world_boundaries &lt;- ne_countries(returnclass = 'sf') we could zoom in on…\n\nthe continent of Africa: ne_countries(continent = 'Africa', returnclass = 'sf')\n\na set of countries: ne_countries(country = c('france', 'united kingdom', 'germany'), returnclass = 'sf')\n\nboundaries within a country: ne_states(country = 'united states of america', returnclass = 'sf')\n\n\nOur goal here will be to map the Starbucks locations in Canada, Mexico, and the US.\nPart a\nTo make this map, we again need two pieces of information.\n\nData on Starbucks for only Canada, Mexico, and the US, labeled as “CA”, “MX”, “US” in the starbucks data.\n\n\nCode# We'll learn this syntax soon! Don't worry about it now.\nstarbucks_cma &lt;- starbucks |&gt; \n  filter(Country %in% c('CA', 'MX', 'US'))\n\n\n\nA background map of state- and national-level boundaries in Canada, Mexico, and the US. This requires ne_states() in the rnaturalearth package where the countries are labeled ‘canada’, ‘mexico’, ‘united states of america’.\n\n\nCodecma_boundaries &lt;- ne_states(\n  country = c(\"canada\", \"mexico\", \"united states of america\"),\n  returnclass = \"sf\")\n\n\nPart b\nMake the map!\n\nCode# Just the boundaries\nggplot(cma_boundaries) + \n  geom_sf()\n\n\n\n\n\n\n\n\nCode# Add the points\n# And zoom in\nggplot(cma_boundaries) + \n  geom_sf() + \n  geom_point(\n    data = starbucks_cma,\n    aes(x = Longitude, y = Latitude),\n    alpha = 0.3,\n    size = 0.2,\n    color = \"darkgreen\"\n  ) +\n  coord_sf(xlim = c(-179.14, -50)) +\n  theme_map()\n\n\n\n\n\n\n\nExercise 6: A state and county-level map\nLet’s get an even higher resolution map of Starbucks locations within the states of Minnesota, Wisconsin, North Dakota, and South Dakota, with a background map at the county-level.\nPart a\nTo make this map, we again need two pieces of information.\n\nData on Starbucks for only the states of interest.\n\n\nCodestarbucks_midwest &lt;- starbucks |&gt; \n  filter(State.Province %in% c(\"MN\", \"ND\", \"SD\", \"WI\"))\n\n\n\nA background map of state- and county-level boundaries in these states. This requires st_as_sf() in the sf package, and map() in the maps package, where the countries are labeled ‘minnesota’, ‘north dakota’, etc.\n\n\nCode# Load packages\nlibrary(sf)\n\nLinking to GEOS 3.13.0, GDAL 3.8.5, PROJ 9.5.1; sf_use_s2() is TRUE\n\nCodelibrary(maps)\n\n\nAttaching package: 'maps'\n\n\nThe following object is masked from 'package:purrr':\n\n    map\n\nCode# Get the boundaries\nmidwest_boundaries &lt;- st_as_sf(\n  maps::map(\"county\",\n            region = c(\"minnesota\", \"wisconsin\", \"north dakota\", \"south dakota\"), \n            fill = TRUE, plot = FALSE))\n\n# Check it out\nhead(midwest_boundaries)\n\nSimple feature collection with 6 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -96.81268 ymin: 45.05167 xmax: -93.01397 ymax: 48.53526\nGeodetic CRS:  +proj=longlat +ellps=clrk66 +no_defs +type=crs\n                                     ID                           geom\nminnesota,aitkin       minnesota,aitkin MULTIPOLYGON (((-93.03689 4...\nminnesota,anoka         minnesota,anoka MULTIPOLYGON (((-93.51817 4...\nminnesota,becker       minnesota,becker MULTIPOLYGON (((-95.14537 4...\nminnesota,beltrami   minnesota,beltrami MULTIPOLYGON (((-95.58655 4...\nminnesota,benton       minnesota,benton MULTIPOLYGON (((-93.77027 4...\nminnesota,big stone minnesota,big stone MULTIPOLYGON (((-96.10794 4...\n\n\nPart b\nAdjust the code below to make the plot! Remove the # to run it.\n\nCode ggplot(midwest_boundaries) + \n   geom_sf() +\n     geom_point(\n     data = starbucks_midwest,\n     aes(x = Longitude, y = Latitude),\n     alpha = 0.7,\n     size = 0.2, \n     color = 'darkgreen'\n   ) + \n   theme_map()\n\n\n\n\n\n\n\nExercise 7: Contour maps\nEspecially when there are lots of point locations, and those locations start overlapping on a map, it can be tough to visualize areas of higher density. Consider the Starbucks locations in Canada, Mexico, and the US that we mapped earlier:\n\nCode# Point map (we made this earlier)\nggplot(cma_boundaries) + \n  geom_sf() + \n  geom_point(\n    data = starbucks_cma,\n    aes(x = Longitude, y = Latitude),\n    alpha = 0.3,\n    size = 0.2,\n    color = \"darkgreen\"\n  ) +\n  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +\n  theme_map()\n\n\n\n\n\n\n\nNow check out the contour map.\n\nCode# What changed in the plot?\n# What changed in our code?!\nggplot(cma_boundaries) + \n  geom_sf() + \n  geom_density_2d(\n    data = starbucks_cma,\n    aes(x = Longitude, y = Latitude),\n    size = 0.2,\n    color = \"darkgreen\"\n  ) +\n  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +\n  theme_map()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\nPart 3: Choropleth maps\nSpatial data isn’t always in the form of point locations! For example, recall the state and county-level data on presidential elections.\n\nCodeelections_by_state &lt;-  read.csv(\"https://mac-stat.github.io/data/election_2020_by_state.csv\")\nelections_by_counties &lt;- read.csv(\"https://mac-stat.github.io/data/election_2020_county.csv\")\n\n\nIn these datasets, we’re interested in the overall election outcome by region (state or county), not the specific geographic location of some observation. Let’s wrangle our data first. We’ll focus on just a few variables of interest, and create a new variable (repub_20_categories) that discretizes the repub_pct_20 variable into increments of 5 percentage points (for states) or 10 percentage points (for counties):\n\nCode# Don't worry about the code!\n\nelections_by_state &lt;- elections_by_state |&gt; \n  filter(state_abbr != \"DC\") |&gt; \n  select(state_name, state_abbr, repub_pct_20) |&gt; \n  mutate(repub_20_categories = \n           cut(repub_pct_20, \n               breaks = seq(30, 70, by = 5), \n               labels = c(\"30-34\", \"35-39\", \"40-44\", \"45-49\",\n                          \"50-54\", \"55-59\", \"60-64\", \"65-70\"), \n               include.lowest = TRUE))\n\nelections_by_counties &lt;- elections_by_counties |&gt; \n  select(state_name, state_abbr, county_name, county_fips,\n          repub_pct_20, median_age, median_rent) |&gt; \n  mutate(repub_20_categories = \n           cut(repub_pct_20, \n               breaks = seq(0, 100, by = 10),\n               labels = c(\"0-9\", \"10-19\", \"20-29\", \"30-39\", \"40-49\",\n                          \"50-59\", \"60-69\", \"70-79\", \"80-89\", \"90-100\"),\n               include.lowest = TRUE))\n\n\nExercise 8: State-level choropleth maps\nLet’s map the 2020 Republican support in each state, repub_pct_20.\nPart a\nWe again need two pieces of information.\n\nData on elections in each state, which we already have: elections_by_state.\nA background map of state boundaries in the US. The boundaries we used for point maps don’t work here. (Optional detail: they’re sf objects and we now need a data.frame object.) Instead, we can use the map_data() function from the ggplot2 package:\n\n\nCode# Get the latitude and longitude coordinates of state boundaries\nstates_map &lt;- map_data(\"state\")\n\n# Check it out\nhead(states_map)\n\n       long      lat group order  region subregion\n1 -87.46201 30.38968     1     1 alabama      &lt;NA&gt;\n2 -87.48493 30.37249     1     2 alabama      &lt;NA&gt;\n3 -87.52503 30.37249     1     3 alabama      &lt;NA&gt;\n4 -87.53076 30.33239     1     4 alabama      &lt;NA&gt;\n5 -87.57087 30.32665     1     5 alabama      &lt;NA&gt;\n6 -87.58806 30.32665     1     6 alabama      &lt;NA&gt;\n\n\nPause\nImportant detail: Note that the region variable in states_map, and the state_name variable in elections_by_state both label states by the full name in lower case letters. This is critical to the background map and our data being able to communicate.\n\nCodehead(states_map)\n\n       long      lat group order  region subregion\n1 -87.46201 30.38968     1     1 alabama      &lt;NA&gt;\n2 -87.48493 30.37249     1     2 alabama      &lt;NA&gt;\n3 -87.52503 30.37249     1     3 alabama      &lt;NA&gt;\n4 -87.53076 30.33239     1     4 alabama      &lt;NA&gt;\n5 -87.57087 30.32665     1     5 alabama      &lt;NA&gt;\n6 -87.58806 30.32665     1     6 alabama      &lt;NA&gt;\n\nCodehead(elections_by_state) \n\n   state_name state_abbr repub_pct_20 repub_20_categories\n1     alabama         AL        62.03               60-64\n2    arkansas         AR        62.40               60-64\n3     arizona         AZ        49.06               45-49\n4  california         CA        34.33               30-34\n5    colorado         CO        41.90               40-44\n6 connecticut         CT        39.21               35-39\n\n\nPart b\nNow map repub_pct_20 by state.\n\nCode# Note where the dataset, elections_by_state, is used\n# Note where the background map, states_map, is used\nggplot(elections_by_state, aes(map_id = state_name, fill = repub_pct_20)) +\n  geom_map(map = states_map) +\n  expand_limits(x = states_map$long, y = states_map$lat) +\n  theme_map() \n\n\n\n\n\n\n\n\nCode# Make it nicer!\nggplot(elections_by_state, aes(map_id = state_name, fill = repub_pct_20)) +\n  geom_map(map = states_map) +\n  expand_limits(x = states_map$long, y = states_map$lat) +\n  theme_map() + \n  scale_fill_gradientn(name = \"% Republican\", colors = c(\"blue\", \"purple\", \"red\"), values = scales::rescale(seq(0, 100, by = 5)))\n\n\n\n\n\n\n\n\nCode# Don't worry about the code!\n\nelections_by_state &lt;- elections_by_state |&gt; \n  filter(state_abbr != \"DC\") |&gt; \n  select(state_name, state_abbr, repub_pct_20) |&gt; \n  mutate(repub_20_categories = \n           cut(repub_pct_20, \n               breaks = seq(30, 70, by = 5), \n               labels = c(\"30-34\", \"35-39\", \"40-44\", \"45-49\",\n                          \"50-54\", \"55-59\", \"60-64\", \"65-70\"), \n               include.lowest = TRUE))\n\nelections_by_counties &lt;- elections_by_counties |&gt; \n  select(state_name, state_abbr, county_name, county_fips,\n          repub_pct_20, median_age, median_rent) |&gt; \n  mutate(repub_20_categories = \n           cut(repub_pct_20, \n               breaks = seq(0, 100, by = 10),\n               labels = c(\"0-9\", \"10-19\", \"20-29\", \"30-39\", \"40-49\",\n                          \"50-59\", \"60-69\", \"70-79\", \"80-89\", \"90-100\"),\n               include.lowest = TRUE))\n\n\nIt’s not easy to get fine control over the color scale for the quantitative repub_pct_20 variable. Instead, let’s plot the discretized version, repub_20_categories:\n\nCodeggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +\n  geom_map(map = states_map) +\n  expand_limits(x = states_map$long, y = states_map$lat) +\n  theme_map()\n\n\n\n\n\n\n\n\nCode# Load package needed for refining color palette\nlibrary(RColorBrewer)\n\n# Now fix the colors\nggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +\n  geom_map(map = states_map) +\n  expand_limits(x = states_map$long, y = states_map$lat) +\n  theme_map() + \n  scale_fill_manual(values = rev(brewer.pal(8, \"RdBu\")), name = \"% Republican\")\n\n\n\n\n\n\n\nPart c\nWe can add other layers, like points, on top of a choropleth map. Add a Starbucks layer! Do you notice any relationship between Starbucks and elections? Or are we just doing things at this point? ;)\n\nCode# Get only the starbucks data from the US\nstarbucks_us &lt;- starbucks |&gt; \n  filter(Country == \"US\")\n\n# Map it\nggplot(elections_by_state, aes(map_id = state_name, fill = repub_20_categories)) +\n  geom_map(map = states_map) +\n  geom_point(\n    data = starbucks_us,\n    aes(x = Longitude, y = Latitude),\n    size = 0.05,\n    alpha = 0.2,\n    inherit.aes = FALSE\n  ) +\n  expand_limits(x = states_map$long, y = states_map$lat) +\n  theme_map() + \n  scale_fill_manual(values = rev(brewer.pal(8, \"RdBu\")), name = \"% Republican\")\n\n\n\n\n\n\n\nDetails (if you’re curious)\n\n\nmap_id is a required aesthetic for geom_map().\n\nIt specifies which variable in our dataset indicates the region (here state_name).\nIt connects this variable (state_name) to the region variable in our mapping background (states_map). These variables must have the same possible outcomes in order to be matched up (alabama, alaska, arizona,…).\n\n\n\nexpand_limits() assures that the map covers the entire area it’s supposed to, by pulling longitudes and latitudes from the states_map.\nPart d\nWe used geom_sf() for point maps. What geom do we use for choropleth maps?\nExercise 9: County-level choropleth maps\nLet’s map the 2020 Republican support in each county.\nPart a\nWe again need two pieces of information.\n\nData on elections in each county, which we already have: elections_by_county.\nA background map of county boundaries in the US, stored in the county_map dataset in the socviz package:\n\n\nCode# Get the latitude and longitude coordinates of county boundaries\nlibrary(socviz)\ndata(county_map) \n\n# Check it out\nhead(county_map)\n\n     long      lat order  hole piece            group    id\n1 1225889 -1275020     1 FALSE     1 0500000US01001.1 01001\n2 1235324 -1274008     2 FALSE     1 0500000US01001.1 01001\n3 1244873 -1272331     3 FALSE     1 0500000US01001.1 01001\n4 1244129 -1267515     4 FALSE     1 0500000US01001.1 01001\n5 1272010 -1262889     5 FALSE     1 0500000US01001.1 01001\n6 1276797 -1295514     6 FALSE     1 0500000US01001.1 01001\n\n\nPause\nImportant detail: We officially have a headache. Our county_map refers to each county by a 5-number id. Our elections_by_counties data refers to each county by a county_fips code, which is mostly the same as id, BUT drops any 0’s at the beginning of the code.\n\nCodehead(county_map)\n\n     long      lat order  hole piece            group    id\n1 1225889 -1275020     1 FALSE     1 0500000US01001.1 01001\n2 1235324 -1274008     2 FALSE     1 0500000US01001.1 01001\n3 1244873 -1272331     3 FALSE     1 0500000US01001.1 01001\n4 1244129 -1267515     4 FALSE     1 0500000US01001.1 01001\n5 1272010 -1262889     5 FALSE     1 0500000US01001.1 01001\n6 1276797 -1295514     6 FALSE     1 0500000US01001.1 01001\n\nCodehead(elections_by_counties)\n\n  state_name state_abbr    county_name county_fips repub_pct_20 median_age\n1    Alabama         AL Autauga County        1001        71.44       37.5\n2    Alabama         AL Baldwin County        1003        76.17       41.5\n3    Alabama         AL Barbour County        1005        53.45       38.3\n4    Alabama         AL    Bibb County        1007        78.43       39.4\n5    Alabama         AL  Blount County        1009        89.57       39.6\n6    Alabama         AL Bullock County        1011        24.84       39.6\n  median_rent repub_20_categories\n1         668               70-79\n2         693               70-79\n3         382               50-59\n4         351               70-79\n5         403               80-89\n6         276               20-29\n\n\nThis just means that we have to wrangle the data so that it can communicate with the background map.\n\nCode# Add 0's at the beginning of any fips_code that's fewer than 5 numbers long\n# Don't worry about the syntax\nelections_by_counties &lt;- elections_by_counties |&gt; \n  mutate(county_fips = as.character(county_fips)) |&gt; \n  mutate(county_fips = \n           ifelse(nchar(county_fips) == 4, paste0(\"0\", county_fips), county_fips))\n\n\nPart b\nNow map Republican support by county. Let’s go straight to the discretized repub_20_categories variable, and a good color scale.\n\nCodeggplot(elections_by_counties, aes(map_id = county_fips, fill = repub_20_categories)) +\n  geom_map(map = county_map) +\n  scale_fill_manual(values = rev(brewer.pal(10, \"RdBu\")), name = \"% Republican\") +\n  expand_limits(x = county_map$long, y = county_map$lat) +\n  theme_map() +\n  theme(legend.position = \"right\") + \n  coord_equal()\n\n\n\n\n\n\n\nExercise 10: Play around!\nConstruct county-level maps of median_rent and median_age.\nExercise 11: Choropleth maps with leaflet\nThough ggplot() is often better for this purpose, we can also make choropleth maps with leaflet(). If you’re curious, check out the leaflet documentation:\nhttps://rstudio.github.io/leaflet/choropleths.html",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Spatial Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-spatial.html#solutions",
    "href": "ica/ica-spatial.html#solutions",
    "title": "\n12  Spatial Viz\n",
    "section": "\n12.5 Solutions",
    "text": "12.5 Solutions\n\nClick for Solutions\nExample 1\nBoth addresses used between 0 and 450 therms per month. There seem to be two types of months – those with lower use around 50 therms and those with higher use around 300/400 therms.\n\nCodeggplot(energy, aes(x = therms, fill = address)) + \n  geom_density(alpha = 0.5)\n\nWarning: Removed 12 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\nExample 2\nEnergy use is seasonal, with higher usage in winter months. It seems that address a uses slightly more energy.\n\nCodeggplot(energy, aes(y = therms, x = date, color = address)) + \n  geom_point()\n\nWarning: Removed 12 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\nCodeggplot(energy, aes(y = therms, x = date, color = address)) + \n  geom_line()\n\n\n\n\n\n\n\nExample 3\nAt both addresses, typical energy use increased after renovations.\n\nCodeggplot(energy, aes(y = therms, x = renovated)) + \n  geom_boxplot() + \n  facet_wrap(~ address)\n\nWarning: Removed 12 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\nCode# A density plot isn't very helpful for comparing typical therms in this example!\nggplot(energy, aes(x = therms, fill = renovated)) + \n  geom_density(alpha = 0.5) + \n  facet_wrap(~ address)\n\nWarning: Removed 12 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\nExample 4\nlurking variable = outdoor temperature (as reflected by hdd)\n\nCode# It happened to be colder outside after renovations (higher hdd)\nggplot(energy, aes(y = hdd, x = renovated)) + \n  geom_boxplot() + \n  facet_wrap(~ address)\n\n\n\n\n\n\nCode# When controlling for outside temps (via hdd), energy use decreased post-renovation\nggplot(energy, aes(y = therms, x = hdd, color = renovated)) + \n  geom_point(alpha = 0.5) + \n  geom_smooth(method = \"lm\", se = FALSE) + \n  facet_wrap(~ address)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 12 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 12 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\nExample 5\nBUT this was explained by a confounding or omitted or lurking variable: hdd (outdoor temperature)\n\nAfter renovation…\n\nit happened to be colder…\nwhich then leads to higher energy use.\n\nThus, when controlling for outdoor temps, renovations led to decreased energy use.\nExercise 3: Your turn\n\nCodeleaflet(data = starbucks_mn) |&gt; \n  addTiles() |&gt; \n  addMarkers()\n\nAssuming \"Longitude\" and \"Latitude\" are longitude and latitude, respectively\n\n\n\n\n\n\nExercise 3: A simple scatterplot\nIt would be nice to also have some actual reference maps of countries in the background.\n\nCodeggplot(starbucks, aes(y = Latitude, x = Longitude)) + \n  geom_point(size = 0.5)\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\nExercise 6: A state and county-level map\nPart b\nAdjust the code below to make the plot! Remove the # to run it.\n\nCodeggplot(midwest_boundaries) +\n  geom_sf() +\n  geom_point(\n    data = starbucks_midwest,\n    aes(x = Longitude, y = Latitude),\n    alpha = 0.7,\n    size = 0.2,\n    color = 'darkgreen'\n  ) +\n  theme_map()\n\n\n\n\n\n\n\nExercise 7: Contour maps\nEspecially when there are lots of point locations, and those locations start overlapping on a map, it can be tough to visualize areas of higher density. Consider the Starbucks locations in Canada, Mexico, and the US that we mapped earlier:\n\nCode# Point map (we made this earlier)\nggplot(cma_boundaries) + \n  geom_sf() + \n  geom_point(\n    data = starbucks_cma,\n    aes(x = Longitude, y = Latitude),\n    alpha = 0.3,\n    size = 0.2,\n    color = \"darkgreen\"\n  ) +\n  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +\n  theme_map()\n\n\n\n\n\n\n\nNow check out the contour map.\n\nCode# What changed in the plot?\n# What changed in our code?!\nggplot(cma_boundaries) + \n  geom_sf() + \n  geom_density_2d(\n    data = starbucks_cma,\n    aes(x = Longitude, y = Latitude),\n    size = 0.2,\n    color = \"darkgreen\"\n  ) +\n  coord_sf(xlim = c(-179.14, -50), ylim = c(14.54, 83.11)) +\n  theme_map()\n\n\n\n\n\n\n\nExercises Part 3: Choropleth maps\nSpatial data isn’t always in the form of point locations! For example, recall the state and county-level data on presidential elections.\n\nCodeelections_by_state &lt;-  read.csv(\"https://mac-stat.github.io/data/election_2020_by_state.csv\")\nelections_by_counties &lt;- read.csv(\"https://mac-stat.github.io/data/election_2020_county.csv\")\n\n\nIn these datasets, we’re interested in the overall election outcome by region (state or county), not the specific geographic location of some observation. Let’s wrangle our data first.\nWe’ll focus on just a few variables of interest, and create a new variable (repub_20_categories) that discretizes the repub_pct_20 variable into increments of 5 percentage points (for states) or 10 percentage points (for counties):\n\nCode# Don't worry about the code!\n\nelections_by_state &lt;- elections_by_state |&gt; \n  filter(state_abbr != \"DC\") |&gt; \n  select(state_name, state_abbr, repub_pct_20) |&gt; \n  mutate(repub_20_categories = \n           cut(repub_pct_20, \n               breaks = seq(30, 70, by = 5), \n               labels = c(\"30-34\", \"35-39\", \"40-44\", \"45-49\",\n                          \"50-54\", \"55-59\", \"60-64\", \"65-70\"), \n               include.lowest = TRUE))\n\nelections_by_counties &lt;- elections_by_counties |&gt; \n  select(state_name, state_abbr, county_name, county_fips,\n          repub_pct_20, median_age, median_rent) |&gt; \n  mutate(repub_20_categories = \n           cut(repub_pct_20, \n               breaks = seq(0, 100, by = 10),\n               labels = c(\"0-9\", \"10-19\", \"20-29\", \"30-39\", \"40-49\",\n                          \"50-59\", \"60-69\", \"70-79\", \"80-89\", \"90-100\"),\n               include.lowest = TRUE))\n\n# Add 0's at the beginning of any fips_code that's fewer than 5 numbers long\n# Don't worry about the syntax\nelections_by_counties &lt;- elections_by_counties |&gt; \n  mutate(county_fips = as.character(county_fips)) |&gt; \n  mutate(county_fips = \n           ifelse(nchar(county_fips) == 4, paste0(\"0\", county_fips), county_fips))\n\n\nExercise 8: State-level choropleth maps\nPart d\ngeom_map()\nExercise 10: Play around!\n\nCodeggplot(elections_by_counties, aes(map_id = county_fips, fill = median_rent)) +\n  geom_map(map = county_map) +\n  expand_limits(x = county_map$long, y = county_map$lat) +\n  theme_map() +\n  theme(legend.position = \"right\") + \n  coord_equal() + \n  scale_fill_gradientn(name = \"median rent\", colors = c(\"white\", \"lightgreen\", \"darkgreen\"))\n\n\n\n\n\n\nCodeggplot(elections_by_counties, aes(map_id = county_fips, fill = median_age)) +\n  geom_map(map = county_map) +\n  expand_limits(x = county_map$long, y = county_map$lat) +\n  theme_map() +\n  theme(legend.position = \"right\") + \n  coord_equal() + \n  scale_fill_gradientn(name = \"median age\", colors = terrain.colors(10))",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Spatial Viz</span>"
    ]
  },
  {
    "objectID": "ica/ica-effective.html",
    "href": "ica/ica-effective.html",
    "title": "\n13  ica - effective\n",
    "section": "",
    "text": "13.1 Warm-up\nRecall: Benefits of Visualizations",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>ica - effective</span>"
    ]
  },
  {
    "objectID": "ica/ica-effective.html#warm-up",
    "href": "ica/ica-effective.html#warm-up",
    "title": "\n13  ica - effective\n",
    "section": "",
    "text": "Understand what we’re working with:\n\nscales & typical outcomes\noutliers, i.e. unusual cases\npatterns & relationships\n\n\nRefine research questions & inform next steps of our analysis.\nCommunicate our findings and tell a story.\n\nNo One Right Viz\nThere is no one right way to visualize a data set, eg, check out the 100 ways used to visualize one dataset: https://100.datavizproject.com/ The visualized data was featured in this TidyTuesday!\nActivity: Plot Critique\nIn groups:\n\nScroll through the plots.\nIdentify at least 1 plot that you feel illuminates some important aspect of the data.\nIdentify at least 1 plot that does NOT illuminate the data in a good way.\nUgly, Bad, Wrong Viz\nOne way to identify effective viz is to understand what makes a viz ineffective. In the Fundamentals of Data Visualization, Wilke breaks down ineffective viz into 3 categories:\n\nWrong\nThe viz is “objectively incorrect”, as in the numbers / trends being displayed are wrong.\nBad\nThe viz is “unclear, confusing, overly complicated, or deceiving”.\nUgly\nThe viz correct and clear but The aesthetics are problematic.\n\nActivity: Critical Analysis\nLet’s try some critical analysis on specific examples. For your assigned viz, identify the following:\n\nThe story the viz is trying to communicate.\nWhether the viz is good, ugly, bad, wrong, or some combination.\nAreas for improvement.\n\n\nCodelibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nCode#| echo: false\n#| out-width: \"50%\"\n#| fig-cap: \"IMAGE 1. Source: N. Yau, *Visualize This*, 2011, p. 223-225.\"\n#| fig-alt: \"Faceted histograms of Rotten Tomato ratings of triologies, separated by original, sequel, and finale. Median ratings are shown as black points to show decreasing median rating over the series. The lower visual has bars with height corresponding to the Rotten Tomato rating, color green for at least 60% and red for below, faceted by Triology series. Graphic is from Visualize This by Nathan Yau.\"\n\n# IMAGE 1\nknitr::include_graphics(\"https://mac-stat.github.io/images/112/bad_viz/trilogies.gif\")\n\n\n\n\n\n\n\n\n\n\n\nIMAGE 2. Source: N. Yau, Visualize This, 2011, p. 242.\n\n\n\n\n\n\n\nIMAGE 3. Climate change.\n\n\n\n\n\n\n\nIMAGE 4. Source: http://viz.wtf/\n\n\n\n\n\n\n\nIMAGE 5. Source: N. Yau, Visualize This, 2011, p. 220.\n\n\n\n\n\n\n\nIMAGE 6. Source: (https://www.reddit.com/r/dataisugly/comments/vlirox/0_1_19_20_39/)\n\n\n\nFollow-up to Climate Change Plot\n\n\n\n\nIMAGE 3. Climate change.\n\n\n\nEffective & Ineffective Viz Examples\n\nExamples of good viz:\n\nFlowingData’s “Best visualizations of…”\n\n\nExamples of bad viz:\n\nWTF Visualizations\nBad viz in the wild\n\n\nEffective Viz\nYou can take a whole course in Data Viz at Mac! The topic of effective viz is too big and nuanced to boil down into a simple list. Here are some basics:\nProfessionalism\nOnce you’re ready to “share out” your viz, it should have…\n\nmeaningful axis labels\na figure caption (depending upon where the viz will appear)\nAccessibility\nOnce you’re ready to “share out” your viz, it should…\n\nhave “alt text”, a written description of the viz that can be read out by a screen reader (video)\nuse a color palette that is distinguishable across common forms of color blindness\nDesign Details\nIn designing your viz, think about comparison. Good viz make it easy for people to perceive things that are similar and things that are different.\nEthics\nMichael Correll of Tableau Research (pdf) wrote “Data visualizations have a potentially enormous influence on how data are used to make decisions across all areas of human endeavor.” Thus ethics are critical from the data we use, to the plots we build, to the way in which we communicate this work. This is a very broad topic, and we’ll focus here on data visualization alone. Relatedly, and at a minimum:\n\nData viz should not mislead, i.e. “wrong” viz are unethical.**\nYet ethics in data viz goes much deeper. Correll describes three related principles to strive for:\n\nVisibility\nMake the invisible visible. Visualize hidden labor, hidden uncertainty, hidden impacts. Credit your sources, data and otherwise.\nPrivacy\nCollect data with empathy. Encourage small Data, anthropomorphize data, obfuscate data to protect privacy.\nPower\nChallenge structures of power. Support data due process, act as data advocates, pressure unethical analytical behavior.\n\n\nTo this list, Data Feminism authors Catherine D’Ignazio and Lauren F. Klein added:\n\nEmotion & Embodiment\nValue multiple forms of knowledge, including the knowledge that comes from people as living, feeling bodies in the world.\nPluralism\nThe most complete knowledge comes from synthesizing multiple perspectives\nContext\nData are not neutral or objective",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>ica - effective</span>"
    ]
  },
  {
    "objectID": "ica/ica-effective.html#exercises",
    "href": "ica/ica-effective.html#exercises",
    "title": "\n13  ica - effective\n",
    "section": "\n13.2 Exercises",
    "text": "13.2 Exercises\nExercise 1: Professionalism\nLet’s examine weather in 3 Australian locations.\n\nCode# Load tidyverse package for plotting and wrangling\nlibrary(tidyverse)\n\n# Import the data\nweather &lt;- read.csv(\"https://mac-stat.github.io/data/weather_3_locations.csv\") |&gt; \n  mutate(date = as.Date(date))\n\n\nThe following plot is fine for things like homework or just playing around. But we’ll make it more “professional” looking below.\n\nCodeggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) + \n  geom_point()\n\nWarning: Removed 27 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\nPart a\nReplace A, B, C, and D in the code below to:\n\nAdd a short, but descriptive title. Under 10 words.\nChange the x- and y-axis labels, currently just the names of the variables in the dataset. These should be short and include units.\nChange the legend title to “Location” (just for practice, not because it’s better than “location”).\n\n\nCodeggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) + \n  geom_point() + \n  labs(x = \"A\", y = \"B\", title = \"C\", color = \"D\")  \n\nWarning: Removed 27 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\nPart b\nWhen we’re including our plot in an article, paper, book, or other similar outlet, we should (and are expected to) provide a more descriptive figure caption. Typically, this is instead of a title and is more descriptive of what exactly is being plotted.\n\nAdd a figure caption in the top of the chunk.\nInclude your x-axis, y-axis, and legend labels from Part a.\nRender your Rmd and check out how the figure caption appears.\n\n\nCodeggplot(weather, aes(y = temp3pm, x = temp9am, color = location)) + \n  geom_point() + \n  labs(x = \"???\", y = \"???\", color = \"???\")  \n\nWarning: Removed 27 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n???\n\n\n\n\n\nWarning: Removed 27 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n???\n\n\n\n\nExercise 2: Accessibility\nLet’s now make a graphic more accessible.\n\nCodeggplot(weather, aes(x = temp3pm, fill = location)) + \n  geom_density(alpha = 0.5) + \n  labs(x = \"3pm temperature (Celsius)\")  \n\nWarning: Removed 19 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\nDensity plots of 3pm temperatures in 3 Australian locations.\n\n\n\nPart a\nLet’s add some alt text that can be picked up by screen readers. This is a great resource on writing alt text for data viz. In short, whereas figure captions are quick descriptions which assume that the viz is accessible, alt text is a longer description which assumes the viz is not accessible. Alt text should concisely articulate:\n\nWhat your visualization is (e.g. a density plot of 3pm temperatures in Hobart, Uluru, and Wollongong, Australia).\nA 1-sentence description of the most important takeaway.\nA link to your data source if it’s not already in the caption.\n\nAdd appropriate alt text at the top of the chunk, in fig-alt. Then render your qmd, and hover over the image in your rendered html file to check out the alt text.\n\nCodeggplot(weather, aes(x = temp3pm, fill = location)) + \n  geom_density(alpha = 0.5) + \n  labs(x = \"3pm temperature (Celsius)\")  \n\nWarning: Removed 19 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\nDensity plots of 3pm temperatures in 3 Australian locations.\n\n\n\n\n\nWarning: Removed 19 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\nDensity plots of 3pm temperatures in 3 Australian locations.\n\n\n\n\nPart b\nColor is another important accessibility consideration. Let’s check out the color accessibility of our density plot.\n\nRun the ggplot() code from Part a in your console. The viz will pop up in the Plots tab.\nIn the Plots tab, click “Export” then “Save as image”. Save the image somewhere.\nNavigate to https://www.color-blindness.com/coblis-color-blindness-simulator/\n\nAbove the image of crayons (I think it’s crayons?), click “Choose file” and choose the plot file you just saved.\nClick the various simulator buttons (eg: Red-Weak/Protanomaly) to check out how the colors in this plot might appear to others.\nSummarize what you learn. What impact might our color choices have on one’s ability to interpret the viz?\nWhat I saw is that certain colors in the legend had much less contrast depending on the color blindness, meaning that depending on the colors it can be very hard to understand color coding. Also, sometimes a two of the colors would look very similar but the third one would contrast, meaning that the contrasting color was much more noticeable.\nPart c\nWe can change our color schemes! There are many color-blind friendly palettes in R. In the future, we’ll set a default, more color-blind friendly color theme at the top of our Rmds. We can also do this individually for any plot that uses color. Run the chunks below to explore various options.\n\nCodeggplot(weather, aes(x = temp3pm, fill = location)) + \n  geom_density(alpha = 0.5) + \n  labs(x = \"3pm temperature (Celsius)\") + \n  scale_fill_viridis_d()    \n\nWarning: Removed 19 rows containing non-finite outside the scale range\n(`stat_density()`).\n\n\n\n\n\n\n\n\n\nCode# In the color scale line:\n# Change \"fill\" to \"color\" since we use color in the aes()\n# Change \"d\" (discrete) to \"c\" (continuous) since maxtemp is on a continuous scale\nggplot(weather, aes(y = temp3pm, x = temp9am, color = maxtemp)) + \n  geom_point(alpha = 0.5) + \n  labs(x = \"3pm temperature (Celsius)\") + \n  scale_color_viridis_c()\n\nWarning: Removed 27 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nExercise 3: Ethics\nLet’s scratch the surface of ethics in data viz. Central to this discussion is the consideration of impact.\nPart a\nAt a minimum, our data viz should not mislead. Reconsider the climate change example from above. Why is this plot unethical and what impact might it have on policy, public opinion, etc?\n\nPart b\nAgain, data viz ethical considerations go beyond whether or not a plot is misleading. As described in the warm-up, we need to consider: visibility, privacy, power, emotion & embodiment, pluralism, & context. Depending upon the audience and goals of a data viz, addressing these points might require more nuance. Mainly, the viz tools we’ve learned are a great base or foundation, but aren’t the only approaches to data viz. \nPick one or more of the following examples of data viz to discuss with your group. How do the approaches taken:\n\nemphasize one or more of: visibility, privacy, power, emotion, embodiment, pluralism, and/or context?\nimprove upon what we might be able to convey with a simpler bar chart, scatterplot, etc?\n\n\nExample: W.E.B. Du Bois (1868–1963)\nDu Bois (“Doo Boys”) was a “sociologist, socialist, historian, civil rights activist, Pan-Africanist, author, writer, and editor”1. He was also a pioneer in elevating emotion and embodiment in data visualization. For the Paris World Fair of 1900, Du Bois and his team of students from Atlanta University presented 60 data visualizations of the Black experience in America, less than 50 years after the abolishment of slavery. Du Bois noted: “I wanted to set down its aim and method in some outstanding way which would bring my work to notice by the thinking world.” That is, he wanted to increase the impact of his work by partnering technical visualizations with design that better connects to lived experiences. NOTE: This work uses language common to that time period and addresses the topic of slavery. Check out:\n\nA complete set of the data visualizations provided by Anthony Starks (@ajstarks).\nAn article by Allen Hillery (@AlDatavizguy).\n\n\nExample: One person’s experience with long COVID\nNYT article\n\nExample: Decolonizing data viz\nblog post\n\nExample: Visualizing climate change through art\nFutures North with Prof John Kim & Mac students (by Prof Kim, Mac research students)\n\nExample: Personal data collection\nDear Data\n\nPart c\nFor a deeper treatment of similar topics, and more examples, read Data Feminism.\n\nExercise 4: Critique\nPractice critiquing some more complicated data viz listed at Modern Data Science with R, Exercise 2.5.\nThink about the following questions:\n\nWhat story does the data graphic tell? What is the main message that you take away from it?\nCan the data graphic be described in terms of the Grammar of Graphics (frame, glyphs, aesthetics, facet, scale, guide)? If so, please describe.\nCritique and/or praise the visualization choices made by the designer. Do they work? Are they misleading? Thought-provoking? Are there things that you would have done differently?\n\n\nExercise 5: Design Details\nThis final exercise is just “food for thought”. It’s more of a discussion than an exercise, and gets into some of the finer design details and data viz theory. Go as deep or not deep as you’d like here.\nIn refining the details of our data viz, Visualize This and Storytelling with Data provide some of their guiding principles. But again, every context is different.\n\nPut yourself in a reader’s shoes. What parts of the data need explanation?\nShine a light on your data. Try to remove any “chart junk” that distracts from the data.\nVary color and style to emphasize the viz elements that are most important to the story you’re telling.\nIt is easier to judge length than it is to judge area or angles.\nBe thoughtful about how your categories are ordered for categorical data.\n\nGetting into even more of the nitty gritty, we need to be mindful of what geometric elements and aesthetics we use. The following elements/aesthetics are listed in roughly descending order of human ability to perceive and compare nearby objects:2\n\nPosition\nLength\nAngle\nDirection\nShape (but only a very few different shapes)\nArea\nVolume\nShade\nColor. (Color is the most difficult, because it is a 3-dimensional quantity.)\n\nFinally, here are some facts to keep in mind about visual perception from Now You See It.\nPart a: Selectivity\nVisual perception is selective, and our attention is often drawn to contrasts from the norm.\nImplication: We should design visualizations so that the features we want to highlight stand out in contrast from those that are not worth the audience’s attention.\nExample: What stands out in this example image? This is originally from C. Ware, Information Visualization: Perception for Design, 2004? Source: S. Few, Now You See It, 2009, p. 33.\n\nPart b: Familiarity\nOur eyes are drawn to familiar patterns. We observe what we know and expect.\nImplication: Visualizations work best when they display information as patterns that familiar and easy to spot.\nExample: Do you notice anything embedded in this rose image from coolbubble.com? Source: S. Few, Now You See It, 2009, p. 34.\n\nPart c: Revisit\nRevisit Part b. Do you notice anything in the shadows? Go to https://mac-stat.github.io/images/112/rose2.png for an image.\n\nWrapping up\nIf you finish early:\n\nWork on homework if not done already\nComplete any activities you haven’t finished yet, eg, spatial viz, the optional but fun exercises in the Multivariate viz and Bivariate viz activities.\nIf you’ve done all that, explore some datasets in TidyTuesday.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>ica - effective</span>"
    ]
  },
  {
    "objectID": "ica/ica-effective.html#solutions",
    "href": "ica/ica-effective.html#solutions",
    "title": "\n13  ica - effective\n",
    "section": "\n13.3 Solutions",
    "text": "13.3 Solutions\nThe exercises today are discussion based. There are no “solutions”. Happy to chat in office hours about any ideas here!",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>ica - effective</span>"
    ]
  },
  {
    "objectID": "ica/ica-effective.html#footnotes",
    "href": "ica/ica-effective.html#footnotes",
    "title": "\n13  ica - effective\n",
    "section": "",
    "text": "https://en.wikipedia.org/wiki/W._E._B._Du_Bois↩︎\nB. S. Baumer, D. T. Kaplan, and N. J. Horton, Modern Data Science with R, 2017, p. 15.↩︎",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>ica - effective</span>"
    ]
  },
  {
    "objectID": "ica/ica-joining.html",
    "href": "ica/ica-joining.html",
    "title": "\n14  joining\n",
    "section": "",
    "text": "14.1 Review\nWhere are we? Data preparation\nThus far, we’ve learned how to:",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>joining</span>"
    ]
  },
  {
    "objectID": "ica/ica-joining.html#review",
    "href": "ica/ica-joining.html#review",
    "title": "\n14  joining\n",
    "section": "",
    "text": "arrange() our data in a meaningful order\nsubset the data to only filter() the rows and select() the columns of interest\n\nmutate() existing variables and define new variables\n\nsummarize() various aspects of a variable, both overall and by group (group_by())\nreshape our data to fit the task at hand (pivot_longer(), pivot_wider())",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>joining</span>"
    ]
  },
  {
    "objectID": "ica/ica-joining.html#motivation",
    "href": "ica/ica-joining.html#motivation",
    "title": "\n14  joining\n",
    "section": "\n14.2 Motivation",
    "text": "14.2 Motivation\nIn practice, we often have to collect and combine data from various sources in order to address our research questions. Example:\n\nWhat are the best predictors of album sales?\nCombine:\n\nSpotify data on individual songs (eg: popularity, genre, characteristics)\nsales data on individual songs\n\n\nWhat are the best predictors of flight delays?\nCombine:\n\ndata on individual flights including airline, starting airport, and destination airport\ndata on different airlines (eg: ticket prices, reliability, etc)\ndata on different airports (eg: location, reliability, etc)\n\n\n\nExample 1\nConsider the following (made up) data on students and course enrollments:\n\nCodestudents_1 &lt;- data.frame(\n  student = c(\"A\", \"B\", \"C\"),\n  class = c(\"STAT 101\", \"GEOL 101\", \"ANTH 101\")\n)\n\n# Check it out\nstudents_1\n\n  student    class\n1       A STAT 101\n2       B GEOL 101\n3       C ANTH 101\n\n\n\nCodeenrollments_1 &lt;- data.frame(\n  class = c(\"STAT 101\", \"ART 101\", \"GEOL 101\"),\n  enrollment = c(18, 17, 24)\n)\n\n# Check it out\nenrollments_1\n\n     class enrollment\n1 STAT 101         18\n2  ART 101         17\n3 GEOL 101         24\n\n\nOur goal is to combine or join these datasets into one. For reference, here they are side by side:\n\nFirst, consider the following:\n\nWhat variable or key do these datasets have in common? Thus by what information can we match the observations in these datasets?\nRelative to this key, what info does students_1 have that enrollments_1 doesn’t?\nRelative to this key, what info does enrollments_1 have that students_1 doesn’t?",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>joining</span>"
    ]
  },
  {
    "objectID": "ica/ica-joining.html#mutating-joins-left-inner-full",
    "href": "ica/ica-joining.html#mutating-joins-left-inner-full",
    "title": "\n14  joining\n",
    "section": "\n14.3 Mutating Joins: left, inner, full\n",
    "text": "14.3 Mutating Joins: left, inner, full\n\nExample 2\nThere are various ways to join these datasets:\n\nLet’s learn by doing. First, try the left_join() function:\n\nCodelibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nCodestudents_1 |&gt; \n  left_join(enrollments_1)\n\nJoining with `by = join_by(class)`\n\n\n  student    class enrollment\n1       A STAT 101         18\n2       B GEOL 101         24\n3       C ANTH 101         NA\n\n\n\nWhat did this do? What are the roles of students_1 (the left table) and enrollments_1 (the right table)?\nWhat, if anything, would change if we reversed the order of the data tables? Think about it, then try.\n\n\nCodelibrary(tidyverse)\nstudents_1 |&gt; \n  right_join(enrollments_1)\n\nJoining with `by = join_by(class)`\n\n\n  student    class enrollment\n1       A STAT 101         18\n2       B GEOL 101         24\n3    &lt;NA&gt;  ART 101         17\n\n\nExample 3\nNext, explore how our datasets are joined using inner_join():\n\n\nCodestudents_1 |&gt; \n  inner_join(enrollments_1)\n\nJoining with `by = join_by(class)`\n\n\n  student    class enrollment\n1       A STAT 101         18\n2       B GEOL 101         24\n\n\n\nWhat did this do? What are the roles of students_1 (the left table) and enrollments_1 (the right table)?\nWhat, if anything, would change if we reversed the order of the data tables? Think about it, then try.\n\n\nCodeenrollments_1 |&gt; \n  inner_join(students_1)\n\nJoining with `by = join_by(class)`\n\n\n     class enrollment student\n1 STAT 101         18       A\n2 GEOL 101         24       B\n\n\nExample 4\nNext, explore how our datasets are joined using full_join():\n\n\nCodestudents_1 |&gt; \n  full_join(enrollments_1)\n\nJoining with `by = join_by(class)`\n\n\n  student    class enrollment\n1       A STAT 101         18\n2       B GEOL 101         24\n3       C ANTH 101         NA\n4    &lt;NA&gt;  ART 101         17\n\n\n\nWhat did this do? What are the roles of students_1 (the left table) and enrollments_1 (the right table)?\nWhat, if anything, would change if we reversed the order of the data tables? Think about it, then try.\n\n\nCodeenrollments_1 |&gt;\n  full_join(students_1)\n\nJoining with `by = join_by(class)`\n\n\n     class enrollment student\n1 STAT 101         18       A\n2  ART 101         17    &lt;NA&gt;\n3 GEOL 101         24       B\n4 ANTH 101         NA       C\n\n\n\n14.3.1 Summary\nMutating joins add new variables (columns) to the left data table from matching observations in the right table:\nleft_data |&gt; mutating_join(right_data)\nThe most common mutating joins are:\n\nleft_join()\nKeeps all observations from the left, but discards any observations in the right that do not have a match in the left.1\ninner_join()\nKeeps only the observations from the left with a match in the right.\nfull_join()\nKeeps all observations from the left and the right. (This is less common than left_join() and inner_join()).\n\nNOTE: When an observation in the left table has multiple matches in the right table, these mutating joins produce a separate observation in the new table for each match.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>joining</span>"
    ]
  },
  {
    "objectID": "ica/ica-joining.html#filtering-joins-semi-anti",
    "href": "ica/ica-joining.html#filtering-joins-semi-anti",
    "title": "\n14  joining\n",
    "section": "\n14.4 Filtering Joins: semi, anti\n",
    "text": "14.4 Filtering Joins: semi, anti\n\nMutating joins combine information, thus increase the number of columns in a dataset (like mutate()). Filtering joins keep only certain observations in one dataset (like filter()), not based on rules related to any variables in the dataset, but on the observations that exist in another dataset. This is useful when we merely care about the membership or non-membership of an observation in the other dataset, not the raw data itself.\nExample 5\nIn our example data, suppose enrollments_1 only included courses being taught in the Theater building:\n\n\nCodestudents_1 |&gt; \n  semi_join(enrollments_1)\n\nJoining with `by = join_by(class)`\n\n\n  student    class\n1       A STAT 101\n2       B GEOL 101\n\n\n\nWhat did this do? What info would it give us?\nThis tells us the rows where students_1 and enrollments_1 have matching information\nHow does semi_join() differ from inner_join()?\nsemi_join() only keeps the columns from the left dataset\nWhat, if anything, would change if we reversed the order of the data tables? Think about it, then try.\nThe columns retained would be from enrollments_1\n\n\nCodeenrollments_1 |&gt; \n  semi_join(students_1)\n\nJoining with `by = join_by(class)`\n\n\n     class enrollment\n1 STAT 101         18\n2 GEOL 101         24\n\n\nExample 6\nLet’s try another filtering join for our example data:\n\n\nCodestudents_1 |&gt; \n  anti_join(enrollments_1)\n\nJoining with `by = join_by(class)`\n\n\n  student    class\n1       C ANTH 101\n\n\n\nWhat did this do? What info would it give us?\nThis showed the rows that had N/A values in the join, and only showed the rows from students_1\nWhat, if anything, would change if we reversed the order of the data tables? Think about it, then try.\nIt will only show the rows from enrollments_1\n\n\nCodeenrollments_1 |&gt; \n  anti_join(students_1)\n\nJoining with `by = join_by(class)`\n\n\n    class enrollment\n1 ART 101         17\n\n\n\n14.4.1 Summary\nFiltering joins keep specific observations from the left table based on whether they match an observation in the right table.\n\nsemi_join()\nDiscards any observations in the left table that do not have a match in the right table. If there are multiple matches of right cases to a left case, it keeps just one copy of the left case.\nanti_join()\nDiscards any observations in the left table that do have a match in the right table.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>joining</span>"
    ]
  },
  {
    "objectID": "ica/ica-joining.html#summary-of-all-joins",
    "href": "ica/ica-joining.html#summary-of-all-joins",
    "title": "\n14  joining\n",
    "section": "\n14.5 Summary of All Joins",
    "text": "14.5 Summary of All Joins",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>joining</span>"
    ]
  },
  {
    "objectID": "ica/ica-joining.html#exercises",
    "href": "ica/ica-joining.html#exercises",
    "title": "\n14  joining\n",
    "section": "\n14.6 Exercises",
    "text": "14.6 Exercises\nExercise 1: Where are my keys?\nPart a\nDefine two new datasets, with different students and courses:\n\nCodestudents_2 &lt;- data.frame(\n  student = c(\"D\", \"E\", \"F\"),\n  class = c(\"COMP 101\", \"BIOL 101\", \"POLI 101\")\n)\n\n# Check it out\nstudents_2\n\n  student    class\n1       D COMP 101\n2       E BIOL 101\n3       F POLI 101\n\nCodeenrollments_2 &lt;- data.frame(\n  course = c(\"ART 101\", \"BIOL 101\", \"COMP 101\"),\n  enrollment = c(18, 20, 19)\n)\n\n# Check it out\nenrollments_2\n\n    course enrollment\n1  ART 101         18\n2 BIOL 101         20\n3 COMP 101         19\n\n\nTo connect the course enrollments to the students’ courses, try do a left_join(). You get an error! Identify the problem by reviewing the error message and the datasets we’re trying to join.\n\nCode# eval = FALSE: don't evaluate this chunk when knitting. it produces an error.\nstudents_2 |&gt; \n  left_join(enrollments_2)\n\n\nPart b\nThe problem is that course name, the key or variable that links these two datasets, is labeled differently: class in the students_2 data and course in the enrollments_2 data. Thus we have to specify these keys in our code:\n\nCodestudents_2 |&gt; \n  left_join(enrollments_2, join_by(class == course))\n\n  student    class enrollment\n1       D COMP 101         19\n2       E BIOL 101         20\n3       F POLI 101         NA\n\n\n\nCode# The order of the keys is important:\n# join_by(\"left data key\" == \"right data key\")\n# The order is mixed up here, thus we get an error:\nstudents_2 |&gt; \n  left_join(enrollments_2, join_by(course == class))\n\n\nPart c\nDefine another set of fake data which adds grade information:\n\nCode# Add student grades in each course\nstudents_3 &lt;- data.frame(\n  student = c(\"Y\", \"Y\", \"Z\", \"Z\"),\n  class = c(\"COMP 101\", \"BIOL 101\", \"POLI 101\", \"COMP 101\"),\n  grade = c(\"B\", \"S\", \"C\", \"A\")\n)\n\n# Check it out\nstudents_3\n\n  student    class grade\n1       Y COMP 101     B\n2       Y BIOL 101     S\n3       Z POLI 101     C\n4       Z COMP 101     A\n\nCode# Add average grades in each course\nenrollments_3 &lt;- data.frame(\n  class = c(\"ART 101\", \"BIOL 101\",\"COMP 101\"),\n  grade = c(\"B\", \"A\", \"A-\"),\n  enrollment = c(20, 18, 19)\n)\n\n# Check it out\nenrollments_3\n\n     class grade enrollment\n1  ART 101     B         20\n2 BIOL 101     A         18\n3 COMP 101    A-         19\n\n\nTry doing a left_join() to link the students’ classes to their enrollment info. Did this work? Try and figure out the culprit by examining the output.\n\nCodestudents_3 |&gt; \n  left_join(enrollments_3)\n\nJoining with `by = join_by(class, grade)`\n\n\n  student    class grade enrollment\n1       Y COMP 101     B         NA\n2       Y BIOL 101     S         NA\n3       Z POLI 101     C         NA\n4       Z COMP 101     A         NA\n\n\nPart d\nThe issue here is that our datasets have 2 column names in common: class and grade. BUT grade is measuring 2 different things here: individual student grades in students_3 and average student grades in enrollments_3. Thus it doesn’t make sense to try to join the datasets with respect to this variable. We can again solve this by specifying that we want to join the datasets using the class variable as a key. What are grade.x and grade.y?\n\nCodestudents_3 |&gt; \n  left_join(enrollments_3, join_by(class == class))\n\n  student    class grade.x grade.y enrollment\n1       Y COMP 101       B      A-         19\n2       Y BIOL 101       S       A         18\n3       Z POLI 101       C    &lt;NA&gt;         NA\n4       Z COMP 101       A      A-         19\n\n\nExercise 2: More small practice\nBefore applying these ideas to bigger datasets, let’s practice identifying which join is appropriate in different scenarios. Define the following fake data on voters (people who have voted) and contact info for voting age adults (people who could vote):\n\nCode# People who have voted\nvoters &lt;- data.frame(\n  id = c(\"A\", \"D\", \"E\", \"F\", \"G\"),\n  times_voted = c(2, 4, 17, 6, 20)\n)\n\nvoters\n\n  id times_voted\n1  A           2\n2  D           4\n3  E          17\n4  F           6\n5  G          20\n\nCode# Contact info for voting age adults\ncontact &lt;- data.frame(\n  name = c(\"A\", \"B\", \"C\", \"D\"),\n  address = c(\"summit\", \"grand\", \"snelling\", \"fairview\"),\n  age = c(24, 89, 43, 38)\n)\n\ncontact\n\n  name  address age\n1    A   summit  24\n2    B    grand  89\n3    C snelling  43\n4    D fairview  38\n\n\nUse the appropriate join for each prompt below. In each case, think before you type:\n\nWhat dataset goes on the left?\nWhat do you want the resulting dataset to look like? How many rows and columns will it have?\n\n\nCode# 1. We want contact info for people who HAVEN'T voted\ncontact |&gt;\n  anti_join(voters, join_by(name == id))\n\n  name  address age\n1    B    grand  89\n2    C snelling  43\n\nCode# 2. We want contact info for people who HAVE voted\ncontact |&gt;\n  semi_join(voters, join_by(name == id))\n\n  name  address age\n1    A   summit  24\n2    D fairview  38\n\nCode# 3. We want any data available on each person\ncontact |&gt;\n  full_join(voters, join_by(name == id))\n\n  name  address age times_voted\n1    A   summit  24           2\n2    B    grand  89          NA\n3    C snelling  43          NA\n4    D fairview  38           4\n5    E     &lt;NA&gt;  NA          17\n6    F     &lt;NA&gt;  NA           6\n7    G     &lt;NA&gt;  NA          20\n\nCode# 4. When possible, we want to add contact info to the voting roster\nvoters |&gt;\n  inner_join(contact, join_by(id == name))\n\n  id times_voted  address age\n1  A           2   summit  24\n2  D           4 fairview  38\n\n\nExercise 3: Bigger datasets\nLet’s apply these ideas to some bigger datasets. In grades, each row is a student-class pair with information on:\n\n\nsid = student ID\n\ngrade = student’s grade\n\nsessionID = an identifier of the class section\n\n\n\n     sid grade   sessionID\n1 S31185    D+ session1784\n2 S31185    B+ session1785\n3 S31185    A- session1791\n4 S31185    B+ session1792\n5 S31185    B- session1794\n6 S31185    C+ session1795\n\n\nIn courses, each row corresponds to a class section with information on:\n\n\nsessionID = an identifier of the class section\n\ndept = department\n\nlevel = course level (eg: 100)\n\nsem = semester\n\nenroll = enrollment (number of students)\n\niid = instructor ID\n\n\n\n    sessionID dept level    sem enroll     iid\n1 session1784    M   100 FA1991     22 inst265\n2 session1785    k   100 FA1991     52 inst458\n3 session1791    J   100 FA1993     22 inst223\n4 session1792    J   300 FA1993     20 inst235\n5 session1794    J   200 FA1993     22 inst234\n6 session1795    J   200 SP1994     26 inst230\n\n\nUse R code to take a quick glance at the data.\n\nCode# How many observations (rows) and variables (columns) are there in the grades data?\nstr(grades)\n\n'data.frame':   5844 obs. of  3 variables:\n $ sid      : chr  \"S31185\" \"S31185\" \"S31185\" \"S31185\" ...\n $ grade    : chr  \"D+\" \"B+\" \"A-\" \"B+\" ...\n $ sessionID: chr  \"session1784\" \"session1785\" \"session1791\" \"session1792\" ...\n\nCode# How many observations (rows) and variables (columns) are there in the courses data?\nstr(courses)\n\n'data.frame':   1718 obs. of  6 variables:\n $ sessionID: chr  \"session1784\" \"session1785\" \"session1791\" \"session1792\" ...\n $ dept     : chr  \"M\" \"k\" \"J\" \"J\" ...\n $ level    : int  100 100 100 300 200 200 200 100 300 100 ...\n $ sem      : chr  \"FA1991\" \"FA1991\" \"FA1993\" \"FA1993\" ...\n $ enroll   : int  22 52 22 20 22 26 25 38 16 43 ...\n $ iid      : chr  \"inst265\" \"inst458\" \"inst223\" \"inst235\" ...\n\n\nExercise 4: Class size\nHow big are the classes?\nPart a\nBefore digging in, note that some courses are listed twice in the courses data:\n\nCodecourses |&gt; \n  count(sessionID) |&gt; \n  filter(n &gt; 1)\n\n     sessionID n\n1  session2047 2\n2  session2067 2\n3  session2448 2\n4  session2509 2\n5  session2541 2\n6  session2824 2\n7  session2826 2\n8  session2862 2\n9  session2897 2\n10 session3046 2\n11 session3057 2\n12 session3123 2\n13 session3243 2\n14 session3257 2\n15 session3387 2\n16 session3400 2\n17 session3414 2\n18 session3430 2\n19 session3489 2\n20 session3524 2\n21 session3629 2\n22 session3643 2\n23 session3821 2\n\n\nIf we pick out just 1 of these, we learn that some courses are cross-listed in multiple departments:\n\nCodecourses |&gt; \n  filter(sessionID == \"session2047\")\n\n    sessionID dept level    sem enroll     iid\n1 session2047    g   100 FA2001     12 inst436\n2 session2047    m   100 FA2001     28 inst436\n\n\nFor our class size exploration, obtain the total enrollments in each sessionID, combining any cross-listed sections. Save this as courses_combined. NOTE: There’s no joining to do here!\n\nCodecourses_combined &lt;- courses |&gt;\n  group_by(sessionID) |&gt;\n  summarise(enroll = sum(enroll))\n\nstr(courses_combined)\n\ntibble [1,695 × 2] (S3: tbl_df/tbl/data.frame)\n $ sessionID: chr [1:1695] \"session1784\" \"session1785\" \"session1791\" \"session1792\" ...\n $ enroll   : int [1:1695] 22 52 22 20 22 26 25 38 16 43 ...\n\nCodehead(courses_combined)\n\n# A tibble: 6 × 2\n  sessionID   enroll\n  &lt;chr&gt;        &lt;int&gt;\n1 session1784     22\n2 session1785     52\n3 session1791     22\n4 session1792     20\n5 session1794     22\n6 session1795     26\n\n\nPart b\nLet’s first examine the question of class size from the administration’s viewpoint. To this end, calculate the median class size across all class sections. (The median is the middle or 50th percentile. Unlike the mean, it’s not skewed by outliers.) THINK FIRST:\n\nWhich of the 2 datasets do you need to answer this question? One? Both?\nIf you need course information, use courses_combined not courses.\nDo you have to do any joining? If so, which dataset will go on the left, i.e. which dataset includes your primary observations of interest? Which join function will you need?\n\n\nCodecourses_combined |&gt;\n  summarize(median = median(enroll))\n\n# A tibble: 1 × 1\n  median\n   &lt;int&gt;\n1     18\n\n\nPart c\nBut how big are classes from the student perspective? To this end, calculate the median class size for each individual student. Once you have the correct output, store it as student_class_size. THINK FIRST:\n\nWhich of the 2 datasets do you need to answer this question? One? Both?\nIf you need course information, use courses_combined not courses.\nDo you have to do any joining? If so, which dataset will go on the left, i.e. which dataset includes your primary observations of interest? Which join function will you need?\n\n\nCodehead(grades)\n\n     sid grade   sessionID\n1 S31185    D+ session1784\n2 S31185    B+ session1785\n3 S31185    A- session1791\n4 S31185    B+ session1792\n5 S31185    B- session1794\n6 S31185    C+ session1795\n\nCodehead(courses_combined)\n\n# A tibble: 6 × 2\n  sessionID   enroll\n  &lt;chr&gt;        &lt;int&gt;\n1 session1784     22\n2 session1785     52\n3 session1791     22\n4 session1792     20\n5 session1794     22\n6 session1795     26\n\nCodestudent_class_size &lt;- grades |&gt;\n  full_join(courses_combined, join_by(sessionID == sessionID)) |&gt;\n  group_by(sid) |&gt;\n  summarise(median_class_size = median(enroll))\n\nhead(student_class_size)\n\n# A tibble: 6 × 2\n  sid    median_class_size\n  &lt;chr&gt;              &lt;dbl&gt;\n1 S31185              23.5\n2 S31188              21  \n3 S31191              25  \n4 S31194              15  \n5 S31197              24  \n6 S31200              21  \n\n\nPart d\nThe median class size varies from student to student. To get a sense for the typical student experience and range in student experiences, construct and discuss a histogram of the median class sizes experienced by the students.\n\nCodehead(grades)\n\n     sid grade   sessionID\n1 S31185    D+ session1784\n2 S31185    B+ session1785\n3 S31185    A- session1791\n4 S31185    B+ session1792\n5 S31185    B- session1794\n6 S31185    C+ session1795\n\nCodeggplot(student_class_size, aes(x = median_class_size)) + \n  geom_histogram(color = \"white\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nExercise 5: Narrowing in on classes\nPart a\nShow data on the students that enrolled in session1986. THINK FIRST: Which of the 2 datasets do you need to answer this question? One? Both?\n\nCodegrades |&gt;\n  filter(sessionID == \"session1986\")\n\n     sid grade   sessionID\n1 S31401    B+ session1986\n2 S32247     B session1986\n\n\nPart b\nBelow is a dataset with all courses in department E:\n\nCodedept_E &lt;- courses |&gt; \n  filter(dept == \"E\")\n\n\nWhat students enrolled in classes in department E? (We just want info on the students, not the classes.)\n\nCodegrades |&gt;\n  semi_join(dept_E, join_by(sessionID == sessionID))\n\n      sid grade   sessionID\n1  S31245     A session2326\n2  S31470     B session3658\n3  S31470     B session3798\n4  S31470     A session3799\n5  S31938     A session2326\n6  S31968     A session3104\n7  S32022     A session3798\n8  S32046    A- session2326\n9  S32226     A session2326\n10 S32415     B session2835\n11 S32415    B+ session3799\n12 S32484    A- session3658\n\n\nExercise 6: All the wrangling\nUse all of your wrangling skills to answer the following prompts! THINK FIRST:\n\nThink about what tables you might need to join (if any). Identify the corresponding variables to match.\nYou’ll need an extra table to convert grades to grade point averages:\n\n\nCodegpa_conversion &lt;- tibble(\n  grade = c(\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"NC\", \"AU\", \"S\"), \n  gp = c(4.3, 4, 3.7, 3.3, 3, 2.7, 2.3, 2, 1.7, 1.3, 1, 0.7, 0, NA, NA)\n)\n\ngpa_conversion\n\n# A tibble: 15 × 2\n   grade    gp\n   &lt;chr&gt; &lt;dbl&gt;\n 1 A+      4.3\n 2 A       4  \n 3 A-      3.7\n 4 B+      3.3\n 5 B       3  \n 6 B-      2.7\n 7 C+      2.3\n 8 C       2  \n 9 C-      1.7\n10 D+      1.3\n11 D       1  \n12 D-      0.7\n13 NC      0  \n14 AU     NA  \n15 S      NA  \n\n\nPart a\nHow many total student enrollments are there in each department? Order from high to low.\n\nCodecourses_combined |&gt;\n  left_join(courses, join_by(sessionID == sessionID)) |&gt;\n  left_join(grades) |&gt;\n  group_by(dept) |&gt;\n  summarize(total_in_dept = sum(enroll.x)) |&gt;\n  arrange(desc(total_in_dept))\n\nJoining with `by = join_by(sessionID)`\n\n\nWarning in left_join(left_join(courses_combined, courses, join_by(sessionID == : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 57 of `x` matches multiple rows in `y`.\nℹ Row 1931 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n# A tibble: 40 × 2\n   dept  total_in_dept\n   &lt;chr&gt;         &lt;int&gt;\n 1 d             15526\n 2 m             11918\n 3 j             10198\n 4 M              9503\n 5 G              8733\n 6 F              8357\n 7 W              7629\n 8 D              7535\n 9 O              6327\n10 C              6045\n# ℹ 30 more rows\n\n\nPart b\nWhat’s the grade-point average (GPA) for each student?\n\nCodegrades |&gt;\n  left_join(gpa_conversion) |&gt;\n  group_by(sid) |&gt;\n  summarize(gpa = mean(gp))\n\nJoining with `by = join_by(grade)`\n\n\n# A tibble: 443 × 2\n   sid      gpa\n   &lt;chr&gt;  &lt;dbl&gt;\n 1 S31185  2.41\n 2 S31188 NA   \n 3 S31191 NA   \n 4 S31194  3.36\n 5 S31197  3.35\n 6 S31200  2.2 \n 7 S31203  3.82\n 8 S31206  2.46\n 9 S31209 NA   \n10 S31212  3.67\n# ℹ 433 more rows\n\n\nPart c\nWhat’s the median GPA across all students?\n\nCodegrades |&gt;\n  left_join(gpa_conversion) |&gt;\n  summarize(median_gpa = median(gp, na.rm = TRUE))\n\nJoining with `by = join_by(grade)`\n\n\n  median_gpa\n1        3.7\n\n\nPart d\nWhat fraction of grades are below B+?\n\nCodeglimpse(grades)\n\nRows: 5,844\nColumns: 3\n$ sid       &lt;chr&gt; \"S31185\", \"S31185\", \"S31185\", \"S31185\", \"S31185\", \"S31185\", …\n$ grade     &lt;chr&gt; \"D+\", \"B+\", \"A-\", \"B+\", \"B-\", \"C+\", \"B-\", \"NC\", \"C\", \"C+\", \"…\n$ sessionID &lt;chr&gt; \"session1784\", \"session1785\", \"session1791\", \"session1792\", …\n\nCodegrades |&gt;\n  left_join(gpa_conversion) |&gt;\n  mutate(less_than_BPlus = gp &lt; 3.3) |&gt;\n  group_by(less_than_BPlus) |&gt;\n  count(less_than_BPlus)\n\nJoining with `by = join_by(grade)`\n\n\n# A tibble: 3 × 2\n# Groups:   less_than_BPlus [3]\n  less_than_BPlus     n\n  &lt;lgl&gt;           &lt;int&gt;\n1 FALSE            3890\n2 TRUE             1539\n3 NA                415\n\n\nPart e\nWhat’s the grade-point average for each instructor? Order from low to high.\n\nCodegrades |&gt;\n  left_join(courses) |&gt;\n  left_join(gpa_conversion) |&gt;\n  group_by(iid) |&gt;\n  summarize(grade_point_average = mean(gp, na.rm = TRUE)) |&gt;\n  arrange(grade_point_average)\n\nJoining with `by = join_by(sessionID)`\n\n\nWarning in left_join(grades, courses): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 64 of `x` matches multiple rows in `y`.\nℹ Row 807 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\nJoining with `by = join_by(grade)`\n\n\n# A tibble: 364 × 2\n   iid     grade_point_average\n   &lt;chr&gt;                 &lt;dbl&gt;\n 1 inst265                1.3 \n 2 inst444                1.7 \n 3 inst513                1.85\n 4 inst200                2   \n 5 inst507                2.2 \n 6 inst445                2.3 \n 7 inst420                2.6 \n 8 inst262                2.65\n 9 inst176                2.66\n10 inst234                2.7 \n# ℹ 354 more rows\n\n\nPart f\nCHALLENGE: Estimate the grade-point average for each department, and sort from low to high. NOTE: Don’t include cross-listed courses. Students in cross-listed courses could be enrolled under either department, and we do not know which department to assign the grade to. HINT: You’ll need to do multiple joins.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>joining</span>"
    ]
  },
  {
    "objectID": "ica/ica-joining.html#solutions",
    "href": "ica/ica-joining.html#solutions",
    "title": "\n14  joining\n",
    "section": "\n14.7 Solutions",
    "text": "14.7 Solutions\n\nClick for Solutions\nExample 1\n\nclass\na student that took ANTH 101\ndata on ART 101\nExample 2\n\nWhat did this do? Linked course info to all students in students_1\n\nWhich observations from students_1 (the left table) were retained? All of them.\nWhich observations from enrollments_1 (the right table) were retained? Only STAT and GEOL, those that matched the students.\nWhat, if anything, would change if we reversed the order of the data tables? Think about it, then try. We retain the courses, not students.\n\n\nCodeenrollments_1 |&gt; \n  left_join(students_1)\n\nJoining with `by = join_by(class)`\n\n\n     class enrollment student\n1 STAT 101         18       A\n2  ART 101         17    &lt;NA&gt;\n3 GEOL 101         24       B\n\n\nExample 3\n\nWhich observations from students_1 (the left table) were retained? A and B, only those with enrollment info.\nWhich observations from enrollments_1 (the right table) were retained? STAT and GEOL, only those with studen info.\nWhat, if anything, would change if we reversed the order of the data tables? Think about it, then try. Same info, different column order.\n\n\nCodeenrollments_1 |&gt; \n    inner_join(students_1)\n\nJoining with `by = join_by(class)`\n\n\n     class enrollment student\n1 STAT 101         18       A\n2 GEOL 101         24       B\n\n\nExample 4\n\nWhich observations from students_1 (the left table) were retained? All\nWhich observations from enrollments_1 (the right table) were retained? All\nWhat, if anything, would change if we reversed the order of the data tables? Think about it, then try. Same data, different order.\n\n\nCodeenrollments_1 |&gt; \n    full_join(students_1)\n\nJoining with `by = join_by(class)`\n\n\n     class enrollment student\n1 STAT 101         18       A\n2  ART 101         17    &lt;NA&gt;\n3 GEOL 101         24       B\n4 ANTH 101         NA       C\n\n\nExample 5\n\nWhich observations from students_1 (the left table) were retained? Only those with enrollment info.\nWhich observations from enrollments_1 (the right table) were retained? None.\nWhat, if anything, would change if we reversed the order of the data tables? Think about it, then try. Same data, different order.\n\n\nCodeenrollments_1 |&gt; \n  semi_join(students_1)\n\nJoining with `by = join_by(class)`\n\n\n     class enrollment\n1 STAT 101         18\n2 GEOL 101         24\n\n\nExample 6\n\nWhich observations from students_1 (the left table) were retained? Only C, the one without enrollment info.\nWhich observations from enrollments_1 (the right table) were retained? None.\nWhat, if anything, would change if we reversed the order of the data tables? Think about it, then try. Retain only ART 101, the course with no student info.\n\n\nCodeenrollments_1 |&gt; \n  anti_join(students_1)\n\nJoining with `by = join_by(class)`\n\n\n    class enrollment\n1 ART 101         17\n\n\nExercise 2: More small practice\n\nCode# 1. We want contact info for people who HAVEN'T voted\ncontact |&gt; \n  anti_join(voters, join_by(name == id))\n\n  name  address age\n1    B    grand  89\n2    C snelling  43\n\nCode# 2. We want contact info for people who HAVE voted\ncontact |&gt; \n  semi_join(voters, join_by(name == id))\n\n  name  address age\n1    A   summit  24\n2    D fairview  38\n\nCode# 3. We want any data available on each person\ncontact |&gt; \n  full_join(voters, join_by(name == id))\n\n  name  address age times_voted\n1    A   summit  24           2\n2    B    grand  89          NA\n3    C snelling  43          NA\n4    D fairview  38           4\n5    E     &lt;NA&gt;  NA          17\n6    F     &lt;NA&gt;  NA           6\n7    G     &lt;NA&gt;  NA          20\n\nCodevoters |&gt; \n  full_join(contact, join_by(id == name))\n\n  id times_voted  address age\n1  A           2   summit  24\n2  D           4 fairview  38\n3  E          17     &lt;NA&gt;  NA\n4  F           6     &lt;NA&gt;  NA\n5  G          20     &lt;NA&gt;  NA\n6  B          NA    grand  89\n7  C          NA snelling  43\n\nCode# 4. We want to add contact info, when possible, to the voting roster\nvoters |&gt; \n  left_join(contact, join_by(id == name))\n\n  id times_voted  address age\n1  A           2   summit  24\n2  D           4 fairview  38\n3  E          17     &lt;NA&gt;  NA\n4  F           6     &lt;NA&gt;  NA\n5  G          20     &lt;NA&gt;  NA\n\n\nExercise 3: Bigger datasets\n\nCode# How many observations (rows) and variables (columns) are there in the grades data?\ndim(grades)\n\n[1] 5844    3\n\nCode# How many observations (rows) and variables (columns) are there in the courses data?\ndim(courses)\n\n[1] 1718    6\n\n\nExercise 4: Class size\nPart a\n\nCodecourses_combined &lt;- courses |&gt;\n  group_by(sessionID) |&gt;\n  summarize(enroll = sum(enroll))\n\n# Check that this has 1695 rows and 2 columns\ndim(courses_combined)\n\n[1] 1695    2\n\n\nPart b\n\nCodecourses_combined |&gt; \n  summarize(median(enroll))\n\n\nPart c\n\nCodestudent_class_size &lt;- grades |&gt; \n  left_join(courses_combined) |&gt; \n  group_by(sid) |&gt; \n  summarize(med_class = median(enroll))\n\nhead(student_class_size)\n\n\nPart d\n\nCodeggplot(student_class_size, aes(x = med_class)) +\n  geom_histogram(color = \"white\")\n\n\nExercise 5: Narrowing in on classes\nPart a\n\nCodegrades |&gt; \n  filter(sessionID == \"session1986\")\n\n\nPart b\n\nCodegrades |&gt; \n  semi_join(dept_E)\n\n\nExercise 6: All the wrangling\nPart a\n\nCodecourses |&gt; \n  group_by(dept) |&gt; \n  summarize(total = sum(enroll)) |&gt; \n  arrange(desc(total))\n\n\nPart b\n\nCodegrades |&gt; \n  left_join(gpa_conversion) |&gt; \n  group_by(sid) |&gt; \n  summarize(mean(gp, na.rm = TRUE))\n\n\nPart c\n\nCodegrades |&gt; \n  left_join(gpa_conversion) |&gt; \n  group_by(sid) |&gt; \n  summarize(gpa = mean(gp, na.rm = TRUE)) |&gt; \n  summarize(median(gpa))\n\n\nPart d\n\nCode# There are lots of approaches here!\ngrades |&gt; \n  left_join(gpa_conversion) |&gt; \n  mutate(below_b_plus = (gp &lt; 3.3)) |&gt; \n  summarize(mean(below_b_plus, na.rm = TRUE))\n\n\nPart e\n\nCodegrades |&gt; \n  left_join(gpa_conversion) |&gt; \n  left_join(courses) |&gt; \n  group_by(iid) |&gt; \n  summarize(gpa = mean(gp, na.rm = TRUE)) |&gt; \n  arrange(gpa)\n\n\nPart f\n\nCodecross_listed &lt;- courses |&gt; \n  count(sessionID) |&gt; \n  filter(n &gt; 1)\n\ngrades |&gt; \n  anti_join(cross_listed) |&gt; \n  inner_join(courses) |&gt; \n  left_join(gpa_conversion) |&gt; \n  group_by(dept) |&gt; \n  summarize(gpa = mean(gp, na.rm = TRUE)) |&gt; \n  arrange(gpa)",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>joining</span>"
    ]
  },
  {
    "objectID": "ica/ica-joining.html#footnotes",
    "href": "ica/ica-joining.html#footnotes",
    "title": "\n14  joining\n",
    "section": "",
    "text": "There is also a right_join() that adds variables in the reverse direction from the left table to the right table, but we do not really need it as we can always switch the roles of the two tables.︎↩︎",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>joining</span>"
    ]
  },
  {
    "objectID": "ica/ica-wrangling.html",
    "href": "ica/ica-wrangling.html",
    "title": "\n15  Wrangling\n",
    "section": "",
    "text": "15.1 Motivation\nRecall the elections data by U.S. county:\n# Load tidyverse & data\nlibrary(tidyverse)\nelections &lt;- read.csv(\"https://mac-stat.github.io/data/election_2020_county.csv\")\nWe’ve used data viz to explore some general patterns in the election outcomes. For example, a map!\n# Get a background map\nlibrary(socviz)\ndata(county_map)\n\n# Make a choropleth map\nlibrary(RColorBrewer)  # For the color scale\nlibrary(ggthemes) # For theme_map\nelections |&gt; \n  mutate(county_fips = as.character(county_fips)) |&gt; \n  mutate(county_fips = \n           ifelse(nchar(county_fips) == 4, paste0(\"0\", county_fips), county_fips)) |&gt; \n  ggplot(aes(map_id = county_fips, fill = cut(repub_pct_20, breaks = seq(0, 100, by = 10)))) +\n    geom_map(map = county_map) +\n    scale_fill_manual(values = rev(brewer.pal(10, \"RdBu\")), name = \"% Republican\") +\n    expand_limits(x = county_map$long, y = county_map$lat)  + \n    theme_map() +\n    theme(legend.position = \"right\") + \n    coord_equal()\nConsider some fairly basic follow-up questions, each of which we cannot answer precisely (or sometimes even at all) using our data viz tools:",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Wrangling</span>"
    ]
  },
  {
    "objectID": "ica/ica-wrangling.html#motivation",
    "href": "ica/ica-wrangling.html#motivation",
    "title": "\n15  Wrangling\n",
    "section": "",
    "text": "How many total people voted for the Democratic and Republican candidates in 2020?\nWhat about in each state?\nIn just the state of Minnesota:\n\nWhich counties had the highest and lowest Democratic vote in 2020?\nHow did the Democratic vote in each county change from 2016 to 2020?",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Wrangling</span>"
    ]
  },
  {
    "objectID": "ica/ica-wrangling.html#goals",
    "href": "ica/ica-wrangling.html#goals",
    "title": "\n15  Wrangling\n",
    "section": "\n15.2 Goals",
    "text": "15.2 Goals\nWe really cannot do anything with data (viz, modeling, etc) unless we can wrangle the data. The following is a typical quote. I agree with the 90% – data wrangling isn’t something we have to do before we can do data science, it is data science! But let’s rethink the 10% – data wrangling is a fun and empowering puzzle!\n\nThe goals of data wrangling are to explore how to:\n\nGet data into the tidy shape / format we need for analysis. For example, we might want to:\n\nkeep only certain observations\ndefine new variables\nreformat or “clean” existing variables\ncombine various datasets\nprocess “string” or text data\n\n\nNumerically (not just visually) explore and summarize various characteristics of the variables in our dataset.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Wrangling</span>"
    ]
  },
  {
    "objectID": "ica/ica-wrangling.html#tools",
    "href": "ica/ica-wrangling.html#tools",
    "title": "\n15  Wrangling\n",
    "section": "\n15.3 Tools",
    "text": "15.3 Tools\nWe’ll continue to use packages that are part of the tidyverse which share a common general grammar and structure.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Wrangling</span>"
    ]
  },
  {
    "objectID": "ica/ica-wrangling.html#warm-up",
    "href": "ica/ica-wrangling.html#warm-up",
    "title": "\n15  Wrangling\n",
    "section": "\n15.4 Warm-Up",
    "text": "15.4 Warm-Up\nThere are lots and lots of steps that can go into data wrangling, thus lots and lots of relevant R functions. BUT just 6 functions can get us very far. People refer to these as the 6 main wrangling verbs or functions:\n\nwhy “verbs”? in the tidyverse grammar, functions serve as action words\n\nthe 6 verbs are all stored in the dplyr package within the tidyverse\n\neach verb acts on a data frame and returns a data frame\n\n\n\nverb\naction\n\n\n\narrange\n\narrange the rows according to some column\n\n\n\nfilter\n\nfilter out or obtain a subset of the rows\n\n\n\nselect\n\nselect a subset of columns\n\n\n\nmutate\n\nmutate or create a column\n\n\n\nsummarize\ncalculate a numerical summary of a column\n\n\n\ngroup_by\n\ngroup the rows by a specified column\n\n\n\n\n\n15.4.1 Example 1\nWhich verb would help us…\n\nkeep only information about state names, county names, and the 2020 and 2016 Democratic support (not the 2012 results, demographics, etc)\n\n\nThe select verb\n\n\nget only the data on Minnesota\n\n\nThe filter verb\n\n\ndefine a new variable which calculates the change in Democratic support from 2016 to 2020, using dem_pct_20 and dem_pct_16\n\n\n\nThe mutate verb\n\n\nsort the counties from highest to lowest Democratic support\n\n\nThe group_by verb\n\n\ndetermine the total number of votes cast across all counties\n\n\nThe summarize verb\n\n15.4.2 Example 2: Select Columns\nTo get a sense for the code structure, let’s explore a couple verbs together. To start, let’s simplify our dataset to include only some variables of interest. Specifically, select() only the columns relevant to state names, county names, and the 2020 and 2016 Democratic support:\n\n# What's the first argument? The second?\nselect(elections, c(state_name, county_name, dem_pct_20, dem_pct_16))\n\nLet’s re-do this with the pipe function |&gt;:\n\nelections |&gt; \n  select(state_name, county_name, dem_pct_20, dem_pct_16)\n\n\n\n\n\n\n\nPipe Function |&gt;\n\n\n\n|&gt; “passes” objects, usually datasets, to a function:\nobject |&gt; function() is the same as function(object)\n\n\n\n15.4.3 Example 3: Filter Rows\nLet’s filter() out only the rows related to Minnesota (MN):\n\n# Without a pipe\nfilter(elections, state_name == \"Minnesota\")\n\n\n# With a pipe\nelections |&gt; \n  filter(state_name == \"Minnesota\")\n\n\n\n\n\n\n\n== vs =\n\n\n\nWe use a == b to check whether a matches b.\nWe use a = b to define that a is equal to b. We typically use = for this purpose inside a function, and &lt;- for this purpose outside a function.\n\n# Ex: \"=\" defines x\nx = 2\nx\n\n[1] 2\n\n\n\n# Ex: \"==\" checks whether x is/matches 3\nx == 3\n\n[1] FALSE\n\n\n\n\n\n15.4.4 Example 4: Filter and Select\nLet’s combine select() and filter() to create a new dataset with info about the county names, and 2020 and 2016 Democratic support among Minnesota counties.\n\n# Without pipes\nfilter(select(elections, c(state_name, county_name, dem_pct_20, dem_pct_16)), state_name == \"Minnesota\")\n\n\n# With pipes: all verbs in 1 row\nelections |&gt; select(state_name, county_name, dem_pct_20, dem_pct_16) |&gt; filter(state_name == \"Minnesota\")\n\n\n# With pipes: each verb in a new row\nelections |&gt; \n  select(state_name, county_name, dem_pct_20, dem_pct_16) |&gt; \n  filter(state_name == \"Minnesota\")\n\n\n# We can even do this with UN-tidyverse code in \"base\" R\nelections[elections$state_name == \"Minnesota\", c(1, 4, 8, 12)]\n\n\n\n\n\n\n\nReflection\n\n\n\nWhy will we typically use:\n\ntidyverse code\nthe pipe function |&gt;\n\neach verb on a new row\n\n\n\n\n15.4.5 Example 5: Order of Operations\nSometimes, the order of operations matters, eg, putting on socks then shoes produces a different result than putting on shoes then socks. However, sometimes order doesn’t matter, eg, pouring cereal into a bowl then adding milk produces the same result as pouring milk into a bow then adding cereal (though one order is obviously better than the other ;)) Above (also copied below), we selected some columns and then filtered some rows:\n\nelections |&gt; \n  select(state_name, county_name, dem_pct_20, dem_pct_16) |&gt; \n  filter(state_name == \"Minnesota\")\n\nWould we get the same result if we reversed select() and filter()? Think first, then try it.\n\n# Try it\nelections |&gt; \n    filter(state_name == \"Minnesota\") |&gt;\n  select(state_name, county_name, dem_pct_20, dem_pct_16)\n\n   state_name              county_name dem_pct_20 dem_pct_16\n1   Minnesota            Aitkin County      35.98      34.12\n2   Minnesota             Anoka County      47.79      41.01\n3   Minnesota            Becker County      33.96      30.47\n4   Minnesota          Beltrami County      47.24      40.76\n5   Minnesota            Benton County      32.70      28.33\n6   Minnesota         Big Stone County      35.41      33.75\n7   Minnesota        Blue Earth County      50.84      43.38\n8   Minnesota             Brown County      32.48      27.54\n9   Minnesota           Carlton County      49.58      46.85\n10  Minnesota            Carver County      46.37      39.03\n11  Minnesota              Cass County      34.68      31.16\n12  Minnesota          Chippewa County      33.67      32.00\n13  Minnesota           Chisago County      34.15      30.92\n14  Minnesota              Clay County      50.74      44.57\n15  Minnesota        Clearwater County      26.76      26.04\n16  Minnesota              Cook County      65.58      56.90\n17  Minnesota        Cottonwood County      30.03      29.45\n18  Minnesota         Crow Wing County      34.17      30.88\n19  Minnesota            Dakota County      55.73      48.22\n20  Minnesota             Dodge County      33.47      29.36\n21  Minnesota           Douglas County      32.56      28.80\n22  Minnesota         Faribault County      31.98      29.27\n23  Minnesota          Fillmore County      37.48      35.28\n24  Minnesota          Freeborn County      40.96      37.92\n25  Minnesota           Goodhue County      41.23      36.99\n26  Minnesota             Grant County      35.58      31.97\n27  Minnesota          Hennepin County      70.46      63.82\n28  Minnesota           Houston County      42.42      39.42\n29  Minnesota           Hubbard County      34.42      30.04\n30  Minnesota            Isanti County      29.45      27.09\n31  Minnesota            Itasca County      40.61      38.12\n32  Minnesota           Jackson County      29.99      27.36\n33  Minnesota           Kanabec County      30.02      28.64\n34  Minnesota         Kandiyohi County      36.12      33.56\n35  Minnesota           Kittson County      38.12      34.83\n36  Minnesota       Koochiching County      38.41      36.53\n37  Minnesota     Lac qui Parle County      35.79      33.92\n38  Minnesota              Lake County      50.64      47.54\n39  Minnesota Lake of the Woods County      27.87      24.80\n40  Minnesota          Le Sueur County      33.73      31.10\n41  Minnesota           Lincoln County      30.08      28.65\n42  Minnesota              Lyon County      35.94      31.54\n43  Minnesota            McLeod County      30.64      26.64\n44  Minnesota          Mahnomen County      48.26      44.84\n45  Minnesota          Marshall County      25.33      25.55\n46  Minnesota            Martin County      30.02      26.11\n47  Minnesota            Meeker County      28.58      26.17\n48  Minnesota        Mille Lacs County      29.98      28.65\n49  Minnesota          Morrison County      22.33      20.74\n50  Minnesota             Mower County      46.00      42.33\n51  Minnesota            Murray County      29.60      27.90\n52  Minnesota          Nicollet County      50.31      44.02\n53  Minnesota            Nobles County      33.65      31.81\n54  Minnesota            Norman County      40.80      39.11\n55  Minnesota           Olmsted County      54.16      45.75\n56  Minnesota        Otter Tail County      32.85      28.93\n57  Minnesota        Pennington County      35.29      32.17\n58  Minnesota              Pine County      33.87      33.36\n59  Minnesota         Pipestone County      26.44      23.58\n60  Minnesota              Polk County      34.88      32.06\n61  Minnesota              Pope County      35.27      33.46\n62  Minnesota            Ramsey County      71.50      65.73\n63  Minnesota          Red Lake County      31.47      28.86\n64  Minnesota           Redwood County      28.43      24.94\n65  Minnesota          Renville County      30.71      27.99\n66  Minnesota              Rice County      48.76      44.81\n67  Minnesota              Rock County      29.69      28.56\n68  Minnesota            Roseau County      25.98      23.90\n69  Minnesota         St. Louis County      56.64      51.92\n70  Minnesota             Scott County      45.52      38.31\n71  Minnesota         Sherburne County      32.48      27.74\n72  Minnesota            Sibley County      28.60      25.29\n73  Minnesota           Stearns County      37.58      32.38\n74  Minnesota            Steele County      37.47      32.77\n75  Minnesota           Stevens County      37.80      39.55\n76  Minnesota             Swift County      34.35      33.80\n77  Minnesota              Todd County      24.79      23.30\n78  Minnesota          Traverse County      35.46      35.23\n79  Minnesota           Wabasha County      35.78      32.86\n80  Minnesota            Wadena County      26.35      24.43\n81  Minnesota            Waseca County      33.65      29.63\n82  Minnesota        Washington County      53.46      46.96\n83  Minnesota          Watonwan County      38.20      36.49\n84  Minnesota            Wilkin County      29.91      27.23\n85  Minnesota            Winona County      49.07      43.97\n86  Minnesota            Wright County      34.49      29.41\n87  Minnesota   Yellow Medicine County      30.54      29.01\n\n\n\n15.4.6 Example 6: Storing Results\nTypically:\n\nWe want to store our data wrangling results.\nIt’s good practice to do so under a new name. We want to preserve, thus don’t want to overwrite, the original data (especially if our code contains errors!!).\n\n\n# Store the results\nmn &lt;- elections |&gt; \n  select(state_name, county_name, dem_pct_20, dem_pct_16) |&gt; \n  filter(state_name == \"Minnesota\")\n\n# Always check it out to confirm it's what you want it to be!\nhead(mn)\n\n  state_name      county_name dem_pct_20 dem_pct_16\n1  Minnesota    Aitkin County      35.98      34.12\n2  Minnesota     Anoka County      47.79      41.01\n3  Minnesota    Becker County      33.96      30.47\n4  Minnesota  Beltrami County      47.24      40.76\n5  Minnesota    Benton County      32.70      28.33\n6  Minnesota Big Stone County      35.41      33.75\n\nnrow(mn)\n\n[1] 87\n\nnrow(elections)\n\n[1] 3109",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Wrangling</span>"
    ]
  },
  {
    "objectID": "ica/ica-wrangling.html#exercises",
    "href": "ica/ica-wrangling.html#exercises",
    "title": "\n15  Wrangling\n",
    "section": "\n15.5 Exercises",
    "text": "15.5 Exercises\nExercise 1: select Practice\nUse select() to create a simplified dataset that we’ll use throughout the exercises below.\n\nStore this dataset as elections_small.\nOnly keep the following variables: state_name, county_name, total_votes_20, repub_pct_20, dem_pct_20, total_votes_16, dem_pct_16\n\n\n\n# Define elections_small\n#___ &lt;- ___ |&gt;\n#  ___(___)\n\nelections_small &lt;- elections |&gt;\n  select(state_name, county_name, total_votes_20, repub_pct_20, dem_pct_20, total_votes_16, dem_pct_16)\n\n# Check out the first 6 rows to confirm your code did what you think it did!\n\nhead(elections_small)\n\n  state_name    county_name total_votes_20 repub_pct_20 dem_pct_20\n1    Alabama Autauga County          27770        71.44      27.02\n2    Alabama Baldwin County         109679        76.17      22.41\n3    Alabama Barbour County          10518        53.45      45.79\n4    Alabama    Bibb County           9595        78.43      20.70\n5    Alabama  Blount County          27588        89.57       9.57\n6    Alabama Bullock County           4613        24.84      74.70\n  total_votes_16 dem_pct_16\n1          24661      23.96\n2          94090      19.57\n3          10390      46.66\n4           8748      21.42\n5          25384       8.47\n6           4701      75.09\n\nnrow(elections_small)\n\n[1] 3109\n\nnrow(elections)\n\n[1] 3109\n\n\nExercise 2: filter Demo\nWhereas select() selects certain variables or columns, filter() keeps certain units of observation or rows relative to their outcome on certain variables. To this end, we must:\n\nIdentify the variable(s) that are relevant to the filter.\n\nUse a “logical comparison operator” to define which values of the variable to keep:\n\n\nsymbol\nmeaning\n\n\n\n==\nequal to\n\n\n!=\nnot equal to\n\n\n&gt;\ngreater than\n\n\n&gt;=\ngreater than or equal to\n\n\n&lt;\nless than\n\n\n&lt;=\nless than or equal to\n\n\n%in% c(???, ???)\na list of multiple values\n\n\n\n\nUse quotes \"\" when specifying outcomes of interest for a categorical variable.\n\n\n\n\n\n\n\nCommenting/Uncommenting Code\n\n\n\nTo comment/uncomment several lines of code at once, highlight them then click ctrl/cmd+shift+c.\n\n\n\n# Keep only data on counties in Hawaii\nelections_small |&gt;\n filter(state_name == \"Hawaii\")\n\n  state_name     county_name total_votes_20 repub_pct_20 dem_pct_20\n1     Hawaii   Hawaii County          87814        30.63      66.88\n2     Hawaii Honolulu County         382114        35.66      62.51\n3     Hawaii    Kauai County          33497        34.58      63.36\n4     Hawaii     Maui County          71044        31.14      66.59\n  total_votes_16 dem_pct_16\n1          64865      63.61\n2         285683      61.48\n3          26335      62.49\n4          51942      64.45\n\n\n\n# What does this do?\nelections_small |&gt;\n  filter(state_name %in% c(\"Hawaii\", \"Delaware\"))\n\n  state_name       county_name total_votes_20 repub_pct_20 dem_pct_20\n1   Delaware       Kent County          87025        47.12      51.19\n2   Delaware New Castle County         287633        30.72      67.81\n3   Delaware     Sussex County         129352        55.07      43.82\n4     Hawaii     Hawaii County          87814        30.63      66.88\n5     Hawaii   Honolulu County         382114        35.66      62.51\n6     Hawaii      Kauai County          33497        34.58      63.36\n7     Hawaii       Maui County          71044        31.14      66.59\n  total_votes_16 dem_pct_16\n1          74253      44.91\n2         261468      62.30\n3         105814      37.17\n4          64865      63.61\n5         285683      61.48\n6          26335      62.49\n7          51942      64.45\n\n\n\n# Keep only data on counties where the Republican got MORE THAN 93.97% of the vote in 2020\n# THINK: What variable is relevant here?\n\nelections_small |&gt;\n  filter(repub_pct_20 &gt; 93.97)\n\n  state_name    county_name total_votes_20 repub_pct_20 dem_pct_20\n1      Texas  Borden County            416        95.43       3.85\n2      Texas    King County            159        94.97       5.03\n3      Texas Roberts County            550        96.18       3.09\n  total_votes_16 dem_pct_16\n1            365       8.49\n2            159       3.14\n3            550       3.64\n\n\n\n# Keep only data on counties where the Republican got AT LEAST 93.97% of the vote in 2020\n# This should have 1 more row (observation) than your answer above\nelections_small |&gt;\n  filter(repub_pct_20 &gt;= 93.97)\n\n  state_name     county_name total_votes_20 repub_pct_20 dem_pct_20\n1    Montana Garfield County            813        93.97       5.04\n2      Texas   Borden County            416        95.43       3.85\n3      Texas     King County            159        94.97       5.03\n4      Texas  Roberts County            550        96.18       3.09\n  total_votes_16 dem_pct_16\n1            715       4.76\n2            365       8.49\n3            159       3.14\n4            550       3.64\n\n\nWe can also filter with respect to 2 rules! Here, think what variables are relevant.\n\n# Keep only data on counties in Texas where the Democrat got more than 65% of the vote in 2020\n# Do this 2 ways.\n# Method 1: 2 filters with 1 condition each\nelections_small |&gt;\n filter(dem_pct_20 &gt; 65) |&gt;\n filter(state_name == \"Texas\")\n\n  state_name     county_name total_votes_20 repub_pct_20 dem_pct_20\n1      Texas  El Paso County         267215        31.56      66.66\n2      Texas Presidio County           2217        32.52      65.99\n3      Texas   Travis County         610349        26.43      71.41\n4      Texas   Zavala County           4379        34.03      65.40\n  total_votes_16 dem_pct_16\n1         210458      69.14\n2           2203      66.18\n3         462511      66.26\n4           3390      77.67\n\n# Method 2: 1 filter with 2 conditions\nelections_small |&gt;\n filter(state_name == \"Texas\", dem_pct_20 &gt; 65)\n\n  state_name     county_name total_votes_20 repub_pct_20 dem_pct_20\n1      Texas  El Paso County         267215        31.56      66.66\n2      Texas Presidio County           2217        32.52      65.99\n3      Texas   Travis County         610349        26.43      71.41\n4      Texas   Zavala County           4379        34.03      65.40\n  total_votes_16 dem_pct_16\n1         210458      69.14\n2           2203      66.18\n3         462511      66.26\n4           3390      77.67\n\n\nExercise 3: arrange Demo\narrange() arranges or sorts the rows in a dataset according to a given column or variable, in ascending or descending order:\narrange(variable), arrange(desc(variable))\n\n# Arrange the counties in elections_small from lowest to highest percentage of 2020 Republican support\n# Print out just the first 6 rows\nelections_small |&gt;\n  arrange(repub_pct_20) |&gt;\n  head(6)\n\n            state_name            county_name total_votes_20 repub_pct_20\n1 District of Columbia   District of Columbia         344356         5.40\n2             Maryland Prince George's County         424855         8.73\n3             Maryland         Baltimore city         237461        10.69\n4             Virginia        Petersburg city          14118        11.22\n5             New York        New York County         694904        12.26\n6           California   San Francisco County         443458        12.72\n  dem_pct_20 total_votes_16 dem_pct_16\n1      92.15         280272      92.85\n2      89.26         351091      89.33\n3      87.28         208980      85.44\n4      87.75          13717      87.52\n5      86.78         591368      87.17\n6      85.27         365295      85.53\n\n\n\n# Arrange the counties in elections_small from highest to lowest percentage of 2020 Republican support\n# Print out just the first 6 rows\n\nelections_small |&gt;\n  arrange(desc(repub_pct_20)) |&gt;\n  head(6)\n\n  state_name      county_name total_votes_20 repub_pct_20 dem_pct_20\n1      Texas   Roberts County            550        96.18       3.09\n2      Texas    Borden County            416        95.43       3.85\n3      Texas      King County            159        94.97       5.03\n4    Montana  Garfield County            813        93.97       5.04\n5      Texas Glasscock County            653        93.57       5.97\n6   Nebraska     Grant County            402        93.28       4.98\n  total_votes_16 dem_pct_16\n1            550       3.64\n2            365       8.49\n3            159       3.14\n4            715       4.76\n5            602       5.65\n6            394       5.08\n\n\nExercise 4: mutate Demo\nmutate() can either transform / mutate an existing variable (column), or define a new variable based on existing ones.\nPart a\n\n# What did this code do?\nelections_small |&gt;\n  mutate(diff_20 = repub_pct_20 - dem_pct_20) |&gt;\n  head()\n\n  state_name    county_name total_votes_20 repub_pct_20 dem_pct_20\n1    Alabama Autauga County          27770        71.44      27.02\n2    Alabama Baldwin County         109679        76.17      22.41\n3    Alabama Barbour County          10518        53.45      45.79\n4    Alabama    Bibb County           9595        78.43      20.70\n5    Alabama  Blount County          27588        89.57       9.57\n6    Alabama Bullock County           4613        24.84      74.70\n  total_votes_16 dem_pct_16 diff_20\n1          24661      23.96   44.42\n2          94090      19.57   53.76\n3          10390      46.66    7.66\n4           8748      21.42   57.73\n5          25384       8.47   80.00\n6           4701      75.09  -49.86\n\n\n\n# What did this code do?\nelections_small |&gt;\n  mutate(repub_votes_20 = round(total_votes_20 * repub_pct_20/100)) |&gt;\n  head()\n\n  state_name    county_name total_votes_20 repub_pct_20 dem_pct_20\n1    Alabama Autauga County          27770        71.44      27.02\n2    Alabama Baldwin County         109679        76.17      22.41\n3    Alabama Barbour County          10518        53.45      45.79\n4    Alabama    Bibb County           9595        78.43      20.70\n5    Alabama  Blount County          27588        89.57       9.57\n6    Alabama Bullock County           4613        24.84      74.70\n  total_votes_16 dem_pct_16 repub_votes_20\n1          24661      23.96          19839\n2          94090      19.57          83542\n3          10390      46.66           5622\n4           8748      21.42           7525\n5          25384       8.47          24711\n6           4701      75.09           1146\n\n\n\n# What did this code do?\nelections_small |&gt;\n  mutate(repub_win_20 = repub_pct_20 &gt; dem_pct_20) |&gt;\n  head()\n\n  state_name    county_name total_votes_20 repub_pct_20 dem_pct_20\n1    Alabama Autauga County          27770        71.44      27.02\n2    Alabama Baldwin County         109679        76.17      22.41\n3    Alabama Barbour County          10518        53.45      45.79\n4    Alabama    Bibb County           9595        78.43      20.70\n5    Alabama  Blount County          27588        89.57       9.57\n6    Alabama Bullock County           4613        24.84      74.70\n  total_votes_16 dem_pct_16 repub_win_20\n1          24661      23.96         TRUE\n2          94090      19.57         TRUE\n3          10390      46.66         TRUE\n4           8748      21.42         TRUE\n5          25384       8.47         TRUE\n6           4701      75.09        FALSE\n\n\nPart b\n\n# You try\n# Define a variable that calculates the change in Dem support in 2020 vs 2016\nelections_small |&gt;\n mutate(dem_diff = dem_pct_20 - dem_pct_16) |&gt;\n head()\n\n  state_name    county_name total_votes_20 repub_pct_20 dem_pct_20\n1    Alabama Autauga County          27770        71.44      27.02\n2    Alabama Baldwin County         109679        76.17      22.41\n3    Alabama Barbour County          10518        53.45      45.79\n4    Alabama    Bibb County           9595        78.43      20.70\n5    Alabama  Blount County          27588        89.57       9.57\n6    Alabama Bullock County           4613        24.84      74.70\n  total_votes_16 dem_pct_16 dem_diff\n1          24661      23.96     3.06\n2          94090      19.57     2.84\n3          10390      46.66    -0.87\n4           8748      21.42    -0.72\n5          25384       8.47     1.10\n6           4701      75.09    -0.39\n\n\n\n# You try\n# Define a variable that determines whether the Dem support was higher in 2020 than in 2016 (TRUE/FALSE)\nelections_small |&gt;\n mutate(dem_win_20 = dem_pct_20 &gt; repub_pct_20) |&gt;\n head()\n\n  state_name    county_name total_votes_20 repub_pct_20 dem_pct_20\n1    Alabama Autauga County          27770        71.44      27.02\n2    Alabama Baldwin County         109679        76.17      22.41\n3    Alabama Barbour County          10518        53.45      45.79\n4    Alabama    Bibb County           9595        78.43      20.70\n5    Alabama  Blount County          27588        89.57       9.57\n6    Alabama Bullock County           4613        24.84      74.70\n  total_votes_16 dem_pct_16 dem_win_20\n1          24661      23.96      FALSE\n2          94090      19.57      FALSE\n3          10390      46.66      FALSE\n4           8748      21.42      FALSE\n5          25384       8.47      FALSE\n6           4701      75.09       TRUE\n\n\nExercise 5: Pipe Series\nLet’s now combine these verbs into a pipe series!\nPart a\n\n\n\n\n\n\nThink then Run\n\n\n\nBEFORE running the below chunk, what do you think it will produce?\n\n\n\nelections_small |&gt;\n  filter(state_name == \"Wisconsin\",\n         repub_pct_20 &lt; dem_pct_20) |&gt;\n  arrange(desc(total_votes_20)) |&gt;\n  head()\n\n  state_name       county_name total_votes_20 repub_pct_20 dem_pct_20\n1  Wisconsin  Milwaukee County         458971        29.27      69.13\n2  Wisconsin       Dane County         344791        22.85      75.46\n3  Wisconsin       Rock County          85360        43.51      54.66\n4  Wisconsin  La Crosse County          67884        42.25      55.75\n5  Wisconsin Eau Claire County          58275        43.49      54.26\n6  Wisconsin    Portage County          40603        47.53      50.31\n  total_votes_16 dem_pct_16\n1         434970      66.44\n2         304729      71.38\n3          75043      52.42\n4          62785      51.61\n5          54080      50.43\n6          38123      48.59\n\n\nPart b\n\n\n\n\n\n\nThink then Run\n\n\n\nBEFORE trying, what do you think will happen if you change the order of filter and arrange:\n\nthe results will be the same\nwe’ll get an error\nwe won’t get an error, but the results will be different\n\n\n\n\n# Now try it. Change the order of filter and arrange below.\nelections_small |&gt;\n  arrange(desc(total_votes_20)) |&gt;\n  filter(state_name == \"Wisconsin\",\n         repub_pct_20 &lt; dem_pct_20) |&gt;\n  head()\n\n  state_name       county_name total_votes_20 repub_pct_20 dem_pct_20\n1  Wisconsin  Milwaukee County         458971        29.27      69.13\n2  Wisconsin       Dane County         344791        22.85      75.46\n3  Wisconsin       Rock County          85360        43.51      54.66\n4  Wisconsin  La Crosse County          67884        42.25      55.75\n5  Wisconsin Eau Claire County          58275        43.49      54.26\n6  Wisconsin    Portage County          40603        47.53      50.31\n  total_votes_16 dem_pct_16\n1         434970      66.44\n2         304729      71.38\n3          75043      52.42\n4          62785      51.61\n5          54080      50.43\n6          38123      48.59\n\n\nPart c\nSo the order of filter() and arrange() did not matter – rerranging them produces the same results. BUT what is one advantage of filtering before arranging?\nPart d\n\n\n\n\n\n\nThink then Run\n\n\n\nBEFORE running the below chunk, what do you think it will produce?\n\n\n\nelections_small |&gt;\n  filter(state_name == \"Delaware\") |&gt;\n  mutate(repub_win_20 = repub_pct_20 &gt; dem_pct_20) |&gt;\n  select(county_name, repub_pct_20, dem_pct_20, repub_win_20)\n\n        county_name repub_pct_20 dem_pct_20 repub_win_20\n1       Kent County        47.12      51.19        FALSE\n2 New Castle County        30.72      67.81        FALSE\n3     Sussex County        55.07      43.82         TRUE\n\n\nPart e\n\n\n\n\n\n\nThink then Run\n\n\n\nBEFORE trying, what do you think will happen if you change the order of mutate and select:\n\nthe results will be the same\nwe’ll get an error\nwe won’t get an error, but the results will be different\n\n\n\n\n# Now try it. Change the order of mutate and select below.\n# elections_small |&gt; \n#   filter(state_name == \"Delaware\") |&gt; \n#   mutate(repub_win_20 = repub_pct_20 &gt; dem_pct_20) |&gt; \n#   select(county_name, repub_pct_20, dem_pct_20, repub_win_20)\n\nExercise 6: DIY Pipe Series\nWe’ve now learned 4 of the 6 wrangling verbs: select, filter, mutate, arrange. Let’s practice combining these into pipe series. Here are some hot tips:\n\nBefore writing any code, translate the prompt: how many distinct wrangling steps are needed and what verb do we need in each step?\nAdd each verb one at a time – don’t try writing a whole chunk at once.\n\nPart a\nShow just the counties in Minnesota and their Democratic 2020 vote percentage, from highest to lowest. Your answer should have just 2 columns.\n\nelections_small |&gt;\n  filter(state_name == \"Minnesota\") |&gt;\n  select(county_name, dem_pct_20) |&gt;\n  arrange(desc(dem_pct_20))\n\n                county_name dem_pct_20\n1             Ramsey County      71.50\n2           Hennepin County      70.46\n3               Cook County      65.58\n4          St. Louis County      56.64\n5             Dakota County      55.73\n6            Olmsted County      54.16\n7         Washington County      53.46\n8         Blue Earth County      50.84\n9               Clay County      50.74\n10              Lake County      50.64\n11          Nicollet County      50.31\n12           Carlton County      49.58\n13            Winona County      49.07\n14              Rice County      48.76\n15          Mahnomen County      48.26\n16             Anoka County      47.79\n17          Beltrami County      47.24\n18            Carver County      46.37\n19             Mower County      46.00\n20             Scott County      45.52\n21           Houston County      42.42\n22           Goodhue County      41.23\n23          Freeborn County      40.96\n24            Norman County      40.80\n25            Itasca County      40.61\n26       Koochiching County      38.41\n27          Watonwan County      38.20\n28           Kittson County      38.12\n29           Stevens County      37.80\n30           Stearns County      37.58\n31          Fillmore County      37.48\n32            Steele County      37.47\n33         Kandiyohi County      36.12\n34            Aitkin County      35.98\n35              Lyon County      35.94\n36     Lac qui Parle County      35.79\n37           Wabasha County      35.78\n38             Grant County      35.58\n39          Traverse County      35.46\n40         Big Stone County      35.41\n41        Pennington County      35.29\n42              Pope County      35.27\n43              Polk County      34.88\n44              Cass County      34.68\n45            Wright County      34.49\n46           Hubbard County      34.42\n47             Swift County      34.35\n48         Crow Wing County      34.17\n49           Chisago County      34.15\n50            Becker County      33.96\n51              Pine County      33.87\n52          Le Sueur County      33.73\n53          Chippewa County      33.67\n54            Nobles County      33.65\n55            Waseca County      33.65\n56             Dodge County      33.47\n57        Otter Tail County      32.85\n58            Benton County      32.70\n59           Douglas County      32.56\n60             Brown County      32.48\n61         Sherburne County      32.48\n62         Faribault County      31.98\n63          Red Lake County      31.47\n64          Renville County      30.71\n65            McLeod County      30.64\n66   Yellow Medicine County      30.54\n67           Lincoln County      30.08\n68        Cottonwood County      30.03\n69           Kanabec County      30.02\n70            Martin County      30.02\n71           Jackson County      29.99\n72        Mille Lacs County      29.98\n73            Wilkin County      29.91\n74              Rock County      29.69\n75            Murray County      29.60\n76            Isanti County      29.45\n77            Sibley County      28.60\n78            Meeker County      28.58\n79           Redwood County      28.43\n80 Lake of the Woods County      27.87\n81        Clearwater County      26.76\n82         Pipestone County      26.44\n83            Wadena County      26.35\n84            Roseau County      25.98\n85          Marshall County      25.33\n86              Todd County      24.79\n87          Morrison County      22.33\n\n\nPart b\nCreate a new dataset named mn_wi that sorts the counties in Minnesota and Wisconsin from lowest to highest in terms of the change in Democratic vote percentage in 2020 vs 2016. This dataset should include the following variables (and only these variables): state_name, county_name, dem_pct_20, dem_pct_16, and a variable measuring the change in Democratic vote percentage in 2020 vs 2016.\n\n# Define the dataset\n# Only store the results once you're confident that they're correct\n\nmn_wi &lt;- elections_small |&gt;\n  mutate(dem_diff = dem_pct_20 - dem_pct_16) |&gt;\n  arrange(desc(dem_diff)) |&gt;\n  filter(state_name == c(\"Minnesota\", \"Wisconsin\")) |&gt;\n  select(state_name, county_name, dem_pct_20, dem_pct_16, dem_diff)\n\n\n# Check out the first 6 rows to confirm your results\n\nhead(mn_wi)\n\n  state_name       county_name dem_pct_20 dem_pct_16 dem_diff\n1  Minnesota    Olmsted County      54.16      45.75     8.41\n2  Minnesota Blue Earth County      50.84      43.38     7.46\n3  Minnesota       Clay County      50.74      44.57     6.17\n4  Wisconsin    Ozaukee County      43.13      37.79     5.34\n5  Minnesota     Winona County      49.07      43.97     5.10\n6  Minnesota     Wright County      34.49      29.41     5.08\n\n\nPart c\nConstruct and discuss a plot of the county-level change in Democratic vote percent in 2020 vs 2016, and how this differs between Minnesota and Wisconsin.\n\nggplot(mn_wi, aes(x = state_name, y = dem_diff)) +\n  geom_boxplot()\n\n\n\n\n\n\n\nExercise 7: summarize Demo\n6 verbs: select, filter, arrange, mutate, summarize, group_by\nLet’s talk about the last 2 verbs. summarize() (or equivalently summarise()) takes an entire data frame as input and outputs a single row with one or more summary statistics. For each chunk below, indicate what the code does.\n\n# What does this do? It makes the median of all of the values for the median republican percentage points of the vote in 2020\n# elections_small |&gt;\n#   summarize(median(repub_pct_20))\n\n\n# What does this do? It creates a variable which has the value that is the median of the values for repub_pct_20 combined called \"median_repub\"\n# elections_small |&gt;\n#   summarize(median_repub = median(repub_pct_20))\n\n\n# What does this do? It creates the previous \"median_repub\" variable and another variable, \"total_votes\", which is the sum of all values under total_votes_20\n# elections_small |&gt; \n#   summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20))\n\nExercise 8: summarize + group_by demo\nFinally, group_by() groups the units of observation or rows of a data frame by a specified set of variables. Alone, this function doesn’t change the appearance of our dataset or seem to do anything at all:\n\n# elections_small |&gt; \n#   group_by(state_name)\n\nThough it does change the underlying structure of the dataset:\n\n# Check out the structure before and after group_by\nelections_small |&gt;\n  class()\n\n[1] \"data.frame\"\n\nelections_small |&gt;\n  group_by(state_name) |&gt;\n  class()\n\n[1] \"grouped_df\" \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\nWhere it really shines is in partnership with summarize().\n\n# What does this do? This groups the summary function of certain variables to summarize not by the whole row, but instead by groups of values within a certain variable. Each value of that certain variables is recorded as an observation and given its own row.\n# (What if we didn't use group_by?) If we don't use group_by, we will just get the summary of the entire row.\nelections_small |&gt;\n  group_by(state_name) |&gt;\n  summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20))\n\n# A tibble: 50 × 3\n   state_name           median_repub total_votes\n   &lt;chr&gt;                       &lt;dbl&gt;       &lt;int&gt;\n 1 Alabama                      70.6     2323304\n 2 Arizona                      57.9     3387326\n 3 Arkansas                     72.1     1219069\n 4 California                   44.8    17495906\n 5 Colorado                     56.2     3256953\n 6 Connecticut                  41.0     1824280\n 7 Delaware                     47.1      504010\n 8 District of Columbia          5.4      344356\n 9 Florida                      64.6    11067456\n10 Georgia                      68       4997716\n# ℹ 40 more rows\n\n\n\n\n\n\n\n\nReflect\n\n\n\nNotice that group_by() with summarize() produces new data frame or tibble! But the units of observation are now states instead of counties within states.\n\n\nExercise 9: DIY\nLet’s practice (some of) our 6 verbs: select, filter, arrange, mutate, summarize, group_by Remember:\n\nBefore writing any code, translate the given prompts: how many distinct wrangling steps are needed and what verb do we need in each step?\nAdd each verb one at a time.\n\nPart a\nNOTE: Part a is a challenge exercise. If you get really stuck, move on to Part b which is the same overall question, but with hints.\n\n# Sort the *states* from the most to least total votes cast in 2020\nelections_small |&gt;\n  group_by(state_name) |&gt;\n  summarize(total_state_votes = sum(total_votes_20)) |&gt;\n  arrange(desc(total_state_votes))\n\n# A tibble: 50 × 2\n   state_name     total_state_votes\n   &lt;chr&gt;                      &lt;int&gt;\n 1 California              17495906\n 2 Texas                   11317911\n 3 Florida                 11067456\n 4 New York                 8616205\n 5 Pennsylvania             6925255\n 6 Illinois                 6038850\n 7 Ohio                     5922202\n 8 Michigan                 5539302\n 9 North Carolina           5524801\n10 Georgia                  4997716\n# ℹ 40 more rows\n\n\n\n# In 2020, what were the total number of votes for the Democratic candidate and the total number of votes for the Republican candidate in each *state*?\nelections_small |&gt;\n  mutate(real_rep_votes_20 = round((repub_pct_20 / 100) * total_votes_20), real_dem_votes_20 = round((dem_pct_20 / 100) * total_votes_20)) |&gt;\n  group_by(state_name) |&gt;\n  summarize(total_state_rep_votes_20 = sum(real_rep_votes_20), total_state_dem_votes_20 = sum(real_dem_votes_20))\n\n# A tibble: 50 × 3\n   state_name           total_state_rep_votes_20 total_state_dem_votes_20\n   &lt;chr&gt;                                   &lt;dbl&gt;                    &lt;dbl&gt;\n 1 Alabama                               1441155                   849664\n 2 Arizona                               1661671                  1672127\n 3 Arkansas                               760641                   423919\n 4 California                            6006031                 11109642\n 5 Colorado                              1364627                  1804393\n 6 Connecticut                            715315                  1080677\n 7 Delaware                               200601                   296274\n 8 District of Columbia                    18595                   317324\n 9 Florida                               5668600                  5297131\n10 Georgia                               2461869                  2473661\n# ℹ 40 more rows\n\n\n\n# What states did the Democratic candidate win in 2020?\nelections_small |&gt;\n  mutate(real_rep_votes_20 = round((repub_pct_20 / 100) * total_votes_20), real_dem_votes_20 = round((dem_pct_20 / 100) * total_votes_20)) |&gt;\n  group_by(state_name) |&gt;\n  summarize(total_state_rep_votes_20 = sum(real_rep_votes_20), total_state_dem_votes_20 = sum(real_dem_votes_20)) |&gt;\n  mutate(dem_state_win_20 = total_state_dem_votes_20 &gt; total_state_rep_votes_20)\n\n# A tibble: 50 × 4\n   state_name     total_state_rep_vote…¹ total_state_dem_vote…² dem_state_win_20\n   &lt;chr&gt;                           &lt;dbl&gt;                  &lt;dbl&gt; &lt;lgl&gt;           \n 1 Alabama                       1441155                 849664 FALSE           \n 2 Arizona                       1661671                1672127 TRUE            \n 3 Arkansas                       760641                 423919 FALSE           \n 4 California                    6006031               11109642 TRUE            \n 5 Colorado                      1364627                1804393 TRUE            \n 6 Connecticut                    715315                1080677 TRUE            \n 7 Delaware                       200601                 296274 TRUE            \n 8 District of C…                  18595                 317324 TRUE            \n 9 Florida                       5668600                5297131 FALSE           \n10 Georgia                       2461869                2473661 TRUE            \n# ℹ 40 more rows\n# ℹ abbreviated names: ¹​total_state_rep_votes_20, ²​total_state_dem_votes_20\n\n\nPart b\n\n# Sort the states from the most to least total votes cast in 2020\n# HINT: Calculate the total number of votes in each state, then sort\nelections_small |&gt;\n  group_by(state_name) |&gt;\n  summarize(state_total_votes_20 = sum(total_votes_20)) |&gt;\n  arrange(desc(state_total_votes_20))\n\n# A tibble: 50 × 2\n   state_name     state_total_votes_20\n   &lt;chr&gt;                         &lt;int&gt;\n 1 California                 17495906\n 2 Texas                      11317911\n 3 Florida                    11067456\n 4 New York                    8616205\n 5 Pennsylvania                6925255\n 6 Illinois                    6038850\n 7 Ohio                        5922202\n 8 Michigan                    5539302\n 9 North Carolina              5524801\n10 Georgia                     4997716\n# ℹ 40 more rows\n\n\n\n# In 2020, what were the total number of votes for the Democratic candidate and the total number of votes for the Republican candidate in each state?\n# HINT: First calculate the number of Dem and Repub votes in each *county*\n# Then group and summarize these by state\n\nelections_small |&gt;\n  mutate(real_rep_vote_20 = round((repub_pct_20 / 100) * total_votes_20), real_dem_vote_20 = round((dem_pct_20 / 100) * total_votes_20)) |&gt;\n  group_by(state_name) |&gt;\n  summarize(state_rep_votes_20 = sum(real_rep_vote_20), state_dem_votes_20 = sum(real_dem_vote_20))\n\n# A tibble: 50 × 3\n   state_name           state_rep_votes_20 state_dem_votes_20\n   &lt;chr&gt;                             &lt;dbl&gt;              &lt;dbl&gt;\n 1 Alabama                         1441155             849664\n 2 Arizona                         1661671            1672127\n 3 Arkansas                         760641             423919\n 4 California                      6006031           11109642\n 5 Colorado                        1364627            1804393\n 6 Connecticut                      715315            1080677\n 7 Delaware                         200601             296274\n 8 District of Columbia              18595             317324\n 9 Florida                         5668600            5297131\n10 Georgia                         2461869            2473661\n# ℹ 40 more rows\n\n\n\n# What states did the Democratic candidate win in 2020?\n# HINT: Start with the results from the previous chunk, and then keep only some rows\n\nelections_small |&gt;\n  mutate(real_rep_vote_20 = round((repub_pct_20 / 100) * total_votes_20), real_dem_vote_20 = round((dem_pct_20 / 100) * total_votes_20)) |&gt;\n  group_by(state_name) |&gt;\n  summarize(state_rep_votes_20 = sum(real_rep_vote_20), state_dem_votes_20 = sum(real_dem_vote_20)) |&gt;\n  mutate(dem_state_win = state_dem_votes_20 &gt; state_rep_votes_20)\n\n# A tibble: 50 × 4\n   state_name           state_rep_votes_20 state_dem_votes_20 dem_state_win\n   &lt;chr&gt;                             &lt;dbl&gt;              &lt;dbl&gt; &lt;lgl&gt;        \n 1 Alabama                         1441155             849664 FALSE        \n 2 Arizona                         1661671            1672127 TRUE         \n 3 Arkansas                         760641             423919 FALSE        \n 4 California                      6006031           11109642 TRUE         \n 5 Colorado                        1364627            1804393 TRUE         \n 6 Connecticut                      715315            1080677 TRUE         \n 7 Delaware                         200601             296274 TRUE         \n 8 District of Columbia              18595             317324 TRUE         \n 9 Florida                         5668600            5297131 FALSE        \n10 Georgia                         2461869            2473661 TRUE         \n# ℹ 40 more rows\n\n\nExercise 10: Practice on New Data\nRecall the World Cup football/soccer data from TidyTuesday:\n\nworld_cup &lt;- read.csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-29/worldcups.csv\")\n\nYou can find a codebook here. Use (some of) our 6 verbs (select, filter, arrange, mutate, summarize, group_by) and data viz to address the following prompts.\n\n# In what years did Brazil win the World Cup?\nworld_cup |&gt;\n  filter(winner == \"Brazil\")\n\n  year               host winner         second        third       fourth\n1 1958             Sweden Brazil         Sweden       France West Germany\n2 1962              Chile Brazil Czechoslovakia        Chile   Yugoslavia\n3 1970             Mexico Brazil          Italy West Germany      Uruguay\n4 1994                USA Brazil          Italy       Sweden     Bulgaria\n5 2002 Japan, South Korea Brazil        Germany       Turkey  South Korea\n  goals_scored teams games attendance\n1          126    16    35     868000\n2           89    16    32     776000\n3           95    16    32    1673975\n4          141    24    52    3568567\n5          161    32    64    2724604\n\n\n\n# What were the 6 World Cups with the highest attendance?\nworld_cup |&gt;\n  arrange(desc(attendance)) |&gt;\n  head(6)\n\n  year               host  winner    second       third      fourth\n1 1994                USA  Brazil     Italy      Sweden    Bulgaria\n2 2014             Brazil Germany Argentina Netherlands      Brazil\n3 2006            Germany   Italy    France     Germany    Portugal\n4 2018             Russia  France   Croatia     Belgium     England\n5 1998             France  France    Brazil     Croatia Netherlands\n6 2002 Japan, South Korea  Brazil   Germany      Turkey South Korea\n  goals_scored teams games attendance\n1          141    24    52    3568567\n2          171    32    64    3441450\n3          147    32    64    3367000\n4          169    32    64    3031768\n5          171    32    64    2859234\n6          161    32    64    2724604\n\n\n\n# Construct a univariate plot of goals_scored (no wrangling necessary)\n# This provides a visual summary of how the number of goals_scored varies from World Cup to World Cup\nggplot(world_cup, aes(x = year, y = goals_scored)) +\n  geom_point()\n\n\n\n\n\n\n\n\n# Let's follow up the plot with some more precise numerical summaries\n# Calculate the min, median, and max number of goals_scored across all World Cups\n# NOTE: Visually compare these numerical summaries to what you observed in the plot\nworld_cup |&gt;\n  summarize(median_goals = median(goals_scored), least_goals = min(goals_scored), most_goals = max(goals_scored))\n\n  median_goals least_goals most_goals\n1          126          70        171\n\n\n\n# Construct a bivariate plot of how the number of goals_scored in the World Cup has changed over the years\n# No wrangling necessary\nggplot(world_cup, aes(x = year, y = goals_scored)) +\n  geom_point()\n\n\n\n\n\n\n\n\n# Our above summaries might be a bit misleading.\n# The number of games played at the World Cup varies.\n# Construct a bivariate plot of how the typical number of goals per game has changed over the years\nworld_cup_goals_per_game &lt;- world_cup |&gt;\n  mutate(goals_per_game = goals_scored / games)\n\nggplot(world_cup_goals_per_game, aes(x = year, y = goals_per_game)) +\n  geom_point()\n\n\n\n\n\n\n\nExercise 11: Practice on Your Data\nReturn to the TidyTuesday data you’re using in Homework 3. Use your new wrangling skills to play around. What new insights can you gain?!",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Wrangling</span>"
    ]
  },
  {
    "objectID": "ica/ica-wrangling.html#solutions",
    "href": "ica/ica-wrangling.html#solutions",
    "title": "\n15  Wrangling\n",
    "section": "\n15.6 Solutions",
    "text": "15.6 Solutions\n\nClick for Solutions\n\n15.6.1 Example 1\n\nselect\nfilter\nmutate\narrange\nsummarize\nExercise 1: select Practice\n\n# Define elections_small\nelections_small &lt;- elections |&gt;\n  select(state_name, county_name, total_votes_20, repub_pct_20, dem_pct_20, total_votes_16, dem_pct_16)\n\n# Check out the first 6 rows to confirm your code did what you think it did!\nhead(elections_small)\n\n  state_name    county_name total_votes_20 repub_pct_20 dem_pct_20\n1    Alabama Autauga County          27770        71.44      27.02\n2    Alabama Baldwin County         109679        76.17      22.41\n3    Alabama Barbour County          10518        53.45      45.79\n4    Alabama    Bibb County           9595        78.43      20.70\n5    Alabama  Blount County          27588        89.57       9.57\n6    Alabama Bullock County           4613        24.84      74.70\n  total_votes_16 dem_pct_16\n1          24661      23.96\n2          94090      19.57\n3          10390      46.66\n4           8748      21.42\n5          25384       8.47\n6           4701      75.09\n\n\nExercise 2: filter Demo\n\n# Keep only data on counties in Hawaii\nelections_small |&gt;\n filter(state_name == \"Hawaii\")\n\n  state_name     county_name total_votes_20 repub_pct_20 dem_pct_20\n1     Hawaii   Hawaii County          87814        30.63      66.88\n2     Hawaii Honolulu County         382114        35.66      62.51\n3     Hawaii    Kauai County          33497        34.58      63.36\n4     Hawaii     Maui County          71044        31.14      66.59\n  total_votes_16 dem_pct_16\n1          64865      63.61\n2         285683      61.48\n3          26335      62.49\n4          51942      64.45\n\n\n\n# Keep counties in Hawaii AND Delaware\nelections_small |&gt; \n  filter(state_name %in% c(\"Hawaii\", \"Delaware\"))\n\n  state_name       county_name total_votes_20 repub_pct_20 dem_pct_20\n1   Delaware       Kent County          87025        47.12      51.19\n2   Delaware New Castle County         287633        30.72      67.81\n3   Delaware     Sussex County         129352        55.07      43.82\n4     Hawaii     Hawaii County          87814        30.63      66.88\n5     Hawaii   Honolulu County         382114        35.66      62.51\n6     Hawaii      Kauai County          33497        34.58      63.36\n7     Hawaii       Maui County          71044        31.14      66.59\n  total_votes_16 dem_pct_16\n1          74253      44.91\n2         261468      62.30\n3         105814      37.17\n4          64865      63.61\n5         285683      61.48\n6          26335      62.49\n7          51942      64.45\n\n\n\n# Keep only data on counties where the Republican got MORE THAN 93.97% of the vote in 2020\nelections_small |&gt; \n  filter(repub_pct_20 &gt; 93.97)\n\n  state_name    county_name total_votes_20 repub_pct_20 dem_pct_20\n1      Texas  Borden County            416        95.43       3.85\n2      Texas    King County            159        94.97       5.03\n3      Texas Roberts County            550        96.18       3.09\n  total_votes_16 dem_pct_16\n1            365       8.49\n2            159       3.14\n3            550       3.64\n\n\n\n# Keep only data on counties where the Republican got AT LEAST 93.97% of the vote in 2020\n# This should have 1 more row than your answer above\nelections_small |&gt; \n  filter(repub_pct_20 &gt;= 93.97)\n\n  state_name     county_name total_votes_20 repub_pct_20 dem_pct_20\n1    Montana Garfield County            813        93.97       5.04\n2      Texas   Borden County            416        95.43       3.85\n3      Texas     King County            159        94.97       5.03\n4      Texas  Roberts County            550        96.18       3.09\n  total_votes_16 dem_pct_16\n1            715       4.76\n2            365       8.49\n3            159       3.14\n4            550       3.64\n\n\n\n# Keep only data on counties in Texas where the Democrat got more than 65% of the vote in 2020\n# Do this 2 ways.\n# Method 1: 2 filters with 1 condition each\nelections_small |&gt;\n filter(state_name == \"Texas\") |&gt;\n filter(dem_pct_20 &gt; 65)\n\n  state_name     county_name total_votes_20 repub_pct_20 dem_pct_20\n1      Texas  El Paso County         267215        31.56      66.66\n2      Texas Presidio County           2217        32.52      65.99\n3      Texas   Travis County         610349        26.43      71.41\n4      Texas   Zavala County           4379        34.03      65.40\n  total_votes_16 dem_pct_16\n1         210458      69.14\n2           2203      66.18\n3         462511      66.26\n4           3390      77.67\n\n# Method 2: 1 filter with 2 conditions\nelections_small |&gt;\n filter(state_name == \"Texas\", dem_pct_20 &gt; 65)\n\n  state_name     county_name total_votes_20 repub_pct_20 dem_pct_20\n1      Texas  El Paso County         267215        31.56      66.66\n2      Texas Presidio County           2217        32.52      65.99\n3      Texas   Travis County         610349        26.43      71.41\n4      Texas   Zavala County           4379        34.03      65.40\n  total_votes_16 dem_pct_16\n1         210458      69.14\n2           2203      66.18\n3         462511      66.26\n4           3390      77.67\n\n\nExercise 3: arrange Demo\n\n# Arrange the counties in elections_small from lowest to highest percentage of 2020 Republican support\n# Print out just the first 6 rows\nelections_small |&gt;\n  arrange(repub_pct_20) |&gt;\n  head()\n\n            state_name            county_name total_votes_20 repub_pct_20\n1 District of Columbia   District of Columbia         344356         5.40\n2             Maryland Prince George's County         424855         8.73\n3             Maryland         Baltimore city         237461        10.69\n4             Virginia        Petersburg city          14118        11.22\n5             New York        New York County         694904        12.26\n6           California   San Francisco County         443458        12.72\n  dem_pct_20 total_votes_16 dem_pct_16\n1      92.15         280272      92.85\n2      89.26         351091      89.33\n3      87.28         208980      85.44\n4      87.75          13717      87.52\n5      86.78         591368      87.17\n6      85.27         365295      85.53\n\n\n\n# Arrange the counties in elections_small from highest to lowest percentage of 2020 Republican support\n# Print out just the first 6 rows\nelections_small |&gt;\n  arrange(desc(repub_pct_20)) |&gt;\n  head()\n\n  state_name      county_name total_votes_20 repub_pct_20 dem_pct_20\n1      Texas   Roberts County            550        96.18       3.09\n2      Texas    Borden County            416        95.43       3.85\n3      Texas      King County            159        94.97       5.03\n4    Montana  Garfield County            813        93.97       5.04\n5      Texas Glasscock County            653        93.57       5.97\n6   Nebraska     Grant County            402        93.28       4.98\n  total_votes_16 dem_pct_16\n1            550       3.64\n2            365       8.49\n3            159       3.14\n4            715       4.76\n5            602       5.65\n6            394       5.08\n\n\nExercise 4: mutate Demo\n\n# Define diff_20, the difference btwn the Repub and Dem percent in 2020\nelections_small |&gt; \n  mutate(diff_20 = repub_pct_20 - dem_pct_20) |&gt; \n  head()\n\n  state_name    county_name total_votes_20 repub_pct_20 dem_pct_20\n1    Alabama Autauga County          27770        71.44      27.02\n2    Alabama Baldwin County         109679        76.17      22.41\n3    Alabama Barbour County          10518        53.45      45.79\n4    Alabama    Bibb County           9595        78.43      20.70\n5    Alabama  Blount County          27588        89.57       9.57\n6    Alabama Bullock County           4613        24.84      74.70\n  total_votes_16 dem_pct_16 diff_20\n1          24661      23.96   44.42\n2          94090      19.57   53.76\n3          10390      46.66    7.66\n4           8748      21.42   57.73\n5          25384       8.47   80.00\n6           4701      75.09  -49.86\n\n\n\n# Define repub_votes_20, the number (not percent) of Repub votes in 2020\nelections_small |&gt; \n  mutate(repub_votes_20 = round(total_votes_20 * repub_pct_20/100)) |&gt; \n  head()\n\n  state_name    county_name total_votes_20 repub_pct_20 dem_pct_20\n1    Alabama Autauga County          27770        71.44      27.02\n2    Alabama Baldwin County         109679        76.17      22.41\n3    Alabama Barbour County          10518        53.45      45.79\n4    Alabama    Bibb County           9595        78.43      20.70\n5    Alabama  Blount County          27588        89.57       9.57\n6    Alabama Bullock County           4613        24.84      74.70\n  total_votes_16 dem_pct_16 repub_votes_20\n1          24661      23.96          19839\n2          94090      19.57          83542\n3          10390      46.66           5622\n4           8748      21.42           7525\n5          25384       8.47          24711\n6           4701      75.09           1146\n\n\n\n# Define repub_win_20, whether the Repub won in 2020 (TRUE or FALSE!)\nelections_small |&gt; \n  mutate(repub_win_20 = repub_pct_20 &gt; dem_pct_20) |&gt; \n  head()\n\n  state_name    county_name total_votes_20 repub_pct_20 dem_pct_20\n1    Alabama Autauga County          27770        71.44      27.02\n2    Alabama Baldwin County         109679        76.17      22.41\n3    Alabama Barbour County          10518        53.45      45.79\n4    Alabama    Bibb County           9595        78.43      20.70\n5    Alabama  Blount County          27588        89.57       9.57\n6    Alabama Bullock County           4613        24.84      74.70\n  total_votes_16 dem_pct_16 repub_win_20\n1          24661      23.96         TRUE\n2          94090      19.57         TRUE\n3          10390      46.66         TRUE\n4           8748      21.42         TRUE\n5          25384       8.47         TRUE\n6           4701      75.09        FALSE\n\n\nExercise 5: Pipe Series\nPart c\nIt’s more “computationally efficient” to get rid of some rows before arranging.\nPart e\nWe can’t select a variable before we define it!\nExercise 6: DIY Pipe Series\nPart a\nHere’s my translation:\n\njust the counties in Minnesota —&gt; filter\njust the counties in Minnesota and their Democratic 2020 vote percentage —&gt; select\nfrom highest to lowest —&gt; arrange\n\n\n# Remember to try this 1 line at a time\nelections_small |&gt; \n  filter(state_name == \"Minnesota\") |&gt; \n  select(county_name, dem_pct_20) |&gt; \n  arrange(desc(dem_pct_20))\n\n                county_name dem_pct_20\n1             Ramsey County      71.50\n2           Hennepin County      70.46\n3               Cook County      65.58\n4          St. Louis County      56.64\n5             Dakota County      55.73\n6            Olmsted County      54.16\n7         Washington County      53.46\n8         Blue Earth County      50.84\n9               Clay County      50.74\n10              Lake County      50.64\n11          Nicollet County      50.31\n12           Carlton County      49.58\n13            Winona County      49.07\n14              Rice County      48.76\n15          Mahnomen County      48.26\n16             Anoka County      47.79\n17          Beltrami County      47.24\n18            Carver County      46.37\n19             Mower County      46.00\n20             Scott County      45.52\n21           Houston County      42.42\n22           Goodhue County      41.23\n23          Freeborn County      40.96\n24            Norman County      40.80\n25            Itasca County      40.61\n26       Koochiching County      38.41\n27          Watonwan County      38.20\n28           Kittson County      38.12\n29           Stevens County      37.80\n30           Stearns County      37.58\n31          Fillmore County      37.48\n32            Steele County      37.47\n33         Kandiyohi County      36.12\n34            Aitkin County      35.98\n35              Lyon County      35.94\n36     Lac qui Parle County      35.79\n37           Wabasha County      35.78\n38             Grant County      35.58\n39          Traverse County      35.46\n40         Big Stone County      35.41\n41        Pennington County      35.29\n42              Pope County      35.27\n43              Polk County      34.88\n44              Cass County      34.68\n45            Wright County      34.49\n46           Hubbard County      34.42\n47             Swift County      34.35\n48         Crow Wing County      34.17\n49           Chisago County      34.15\n50            Becker County      33.96\n51              Pine County      33.87\n52          Le Sueur County      33.73\n53          Chippewa County      33.67\n54            Nobles County      33.65\n55            Waseca County      33.65\n56             Dodge County      33.47\n57        Otter Tail County      32.85\n58            Benton County      32.70\n59           Douglas County      32.56\n60             Brown County      32.48\n61         Sherburne County      32.48\n62         Faribault County      31.98\n63          Red Lake County      31.47\n64          Renville County      30.71\n65            McLeod County      30.64\n66   Yellow Medicine County      30.54\n67           Lincoln County      30.08\n68        Cottonwood County      30.03\n69           Kanabec County      30.02\n70            Martin County      30.02\n71           Jackson County      29.99\n72        Mille Lacs County      29.98\n73            Wilkin County      29.91\n74              Rock County      29.69\n75            Murray County      29.60\n76            Isanti County      29.45\n77            Sibley County      28.60\n78            Meeker County      28.58\n79           Redwood County      28.43\n80 Lake of the Woods County      27.87\n81        Clearwater County      26.76\n82         Pipestone County      26.44\n83            Wadena County      26.35\n84            Roseau County      25.98\n85          Marshall County      25.33\n86              Todd County      24.79\n87          Morrison County      22.33\n\n\nPart b\nHere’s my translation:\n\ncounties in Minnesota and Wisconsin —&gt; filter\nchange in Democratic vote percentage in 2020 vs 2016 —&gt; mutate (we don’t already have this)\nsorts the counties from highest to lowest —&gt; arrange\ninclude the following variables (and only these variables) —&gt; select\n\n\n# Remember to try this 1 line at a time before storing!\nmn_wi &lt;- elections_small |&gt; \n  filter(state_name %in% c(\"Minnesota\", \"Wisconsin\")) |&gt; \n  select(state_name, county_name, dem_pct_20, dem_pct_16) |&gt;\n  mutate(dem_change = dem_pct_20 - dem_pct_16) |&gt; \n  arrange(dem_change)\n  \n# Check it out\nhead(mn_wi)\n\n  state_name        county_name dem_pct_20 dem_pct_16 dem_change\n1  Minnesota     Stevens County      37.80      39.55      -1.75\n2  Wisconsin      Forest County      34.06      35.12      -1.06\n3  Wisconsin    Kewaunee County      32.87      33.73      -0.86\n4  Wisconsin       Clark County      30.37      31.19      -0.82\n5  Wisconsin       Adams County      36.63      37.40      -0.77\n6  Wisconsin Trempealeau County      40.86      41.57      -0.71\n\n\nPart c\nThere was a stronger Dem shift from 2016 to 2020 in Minnesota. Further, in most counties across both states, the percent Dem tended to be higher in 2020 than in 2016.\n\nggplot(mn_wi, aes(x = dem_change, fill = state_name)) + \n  geom_density(alpha = 0.5)\n\n\n\n\n\n\nggplot(mn_wi, aes(y = dem_change, x = state_name)) + \n  geom_boxplot()\n\n\n\n\n\n\n\nExercise 7: summarize Demo\n\n# Calculate the median Repub vote percentage in 2020 across all counties\nelections_small |&gt; \n  summarize(median(repub_pct_20))\n\n  median(repub_pct_20)\n1                68.29\n\n\n\n# Calculate the median Repub vote percentage in 2020 across all counties\n# AND name it \"median_repub\"\nelections_small |&gt; \n  summarize(median_repub = median(repub_pct_20))\n\n  median_repub\n1        68.29\n\n\n\n# Calculate the median Repub vote percentage in 2020 across all counties\n# AND the total number of votes across all counties\n# AND name the results\nelections_small |&gt; \n  summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20))\n\n  median_repub total_votes\n1        68.29   157949293\n\n\nExercise 8: summarize + group_by demo\n\n# Calculate the median 2020 Repub percent and total votes BY STATE\nelections_small |&gt; \n  group_by(state_name) |&gt; \n  summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20)) \n\n# A tibble: 50 × 3\n   state_name           median_repub total_votes\n   &lt;chr&gt;                       &lt;dbl&gt;       &lt;int&gt;\n 1 Alabama                      70.6     2323304\n 2 Arizona                      57.9     3387326\n 3 Arkansas                     72.1     1219069\n 4 California                   44.8    17495906\n 5 Colorado                     56.2     3256953\n 6 Connecticut                  41.0     1824280\n 7 Delaware                     47.1      504010\n 8 District of Columbia          5.4      344356\n 9 Florida                      64.6    11067456\n10 Georgia                      68       4997716\n# ℹ 40 more rows\n\n\nExercise 9: DIY\nPart a\n\n# Sort the states from the most to least total votes in 2020\nelections_small |&gt; \n  group_by(state_name) |&gt; \n  summarize(total = sum(total_votes_20)) |&gt; \n  arrange(desc(total))\n\n# A tibble: 50 × 2\n   state_name        total\n   &lt;chr&gt;             &lt;int&gt;\n 1 California     17495906\n 2 Texas          11317911\n 3 Florida        11067456\n 4 New York        8616205\n 5 Pennsylvania    6925255\n 6 Illinois        6038850\n 7 Ohio            5922202\n 8 Michigan        5539302\n 9 North Carolina  5524801\n10 Georgia         4997716\n# ℹ 40 more rows\n\n\n\n# In 2020, what were the total number of votes for the Democratic candidate and the total number of votes for the Republican candidate in each *state*?\nelections_small |&gt; \n  mutate(dem_votes_20 = round(total_votes_20 * dem_pct_20 / 100), \n         repub_votes_20 = round(total_votes_20 * repub_pct_20 / 100)) |&gt; \n  group_by(state_name) |&gt; \n  summarize(dem_total = sum(dem_votes_20),\n            repub_total = sum(repub_votes_20))\n\n# A tibble: 50 × 3\n   state_name           dem_total repub_total\n   &lt;chr&gt;                    &lt;dbl&gt;       &lt;dbl&gt;\n 1 Alabama                 849664     1441155\n 2 Arizona                1672127     1661671\n 3 Arkansas                423919      760641\n 4 California            11109642     6006031\n 5 Colorado               1804393     1364627\n 6 Connecticut            1080677      715315\n 7 Delaware                296274      200601\n 8 District of Columbia    317324       18595\n 9 Florida                5297131     5668600\n10 Georgia                2473661     2461869\n# ℹ 40 more rows\n\n\n\n# What states did the Democratic candidate win in 2020?\nelections_small |&gt; \n  mutate(dem_votes_20 = round(total_votes_20 * dem_pct_20 / 100), \n         repub_votes_20 = round(total_votes_20 * repub_pct_20 / 100)) |&gt; \n  group_by(state_name) |&gt; \n  summarize(dem_total = sum(dem_votes_20),\n            repub_total = sum(repub_votes_20)) |&gt; \n  filter(dem_total &gt; repub_total)\n\n# A tibble: 26 × 3\n   state_name           dem_total repub_total\n   &lt;chr&gt;                    &lt;dbl&gt;       &lt;dbl&gt;\n 1 Arizona                1672127     1661671\n 2 California            11109642     6006031\n 3 Colorado               1804393     1364627\n 4 Connecticut            1080677      715315\n 5 Delaware                296274      200601\n 6 District of Columbia    317324       18595\n 7 Georgia                2473661     2461869\n 8 Hawaii                  366121      196865\n 9 Illinois               3471916     2446931\n10 Maine                   430466      359897\n# ℹ 16 more rows\n\n\nExercise 10: Practice on New Data\n\n# In what years did Brazil win the World Cup?\nworld_cup |&gt; \n  filter(winner == \"Brazil\")\n\n  year               host winner         second        third       fourth\n1 1958             Sweden Brazil         Sweden       France West Germany\n2 1962              Chile Brazil Czechoslovakia        Chile   Yugoslavia\n3 1970             Mexico Brazil          Italy West Germany      Uruguay\n4 1994                USA Brazil          Italy       Sweden     Bulgaria\n5 2002 Japan, South Korea Brazil        Germany       Turkey  South Korea\n  goals_scored teams games attendance\n1          126    16    35     868000\n2           89    16    32     776000\n3           95    16    32    1673975\n4          141    24    52    3568567\n5          161    32    64    2724604\n\n\n\n# What were the 6 World Cups with the highest attendance?\nworld_cup |&gt; \n  arrange(desc(attendance)) |&gt; \n  head()\n\n  year               host  winner    second       third      fourth\n1 1994                USA  Brazil     Italy      Sweden    Bulgaria\n2 2014             Brazil Germany Argentina Netherlands      Brazil\n3 2006            Germany   Italy    France     Germany    Portugal\n4 2018             Russia  France   Croatia     Belgium     England\n5 1998             France  France    Brazil     Croatia Netherlands\n6 2002 Japan, South Korea  Brazil   Germany      Turkey South Korea\n  goals_scored teams games attendance\n1          141    24    52    3568567\n2          171    32    64    3441450\n3          147    32    64    3367000\n4          169    32    64    3031768\n5          171    32    64    2859234\n6          161    32    64    2724604\n\n\n\n# Construct a univariate plot of goals_scored (no wrangling necessary)\n# This provides a visual summary of how the number of goals_scored varies from World Cup to World Cup\nggplot(world_cup, aes(x = goals_scored)) + \n  geom_histogram(color = \"white\")\n\n\n\n\n\n\n\n\n# Let's follow up the plot with some more precise numerical summaries\n# Calculate the min, median, and max number of goals_scored across all World Cups\n# NOTE: Visually compare these numerical summaries to what you observed in the plot\nworld_cup |&gt; \n  summarize(min(goals_scored), median(goals_scored), max(goals_scored))\n\n  min(goals_scored) median(goals_scored) max(goals_scored)\n1                70                  126               171\n\n\n\n# Construct a bivariate plot of how the number of goals_scored in the World Cup has changed over the years\n# No wrangling necessary\nggplot(world_cup, aes(x = year, y = goals_scored)) + \n  geom_point() + \n  geom_line()\n\n\n\n\n\n\n\n\n# Our above summaries might be a bit misleading.\n# The number of games played at the World Cup varies.\n# Construct a bivariate plot of how the typical number of goals per game has changed over the years\nper_game_data &lt;- world_cup |&gt; \n  mutate(goals_per_game = goals_scored / games)\n\nggplot(per_game_data, aes(x = year, y = goals_per_game)) + \n  geom_point() + \n  geom_line()",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Wrangling</span>"
    ]
  },
  {
    "objectID": "ica/ica-strings.html",
    "href": "ica/ica-strings.html",
    "title": "\n16  strings\n",
    "section": "",
    "text": "16.1 Review\nWHERE ARE WE?\nWe’re in the last day of our “data preparation” unit:",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>strings</span>"
    ]
  },
  {
    "objectID": "ica/ica-strings.html#strings",
    "href": "ica/ica-strings.html#strings",
    "title": "\n16  strings\n",
    "section": "\n16.2 Strings",
    "text": "16.2 Strings\nIn the previous class, we started discussing some considerations in working with special types of “categorical” variables: characters and factors which are:\n\nConverting characters to factors (and factors to meaningful factors)–last time\nWhen categorical information is stored as a character variable, the categories of interest might not be labeled or ordered in a meaningful way. We can fix that!\nStrings–today!\nWhen working with character strings, we might want to detect, replace, or extract certain patterns. For example, recall our data on courses:\n\n\n\n    sessionID dept level    sem enroll     iid\n1 session1784    M   100 FA1991     22 inst265\n2 session1785    k   100 FA1991     52 inst458\n3 session1791    J   100 FA1993     22 inst223\n4 session1792    J   300 FA1993     20 inst235\n5 session1794    J   200 FA1993     22 inst234\n6 session1795    J   200 SP1994     26 inst230\n\n\n'data.frame':   1718 obs. of  6 variables:\n $ sessionID: chr  \"session1784\" \"session1785\" \"session1791\" \"session1792\" ...\n $ dept     : chr  \"M\" \"k\" \"J\" \"J\" ...\n $ level    : int  100 100 100 300 200 200 200 100 300 100 ...\n $ sem      : chr  \"FA1991\" \"FA1991\" \"FA1993\" \"FA1993\" ...\n $ enroll   : int  22 52 22 20 22 26 25 38 16 43 ...\n $ iid      : chr  \"inst265\" \"inst458\" \"inst223\" \"inst235\" ...\n\n\nFocusing on just the sem character variable, we might want to…\n\nchange FA to fall_ and SP to spring_\n\nkeep only courses taught in fall\nsplit the variable into 2 new variables: semester (FA or SP) and year\n\n\n\nMuch more!–maybe in your projects or COMP/STAT 212\nThere are a lot of ways to process character variables. For example, we might have a variable that records the text for a sample of news articles. We might want to analyze things like the articles’ sentiments, word counts, typical word lengths, most common words, etc.\n\nEssential Functions\nThe stringr package within tidyverse contains lots of functions to help process strings. We’ll focus on the most common. Letting x be a string variable…\n\n\nfunction\narguments\nreturns\n\n\n\nstr_replace()\nx, pattern, replacement\na modified string\n\n\nstr_replace_all()\nx, pattern, replacement\na modified string\n\n\nstr_to_lower()\nx\na modified string\n\n\nstr_sub()\nx, start, end\na modified string\n\n\nstr_length()\nx\na number\n\n\nstr_detect()\nx, pattern\nTRUE/FALSE\n\n\nExample 1\nConsider the following data with string variables :\n\nCodelibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nCodeclasses &lt;- data.frame(\n  sem        = c(\"SP2023\", \"FA2023\", \"SP2024\"),\n  area       = c(\"History\", \"Math\", \"Anthro\"),\n  enroll     = c(\"30 - people\", \"20 - people\", \"25 - people\"),\n  instructor = c(\"Ernesto Capello\", \"Lori Ziegelmeier\", \"Arjun Guneratne\")\n)\n\nclasses\n\n     sem    area      enroll       instructor\n1 SP2023 History 30 - people  Ernesto Capello\n2 FA2023    Math 20 - people Lori Ziegelmeier\n3 SP2024  Anthro 25 - people  Arjun Guneratne\n\n\nUsing only your intuition, use our str_ functions to complete the following. NOTE: You might be able to use other wrangling verbs in some cases, but focus on the new functions here.\n\nCode# Define a new variable \"num\" that adds up the number of characters in the area label\n\nclasses |&gt;\n  mutate(num = str_length(area))\n\n     sem    area      enroll       instructor num\n1 SP2023 History 30 - people  Ernesto Capello   7\n2 FA2023    Math 20 - people Lori Ziegelmeier   4\n3 SP2024  Anthro 25 - people  Arjun Guneratne   6\n\n\n\nCode# Change the areas to \"history\", \"math\", \"anthro\" instead of \"History\", \"Math\", \"Anthro\"\n\nclasses |&gt;\n  mutate(area = str_replace(area, \"History\", \"history\")) |&gt;\n  mutate(area = str_replace(area, \"Math\", \"math\")) |&gt;\n  mutate(area = str_replace(area, \"Anthro\", \"anthro\"))\n\n     sem    area      enroll       instructor\n1 SP2023 history 30 - people  Ernesto Capello\n2 FA2023    math 20 - people Lori Ziegelmeier\n3 SP2024  anthro 25 - people  Arjun Guneratne\n\n\n\nCode# Create a variable that id's which courses were taught in spring\nclasses |&gt;\n  mutate(in_spring = str_detect(sem, \"SP\"))\n\n     sem    area      enroll       instructor in_spring\n1 SP2023 History 30 - people  Ernesto Capello      TRUE\n2 FA2023    Math 20 - people Lori Ziegelmeier     FALSE\n3 SP2024  Anthro 25 - people  Arjun Guneratne      TRUE\n\n\n\nCode# Change the semester labels to \"fall2023\", \"spring2024\", \"spring2023\"\n\nclasses |&gt;\n  mutate(sem = str_replace(sem, \"SP2023\", \"spring2023\")) |&gt;\n  mutate(sem = str_replace(sem, \"SP2024\", \"spring2024\")) |&gt;\n  mutate(sem = str_replace(sem, \"FA2023\", \"fall2023\"))\n\n         sem    area      enroll       instructor\n1 spring2023 History 30 - people  Ernesto Capello\n2   fall2023    Math 20 - people Lori Ziegelmeier\n3 spring2024  Anthro 25 - people  Arjun Guneratne\n\n\n\nCode# In the enroll variable, change all e's to 3's (just because?)\n\nclasses |&gt;\n  mutate(enroll = str_replace(enroll, \"e\", \"3\"))\n\n     sem    area      enroll       instructor\n1 SP2023 History 30 - p3ople  Ernesto Capello\n2 FA2023    Math 20 - p3ople Lori Ziegelmeier\n3 SP2024  Anthro 25 - p3ople  Arjun Guneratne\n\n\n\nCode# Use sem to create 2 new variables, one with only the semester (SP/FA) and 1 with the year\n\nclasses |&gt;\n  mutate(Year = str_sub(sem, 3, 6)) |&gt;\n  mutate(Semester = str_sub(sem, 0, 2)) |&gt;\n  mutate(Semester = str_replace(Semester, \"SP\", \"Spring\")) |&gt;\n  mutate(Semester = str_replace(Semester, \"FA\", \"Fall\"))\n\n     sem    area      enroll       instructor Year Semester\n1 SP2023 History 30 - people  Ernesto Capello 2023   Spring\n2 FA2023    Math 20 - people Lori Ziegelmeier 2023     Fall\n3 SP2024  Anthro 25 - people  Arjun Guneratne 2024   Spring\n\n\nSummary\nHere’s what we learned about each function:\n\nstr_replace(x, pattern, replacement) finds the first part of x that matches the pattern and replaces it with replacement\nstr_replace_all(x, pattern, replacement) finds all instances in x that matches the pattern and replaces it with replacement\nstr_to_lower(x) converts all upper case letters in x to lower case\nstr_sub(x, start, end) only keeps a subset of characters in x, from start (a number indexing the first letter to keep) to end (a number indexing the last letter to keep)\nstr_length(x) records the number of characters in x\nstr_detect(x, pattern) is TRUE if x contains the given pattern and FALSE otherwise\n\n16.2.1 Example 2\nSuppose we only want the spring courses:\n\nCode# How can we do this after mutating?\nclasses |&gt; \n  mutate(spring = str_detect(sem, \"SP\")) |&gt;\n  filter(spring == TRUE)\n\n     sem    area      enroll      instructor spring\n1 SP2023 History 30 - people Ernesto Capello   TRUE\n2 SP2024  Anthro 25 - people Arjun Guneratne   TRUE\n\n\n\nCode# We don't have to mutate first!\nclasses |&gt; \n  filter(str_detect(sem, \"SP\"))\n\n     sem    area      enroll      instructor\n1 SP2023 History 30 - people Ernesto Capello\n2 SP2024  Anthro 25 - people Arjun Guneratne\n\n\n\nCode# Yet another way\nclasses |&gt; \n  filter(!str_detect(sem, \"FA\"))\n\n     sem    area      enroll      instructor\n1 SP2023 History 30 - people Ernesto Capello\n2 SP2024  Anthro 25 - people Arjun Guneratne\n\n\n\n16.2.2 Example 3\nSuppose we wanted to get separate columns for the first and last names of each course instructor in classes. Try doing this using str_sub(). But don’t try too long! Explain what trouble you ran into.\n\n16.2.3 Example 4\nIn general, when we want to split a column into 2+ new columns, we can often use separate():\n\nCodeclasses |&gt; \n  separate(instructor, c(\"first\", \"last\"), sep = \" \")\n\n     sem    area      enroll   first        last\n1 SP2023 History 30 - people Ernesto     Capello\n2 FA2023    Math 20 - people    Lori Ziegelmeier\n3 SP2024  Anthro 25 - people   Arjun   Guneratne\n\n\n\nCode# Sometimes the function can \"intuit\" how we want to separate the variable\nclasses |&gt; \n  separate(instructor, c(\"first\", \"last\"))\n\n     sem    area      enroll   first        last\n1 SP2023 History 30 - people Ernesto     Capello\n2 FA2023    Math 20 - people    Lori Ziegelmeier\n3 SP2024  Anthro 25 - people   Arjun   Guneratne\n\n\n\nSeparate enroll into 2 separate columns: students and people. (These columns don’t make sense this is just practice).\n\n\nCodeclasses |&gt;\n  separate(enroll, c(\"students\", \"people\"), sep = \" - \")\n\n     sem    area students people       instructor\n1 SP2023 History       30 people  Ernesto Capello\n2 FA2023    Math       20 people Lori Ziegelmeier\n3 SP2024  Anthro       25 people  Arjun Guneratne\n\n\n\nWe separated sem into semester and year above using str_sub(). Why would this be hard using separate()?\n\n\nBecause there is nothing separating them\n\n\nWhen we want to split a column into 2+ new columns (or do other types of string processing), but there’s no consistent pattern by which to do this, we can use regular expressions (an optional topic):\n\n\nCode# (?&lt;=[SP|FA]): any character *before* the split point is a \"SP\" or \"FA\"\n# (?=2): the first character *after* the split point is a 2\nclasses |&gt; \n  separate(sem, \n          c(\"semester\", \"year\"),\n          \"(?&lt;=[SP|FA])(?=2)\")\n\n  semester year    area      enroll       instructor\n1       SP 2023 History 30 - people  Ernesto Capello\n2       FA 2023    Math 20 - people Lori Ziegelmeier\n3       SP 2024  Anthro 25 - people  Arjun Guneratne\n\n\n\nCode# More general:\n# (?&lt;=[a-zA-Z]): any character *before* the split point is a lower or upper case letter\n# (?=[0-9]): the first character *after* the split point is number\nclasses |&gt; \n  separate(sem, \n          c(\"semester\", \"year\"),\n          \"(?&lt;=[A-Z])(?=[0-9])\")\n\n  semester year    area      enroll       instructor\n1       SP 2023 History 30 - people  Ernesto Capello\n2       FA 2023    Math 20 - people Lori Ziegelmeier\n3       SP 2024  Anthro 25 - people  Arjun Guneratne",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>strings</span>"
    ]
  },
  {
    "objectID": "ica/ica-strings.html#exercises",
    "href": "ica/ica-strings.html#exercises",
    "title": "\n16  strings\n",
    "section": "\n16.3 Exercises",
    "text": "16.3 Exercises\nExercise 1: Time slots\nThe courses data includes actual data scraped from Mac’s class schedule. (Thanks to Prof Leslie Myint for the scraping code!!)\nIf you want to learn how to scrape data, take COMP/STAT 212, Intermediate Data Science! NOTE: For simplicity, I removed classes that had “TBA” for the days.\n\nCodecourses &lt;- read.csv(\"https://mac-stat.github.io/data/registrar.csv\")\n\n# Check it out\nhead(courses)\n\n       number   crn                                                name  days\n1 AMST 112-01 10318         Introduction to African American Literature M W F\n2 AMST 194-01 10073              Introduction to Asian American Studies M W F\n3 AMST 194-F1 10072 What’s After White Empire - And Is It Already Here?  T R \n4 AMST 203-01 10646 Politics and Inequality: The American Welfare State M W F\n5 AMST 205-01 10842                         Trans Theories and Politics  T R \n6 AMST 209-01 10474                   Civil Rights in the United States   W  \n             time      room             instructor avail_max\n1 9:40 - 10:40 am  MAIN 009       Daylanne English    3 / 20\n2  1:10 - 2:10 pm MUSIC 219          Jake Nagasawa   -4 / 16\n3  3:00 - 4:30 pm   HUM 214 Karin Aguilar-San Juan    0 / 14\n4 9:40 - 10:40 am  CARN 305          Lesley Lavery    3 / 25\n5  3:00 - 4:30 pm  MAIN 009              Myrl Beam   -2 / 20\n6 7:00 - 10:00 pm  MAIN 010         Walter Greason   -1 / 15\n\n\nUse our more familiar wrangling tools to warm up.\n\nCode# Construct a table that indicates the number of classes offered in each day/time slot\n# Print only the 6 most popular time slots\n\ncourses |&gt;\n  select(days, time) |&gt;\n  group_by(days) |&gt;\n  count(days) |&gt;\n  arrange(desc(n))\n\n# A tibble: 12 × 2\n# Groups:   days [12]\n   days        n\n   &lt;chr&gt;   &lt;int&gt;\n 1 \"M W F\"   325\n 2 \" T R \"   215\n 3 \" T   \"    68\n 4 \"   R \"    64\n 5 \"M    \"    36\n 6 \"  W  \"    32\n 7 \"M W  \"    25\n 8 \"    F\"     5\n 9 \"\"          1\n10 \"  W F\"     1\n11 \"M WR \"     1\n12 \"MTWR \"     1\n\n\nExercise 2: Prep the data\nSo that we can analyze it later, we want to wrangle the courses data:\n\nLet’s get some enrollment info:\n\nSplit avail_max into 2 separate variables: avail and max.\nUse avail and max to define a new variable called enroll. HINT: You’ll need as.numeric()\n\n\n\nSplit the course number into 3 separate variables: dept, number, and section. HINT: You can use separate() to split a variable into 3, not just 2 new variables.\n\nStore this as courses_clean so that you can use it later.\n\nCodecourses_clean &lt;- courses |&gt; \n  separate(avail_max, c(\"avail\", \"max\"), sep = \"/\") |&gt;\n  mutate(avail = as.numeric(avail)) |&gt;\n  mutate(max = as.numeric(max)) |&gt;\n  separate(number, c(\"dept\", \"number\"), sep = \" \") |&gt;\n  separate(number, c(\"number\", \"section\")) |&gt;\n  mutate(number = as.numeric(number))\n\n\nExercise 3: Courses by department\nUsing courses_clean…\n\nCode# Identify the 6 departments that offered the most sections\ncourses_clean |&gt;\n  group_by(dept) |&gt;\n  count(dept) |&gt;\n  arrange(desc(n))\n\n# A tibble: 40 × 2\n# Groups:   dept [40]\n   dept      n\n   &lt;chr&gt; &lt;int&gt;\n 1 SPAN     45\n 2 BIOL     44\n 3 ENVI     38\n 4 PSYC     37\n 5 CHEM     33\n 6 COMP     31\n 7 ENGL     30\n 8 ECON     29\n 9 POLI     27\n10 FREN     26\n# ℹ 30 more rows\n\nCode# Identify the 6 departments with the longest average course titles\ncourses_clean |&gt;\n  mutate(title_length = str_length(name)) |&gt;\n  group_by(dept) |&gt;\n  summarise(average_title_length = mean(title_length)) |&gt;\n  arrange(desc(average_title_length))\n\n# A tibble: 40 × 2\n   dept  average_title_length\n   &lt;chr&gt;                &lt;dbl&gt;\n 1 WGSS                  46.3\n 2 INTL                  41.4\n 3 EDUC                  39.4\n 4 MCST                  39.4\n 5 POLI                  37.4\n 6 AMST                  37.3\n 7 ASIA                  36.8\n 8 SOCI                  36.2\n 9 ENGL                  35.7\n10 LATI                  34.4\n# ℹ 30 more rows\n\n\nExercise 4: STAT courses\nPart a\nGet a subset of courses_clean that only includes courses taught by Alicia Johnson.\n\nCodecourses_clean |&gt;\n  filter(str_detect(instructor, \"Alicia Johnson\"))\n\n  dept number section   crn                         name  days            time\n1 STAT    253      01 10806 Statistical Machine Learning  T R  9:40 - 11:10 am\n2 STAT    253      02 10807 Statistical Machine Learning  T R   1:20 - 2:50 pm\n3 STAT    253      03 10808 Statistical Machine Learning  T R   3:00 - 4:30 pm\n        room     instructor avail max\n1 THEATR 206 Alicia Johnson    -3  20\n2 THEATR 206 Alicia Johnson    -3  20\n3 THEATR 206 Alicia Johnson     2  20\n\n\nPart b\nCreate a new dataset from courses_clean, named stat, that only includes STAT sections. In this dataset:\n\n\nIn the course names:\n\nRemove “Introduction to” from any name.\nShorten “Statistical” to “Stat” where relevant.\n\n\nDefine a variable that records the start_time for the course.\nKeep only the number, name, start_time, enroll columns.\nThe result should have 19 rows and 4 columns.\n\n\nCodestat &lt;- courses_clean |&gt;\n  filter(str_detect(dept, \"STAT\")) |&gt;\n  filter(!str_detect(name, \"Introduction to\")) |&gt;\n  mutate(name = str_replace(name, \"Statistical\", \"Stat\")) |&gt;\n  separate(time, c(\"start_time\"), sep = \"-\") |&gt;\n  select(-instructor, -room, -days, -crn, -section, number, -dept, -section)\n\nWarning: Expected 1 pieces. Additional pieces discarded in 10 rows [1, 2, 3, 4, 5, 6, 7,\n8, 9, 10].\n\n\nExercise 5: More cleaning\nIn the next exercises, we’ll dig into enrollments. Let’s get the data ready for that analysis here. Make the following changes to the courses_clean data. Because they have different enrollment structures, and we don’t want to compare apples and oranges, remove the following:\n\nall sections in PE and INTD (interdisciplinary studies courses)\nall music ensembles and dance practicums, i.e. all MUSI and THDA classes with numbers less than 100. HINT: !(dept == \"MUSI\" & as.numeric(number) &lt; 100)\nall lab sections. Be careful which variable you use here. For example, you don’t want to search by “Lab” and accidentally eliminate courses with words such as “Labor”.\n\nSave the results as enrollments (don’t overwrite courses_clean).\n\nCodeenrollments &lt;- courses_clean |&gt;\n  filter(!str_detect(dept, \"PE\")) |&gt;\n  filter(!str_detect(dept, \"INTD\")) |&gt;\n  filter(!(dept == \"MUSI\" & number &lt; 100)) |&gt;\n  filter(!(dept == \"THDA\" & number &lt; 100)) |&gt;\n  filter(!str_detect(section, \"L\"))\n\n\nExercise 6: Enrollment & departments\nExplore enrollments by department. You decide what research questions to focus on. Use both visual and numerical summaries.\n\nWhich departments have the highest max seats\nWhich departments have the lowest ratio of available seats to max seats\nExercise 7: Enrollment & faculty\nLet’s now explore enrollments by instructor. In doing so, we have to be cautious of cross-listed courses that are listed under multiple different departments. Uncomment the code lines in the chunk below for an example.\n\n\n\n\n\n\nCommenting/Uncommenting Code\n\n\n\nTo comment/uncomment several lines of code at once, highlight them then click ctrl/cmd+shift+c.\n\n\n\nCodeenrollments |&gt;\n  filter(dept %in% c(\"STAT\", \"COMP\"), number == 112, section == \"01\")\n\n  dept number section   crn                         name  days           time\n1 COMP    112      01 10248 Introduction to Data Science  T R  3:00 - 4:30 pm\n2 STAT    112      01 10249 Introduction to Data Science  T R  3:00 - 4:30 pm\n      room        instructor avail max\n1 OLRI 254 Brianna Heggeseth     1  28\n2 OLRI 254 Brianna Heggeseth     1  28\n\n\nNotice that these are the exact same section! In order to not double count an instructor’s enrollments, we can keep only the courses that have distinct() combinations of days, time, instructor values. Uncomment the code lines in the chunk below.\n\nCodeenrollments_2 &lt;- enrollments |&gt;\n  distinct(days, time, instructor, .keep_all = TRUE)\n\n# NOTE: By default this keeps the first department alphabetically\n# That's fine because we won't use this to analyze department enrollments!\nenrollments_2 |&gt;\n  filter(instructor == \"Brianna Heggeseth\", name == \"Introduction to Data Science\")\n\n  dept number section   crn                         name  days           time\n1 COMP    112      01 10248 Introduction to Data Science  T R  3:00 - 4:30 pm\n      room        instructor avail max\n1 OLRI 254 Brianna Heggeseth     1  28\n\n\nNow, explore enrollments by instructor. You decide what research questions to focus on. Use both visual and numerical summaries.\nCAVEAT: The above code doesn’t deal with co-taught courses that have more than one instructor. Thus instructors that co-taught are recorded as a pair, and their co-taught enrollments aren’t added to their total enrollments. This is tough to get around with how the data were scraped as the instructor names are smushed together, not separated by a comma!\n\nCodeenrollments_2 |&gt;\n  group_by(dept) |&gt;\n  summarize(total_max_seats = sum(max)) |&gt;\n  ggplot(aes(x = dept, y = total_max_seats)) +\n    geom_point()\n\n\n\n\n\n\nCodeggplot(enrollments_2, aes(x = max, fill = dept)) +\n  geom_histogram(color = \"white\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\nCodeggplot(enrollments_2, aes(x = avail, fill = dept)) +\n  geom_density(alpha = 0.25)\n\nWarning: Groups with fewer than two data points have been dropped.\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nOptional extra practice\n\nCode# Make a bar plot showing the number of night courses by day of the week\n# Use courses_clean\n\ncourses_clean |&gt;\n  filter(str_detect(time, \"pm\")) |&gt;\n  separate(time, c(\"start_time\"), sep = \"-\") |&gt;\n  filter(str_detect(start_time, \"7\")) |&gt;\n  ggplot(aes(x = days)) +\n    geom_bar()\n\nWarning: Expected 1 pieces. Additional pieces discarded in 454 rows [1, 2, 3, 4, 5, 6,\n7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...].\n\n\n\n\n\n\n\n\nDig Deeper: regex\nExample 4 gave 1 small example of a regular expression.\nThese are handy when we want process a string variable, but there’s no consistent pattern by which to do this. You must think about the structure of the string and how you can use regular expressions to capture the patterns you want (and exclude the patterns you don’t want).\nFor example, how would you describe the pattern of a 10-digit phone number? Limit yourself to just a US phone number for now.\n\nThe first 3 digits are the area code.\nThe next 3 digits are the exchange code.\nThe last 4 digits are the subscriber number.\n\nThus, a regular expression for a US phone number could be:\n\n\n[:digit:]{3}-[:digit:]{3}-[:digit:]{4} which limits you to XXX-XXX-XXXX pattern or\n\n\\\\([:digit:]{3}\\\\) [:digit:]{3}-[:digit:]{4} which limits you to (XXX) XXX-XXXX pattern or\n\n[:digit:]{3}\\\\.[:digit:]{3}\\\\.[:digit:]{4} which limits you to XXX.XXX.XXXX pattern\n\nThe following would include the three patterns above in addition to the XXXXXXXXXX pattern (no dashes or periods): - [\\\\(]*[:digit:]{3}[-.\\\\)]*[:digit:]{3}[-.]*[:digit:]{4}\nIn order to write a regular expression, you first need to consider what patterns you want to include and exclude.\nWork through the following examples, and the tutorial after them to learn about the syntax.\nEXAMPLES\n\nCode# Define some strings to play around with\nexample &lt;- \"The quick brown fox jumps over the lazy dog.\"\n\n\n\nCodestr_replace(example, \"quick\", \"really quick\")\n\n[1] \"The really quick brown fox jumps over the lazy dog.\"\n\n\n\nCodestr_replace_all(example, \"(fox|dog)\", \"****\") # | reads as OR\n\n[1] \"The quick brown **** jumps over the lazy ****.\"\n\n\n\nCodestr_replace_all(example, \"(fox|dog).\", \"****\") # \".\" for any character\n\n[1] \"The quick brown ****jumps over the lazy ****\"\n\n\n\nCodestr_replace_all(example, \"(fox|dog)\\\\.$\", \"****\") # at end of sentence only, \"\\\\.\" only for a period\n\n[1] \"The quick brown fox jumps over the lazy ****\"\n\n\n\nCodestr_replace_all(example, \"the\", \"a\") # case-sensitive only matches one\n\n[1] \"The quick brown fox jumps over a lazy dog.\"\n\n\n\nCodestr_replace_all(example, \"[Tt]he\", \"a\") # # will match either t or T; could also make \"a\" conditional on capitalization of t\n\n[1] \"a quick brown fox jumps over a lazy dog.\"\n\n\n\nCodestr_replace_all(example, \"[Tt]he\", \"a\") # first match only\n\n[1] \"a quick brown fox jumps over a lazy dog.\"\n\n\n\nCode# More examples\nexample2 &lt;- \"Two roads diverged in a yellow wood, / And sorry I could not travel both / And be one traveler, long I stood / And looked down one as far as I could\"\nexample3 &lt;- \"This is a test\"\n\n# Store the examples in 1 place\nexamples &lt;- c(example, example2, example3)\n\n\n\nCodepat &lt;- \"[^aeiouAEIOU ]{3}\" # Regular expression for three straight consonants. Note that I've excluded spaces as well\n\nstr_detect(examples, pat) # TRUE/FALSE if it detects pattern\n\n[1]  TRUE  TRUE FALSE\n\n\n\nCodestr_subset(examples, pat) # Pulls out those that detects pattern\n\n[1] \"The quick brown fox jumps over the lazy dog.\"                                                                                                        \n[2] \"Two roads diverged in a yellow wood, / And sorry I could not travel both / And be one traveler, long I stood / And looked down one as far as I could\"\n\n\n\nCodepat2 &lt;- \"[^aeiouAEIOU ][aeiouAEIOU]{2}[^aeiouAEIOU ]{1}\" # consonant followed by two vowels followed by a consonant\n\nstr_extract(example2, pat2) # extract first match\n\n[1] \"road\"\n\n\n\nCodestr_extract_all(example2, pat2, simplify = TRUE) # extract all matches\n\n     [,1]   [,2]   [,3]   [,4]   [,5]   [,6]  \n[1,] \"road\" \"wood\" \"coul\" \"tood\" \"look\" \"coul\"\n\n\nTUTORIAL\nTry out this interactive tutorial. Note that neither the tutorial nor regular expressions more generally are specific to R, but it still illustrates the main ideas of regular expressions.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>strings</span>"
    ]
  },
  {
    "objectID": "ica/ica-strings.html#solutions",
    "href": "ica/ica-strings.html#solutions",
    "title": "\n16  strings\n",
    "section": "\n16.4 Solutions",
    "text": "16.4 Solutions\n\nClick for Solutions\n\n16.4.1 Example 1\n\nCode# Define a new variable \"num\" that adds up the number of characters in the area label\nclasses |&gt; \n  mutate(num = str_length(area))\n\n     sem    area      enroll       instructor num\n1 SP2023 History 30 - people  Ernesto Capello   7\n2 FA2023    Math 20 - people Lori Ziegelmeier   4\n3 SP2024  Anthro 25 - people  Arjun Guneratne   6\n\nCode# Change the areas to \"history\", \"math\", \"anthro\"\nclasses |&gt; \n  mutate(area = str_to_lower(area))\n\n     sem    area      enroll       instructor\n1 SP2023 history 30 - people  Ernesto Capello\n2 FA2023    math 20 - people Lori Ziegelmeier\n3 SP2024  anthro 25 - people  Arjun Guneratne\n\nCode# Create a variable that id's which courses were taught in spring \nclasses |&gt; \n  mutate(spring = str_detect(sem, \"SP\"))\n\n     sem    area      enroll       instructor spring\n1 SP2023 History 30 - people  Ernesto Capello   TRUE\n2 FA2023    Math 20 - people Lori Ziegelmeier  FALSE\n3 SP2024  Anthro 25 - people  Arjun Guneratne   TRUE\n\nCode# Change the semester labels to \"fall2023\", \"spring2024\", \"spring2023\"\nclasses |&gt; \n  mutate(sem = str_replace(sem, \"SP\", \"spring\")) |&gt; \n  mutate(sem = str_replace(sem, \"FA\", \"fall\"))\n\n         sem    area      enroll       instructor\n1 spring2023 History 30 - people  Ernesto Capello\n2   fall2023    Math 20 - people Lori Ziegelmeier\n3 spring2024  Anthro 25 - people  Arjun Guneratne\n\nCode# In the enroll variable, change all e's to 3's (just because?)\nclasses |&gt; \n  mutate(enroll = str_replace_all(enroll, \"e\", \"3\"))\n\n     sem    area      enroll       instructor\n1 SP2023 History 30 - p3opl3  Ernesto Capello\n2 FA2023    Math 20 - p3opl3 Lori Ziegelmeier\n3 SP2024  Anthro 25 - p3opl3  Arjun Guneratne\n\nCode# Use sem to create 2 new variables, one with only the semester (SP/FA) and 1 with the year\nclasses |&gt; \n  mutate(semester = str_sub(sem, 1, 2),\n         year = str_sub(sem, 3, 6))\n\n     sem    area      enroll       instructor semester year\n1 SP2023 History 30 - people  Ernesto Capello       SP 2023\n2 FA2023    Math 20 - people Lori Ziegelmeier       FA 2023\n3 SP2024  Anthro 25 - people  Arjun Guneratne       SP 2024\n\n\n\n16.4.2 Example 2\n\nCode# How can we do this after mutating?\nclasses |&gt; \n  mutate(spring = str_detect(sem, \"SP\")) |&gt; \n  filter(spring == TRUE)\n\n     sem    area      enroll      instructor spring\n1 SP2023 History 30 - people Ernesto Capello   TRUE\n2 SP2024  Anthro 25 - people Arjun Guneratne   TRUE\n\n\nExercise 1: Popular time slots\n\nCode# Construct a table that indicates the number of classes offered in each day/time slot\n# Print only the 6 most popular time slots\ncourses |&gt; \n  count(days, time) |&gt; \n  arrange(desc(n)) |&gt; \n  head()\n\n   days             time  n\n1 M W F 10:50 - 11:50 am 76\n2  T R   9:40 - 11:10 am 71\n3 M W F  9:40 - 10:40 am 68\n4 M W F   1:10 - 2:10 pm 66\n5  T R    3:00 - 4:30 pm 62\n6  T R    1:20 - 2:50 pm 59\n\n\nExercise 2: Prep the data\n\nCodecourses_clean &lt;- courses |&gt; \n  separate(avail_max, c(\"avail\", \"max\"), sep = \" / \") |&gt; \n  mutate(enroll = as.numeric(max) - as.numeric(avail)) |&gt; \n  separate(number, c(\"dept\", \"number\", \"section\"))\n  \nhead(courses_clean)\n\n  dept number section   crn                                                name\n1 AMST    112      01 10318         Introduction to African American Literature\n2 AMST    194      01 10073              Introduction to Asian American Studies\n3 AMST    194      F1 10072 What’s After White Empire - And Is It Already Here?\n4 AMST    203      01 10646 Politics and Inequality: The American Welfare State\n5 AMST    205      01 10842                         Trans Theories and Politics\n6 AMST    209      01 10474                   Civil Rights in the United States\n   days            time      room             instructor avail max enroll\n1 M W F 9:40 - 10:40 am  MAIN 009       Daylanne English     3  20     17\n2 M W F  1:10 - 2:10 pm MUSIC 219          Jake Nagasawa    -4  16     20\n3  T R   3:00 - 4:30 pm   HUM 214 Karin Aguilar-San Juan     0  14     14\n4 M W F 9:40 - 10:40 am  CARN 305          Lesley Lavery     3  25     22\n5  T R   3:00 - 4:30 pm  MAIN 009              Myrl Beam    -2  20     22\n6   W   7:00 - 10:00 pm  MAIN 010         Walter Greason    -1  15     16\n\n\nExercise 3: Courses offered by department\n\nCode# Identify the 6 departments that offered the most sections\ncourses_clean |&gt; \n  count(dept) |&gt; \n  arrange(desc(n)) |&gt; \n  head()\n\n  dept  n\n1 SPAN 45\n2 BIOL 44\n3 ENVI 38\n4 PSYC 37\n5 CHEM 33\n6 COMP 31\n\nCode# Identify the 6 departments with the longest average course titles\ncourses_clean |&gt; \n  mutate(length = str_length(name)) |&gt; \n  group_by(dept) |&gt; \n  summarize(avg_length = mean(length)) |&gt; \n  arrange(desc(avg_length)) |&gt; \n  head()\n\n# A tibble: 6 × 2\n  dept  avg_length\n  &lt;chr&gt;      &lt;dbl&gt;\n1 WGSS        46.3\n2 INTL        41.4\n3 EDUC        39.4\n4 MCST        39.4\n5 POLI        37.4\n6 AMST        37.3\n\n\nExercise 4: STAT courses\nPart a\n\nCodecourses_clean |&gt; \n  filter(str_detect(instructor, \"Alicia Johnson\")) \n\n  dept number section   crn                         name  days            time\n1 STAT    253      01 10806 Statistical Machine Learning  T R  9:40 - 11:10 am\n2 STAT    253      02 10807 Statistical Machine Learning  T R   1:20 - 2:50 pm\n3 STAT    253      03 10808 Statistical Machine Learning  T R   3:00 - 4:30 pm\n        room     instructor avail max enroll\n1 THEATR 206 Alicia Johnson    -3  20     23\n2 THEATR 206 Alicia Johnson    -3  20     23\n3 THEATR 206 Alicia Johnson     2  20     18\n\n\nPart b\n\nCodestat &lt;- courses_clean |&gt; \n  filter(dept == \"STAT\") |&gt; \n  mutate(name = str_replace(name, \"Introduction to \", \"\")) |&gt;\n  mutate(name = str_replace(name, \"Statistical\", \"Stat\")) |&gt; \n  mutate(start_time = str_sub(time, 1, 5)) |&gt; \n  select(number, name, start_time, enroll)\n\nstat\n\n   number                      name start_time enroll\n1     112              Data Science      3:00      27\n2     112              Data Science      9:40      21\n3     112              Data Science      1:20      25\n4     125              Epidemiology      12:00     26\n5     155             Stat Modeling      1:10      32\n6     155             Stat Modeling      9:40      24\n7     155             Stat Modeling      10:50     26\n8     155             Stat Modeling      3:30      25\n9     155             Stat Modeling      1:20      30\n10    155             Stat Modeling      3:00      27\n11    212 Intermediate Data Science      9:40      11\n12    212 Intermediate Data Science      1:20      11\n13    253     Stat Machine Learning      9:40      23\n14    253     Stat Machine Learning      1:20      23\n15    253     Stat Machine Learning      3:00      18\n16    354               Probability      3:00      22\n17    452           Correlated Data      9:40       7\n18    452           Correlated Data      1:20       8\n19    456  Projects in Data Science      9:40      11\n\nCodedim(stat)\n\n[1] 19  4\n\n\nExercise 5: More cleaning\n\nCodeenrollments &lt;- courses_clean |&gt; \n  filter(dept != \"PE\", dept != \"INTD\") |&gt; \n  filter(!(dept == \"MUSI\" & as.numeric(number) &lt; 100)) |&gt; \n  filter(!(dept == \"THDA\" & as.numeric(number) &lt; 100)) |&gt; \n  filter(!str_detect(section, \"L\"))\n  \nhead(enrollments)\n\n  dept number section   crn                                                name\n1 AMST    112      01 10318         Introduction to African American Literature\n2 AMST    194      01 10073              Introduction to Asian American Studies\n3 AMST    194      F1 10072 What’s After White Empire - And Is It Already Here?\n4 AMST    203      01 10646 Politics and Inequality: The American Welfare State\n5 AMST    205      01 10842                         Trans Theories and Politics\n6 AMST    209      01 10474                   Civil Rights in the United States\n   days            time      room             instructor avail max enroll\n1 M W F 9:40 - 10:40 am  MAIN 009       Daylanne English     3  20     17\n2 M W F  1:10 - 2:10 pm MUSIC 219          Jake Nagasawa    -4  16     20\n3  T R   3:00 - 4:30 pm   HUM 214 Karin Aguilar-San Juan     0  14     14\n4 M W F 9:40 - 10:40 am  CARN 305          Lesley Lavery     3  25     22\n5  T R   3:00 - 4:30 pm  MAIN 009              Myrl Beam    -2  20     22\n6   W   7:00 - 10:00 pm  MAIN 010         Walter Greason    -1  15     16\n\n\nOptional extra practice\n\nCode# Make a bar plot showing the number of night courses by day of the week.\ncourses_clean |&gt; \n  filter(str_detect(time, \"7:00\")) |&gt; \n  ggplot(aes(x = days)) + \n    geom_bar()",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>strings</span>"
    ]
  },
  {
    "objectID": "ica/ica-reshaping.html",
    "href": "ica/ica-reshaping.html",
    "title": "\n17  reshaping\n",
    "section": "",
    "text": "EXAMPLE 1: warm-up counts and proportions\nRecall the penguins we worked with last class:\nCodelibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nCodepenguins &lt;- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-28/penguins.csv')\n\nRows: 344 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): species, island, sex\ndbl (5): bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nTally up the number of male/female penguins by species in 2 ways:\nCodenames(penguins)\n\n[1] \"species\"           \"island\"            \"bill_length_mm\"   \n[4] \"bill_depth_mm\"     \"flipper_length_mm\" \"body_mass_g\"      \n[7] \"sex\"               \"year\"             \n\nCode# Using count()\npenguins |&gt;\n  count(species, sex)\n\n# A tibble: 8 × 3\n  species   sex        n\n  &lt;chr&gt;     &lt;chr&gt;  &lt;int&gt;\n1 Adelie    female    73\n2 Adelie    male      73\n3 Adelie    &lt;NA&gt;       6\n4 Chinstrap female    34\n5 Chinstrap male      34\n6 Gentoo    female    58\n7 Gentoo    male      61\n8 Gentoo    &lt;NA&gt;       5\n\nCode# Using group_by() and summarize()\npenguins |&gt;\n  group_by(species, sex) |&gt;\n  summarise(n())\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 8 × 3\n# Groups:   species [3]\n  species   sex    `n()`\n  &lt;chr&gt;     &lt;chr&gt;  &lt;int&gt;\n1 Adelie    female    73\n2 Adelie    male      73\n3 Adelie    &lt;NA&gt;       6\n4 Chinstrap female    34\n5 Chinstrap male      34\n6 Gentoo    female    58\n7 Gentoo    male      61\n8 Gentoo    &lt;NA&gt;       5\nDefine a new column that includes the proportion or relative frequencies of male/female penguins in each species.\nCodepenguins |&gt;\n  group_by(species) |&gt; \n  mutate(total_species_count = n()) |&gt; \n  ungroup() |&gt; \n  group_by(sex, species) |&gt;\n  mutate(sex_population = n()) |&gt;\n  mutate(porpotion = sex_population / total_species_count ) |&gt;\n  select(sex, species, sex_population, total_species_count, porpotion)\n\n# A tibble: 344 × 5\n# Groups:   sex, species [8]\n   sex    species sex_population total_species_count porpotion\n   &lt;chr&gt;  &lt;chr&gt;            &lt;int&gt;               &lt;int&gt;     &lt;dbl&gt;\n 1 male   Adelie              73                 152    0.480 \n 2 female Adelie              73                 152    0.480 \n 3 female Adelie              73                 152    0.480 \n 4 &lt;NA&gt;   Adelie               6                 152    0.0395\n 5 female Adelie              73                 152    0.480 \n 6 male   Adelie              73                 152    0.480 \n 7 female Adelie              73                 152    0.480 \n 8 male   Adelie              73                 152    0.480 \n 9 &lt;NA&gt;   Adelie               6                 152    0.0395\n10 &lt;NA&gt;   Adelie               6                 152    0.0395\n# ℹ 334 more rows",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>reshaping</span>"
    ]
  },
  {
    "objectID": "ica/ica-reshaping.html#reshaping-data",
    "href": "ica/ica-reshaping.html#reshaping-data",
    "title": "\n17  reshaping\n",
    "section": "\n17.1 Reshaping Data",
    "text": "17.1 Reshaping Data\nThere are two general types of reshaped data:\n\naggregate data\nFor example, using group_by() with summarize() gains aggregate information about our observations but loses data on individual observations.\nraw data, reshaped\nWe often want to retain all information on individual observations, but need to reshape it in order to perform the task at hand.\n\nEXAMPLE 4: reshape it with your mind\nLet’s calculate the difference in average body mass, male vs female, for each species. Since penguin_avg is small, we could do these calculations by hand. But this doesn’t scale up to bigger datasets.\n\nSketch out (on paper, in your head, anything) how this data would need to be reshaped, without losing any information, in order to calculate the differences in average body mass using our wrangling verbs. Make it as specific as possible, with column labels, entries, correct numbers, etc.\nIdentify the units of observation.\n\n\nCodepenguin_avg |&gt;\n  group_by(species) |&gt;\n  summarize(sex_weight_difference = max(avg_body_mass) - min(avg_body_mass))\n\n# A tibble: 3 × 2\n  species   sex_weight_difference\n  &lt;chr&gt;                     &lt;dbl&gt;\n1 Adelie                     675.\n2 Chinstrap                  412.\n3 Gentoo                     805.\n\n\nWider vs Longer formats\nMaking our data longer or wider reshapes the data, changing the units of observation while retaining all raw information:\n\nMake the data longer, i.e. combine values from multiple variables into 1 variable. EXAMPLE: 1999 and 2000 represent two years. We want to combine their results into 1 variable without losing any information.\n\n\n\nMake the data wider, i.e. spread out the values across new variables. EXAMPLE: cases and pop represent two categories within type. To compare or combine their count outcomes side-by-side, we can separate them into their own variables.\n\n\nEXAMPLE 5: pivot wider\nBecause it’s a small enough dataset to examine all at once, let’s start with our penguin_avg data:\n\nCodepenguin_avg\n\n# A tibble: 6 × 3\n# Groups:   species [3]\n  species   sex    avg_body_mass\n  &lt;chr&gt;     &lt;chr&gt;          &lt;dbl&gt;\n1 Adelie    female         3369.\n2 Adelie    male           4043.\n3 Chinstrap female         3527.\n4 Chinstrap male           3939.\n5 Gentoo    female         4680.\n6 Gentoo    male           5485.\n\n\nWith the goal of being able to calculate the difference in average body mass, male vs female, for each species, let’s make the dataset wider. That is, let’s get one row per species with separate columns for the average body mass by sex. Put this code into a chunk and run it:\n\nCodepenguin_avg |&gt; \npivot_wider(names_from = sex, values_from = avg_body_mass)\n\n# A tibble: 3 × 3\n# Groups:   species [3]\n  species   female  male\n  &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1 Adelie     3369. 4043.\n2 Chinstrap  3527. 3939.\n3 Gentoo     4680. 5485.\n\n\n\n\n\n\n\n\nPivot Wider\n\n\n\n\n\nnames_from = the variable whose values we want to separate into their own columns, i.e. where we want to get the new column names from\n\n\nvalues_from = which variable to take the new column values from\n\n\n\n\nFOLLOW-UP:\n\nWhat are the units of observation?\nDid we lose any information when we widened the data?\nUse the wide data to calculate the difference in average body mass, male vs female, for each species.\nEXAMPLE 6: Pivot longer\nLet’s store our wide data:\n\nCodepenguin_avg_wide &lt;- penguin_avg |&gt; \n  pivot_wider(names_from = sex, values_from = avg_body_mass)\n\npenguin_avg_wide\n\n# A tibble: 3 × 3\n# Groups:   species [3]\n  species   female  male\n  &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1 Adelie     3369. 4043.\n2 Chinstrap  3527. 3939.\n3 Gentoo     4680. 5485.\n\n\nSuppose we wanted to change this data back to a longer format. In general, this happens when some variables (here female and male) represent two categories or values of some broader variable (here sex), and we want to combine them into that 1 variable without losing any information. Let’s pivot_longer():\n\nCode# We can either communicate which variables we WANT to collect into a single column (female, male)\npenguin_avg_wide |&gt; \n  pivot_longer(cols = c(female, male), names_to = \"sex\", values_to = \"avg_body_mass\")\n\n# A tibble: 6 × 3\n# Groups:   species [3]\n  species   sex    avg_body_mass\n  &lt;chr&gt;     &lt;chr&gt;          &lt;dbl&gt;\n1 Adelie    female         3369.\n2 Adelie    male           4043.\n3 Chinstrap female         3527.\n4 Chinstrap male           3939.\n5 Gentoo    female         4680.\n6 Gentoo    male           5485.\n\nCode# Or which variable(s) we do NOT want to collect into a single column (sex)\npenguin_avg_wide |&gt; \n  pivot_longer(cols = -species, names_to = \"sex\", values_to = \"avg_body_mass\")\n\n# A tibble: 6 × 3\n# Groups:   species [3]\n  species   sex    avg_body_mass\n  &lt;chr&gt;     &lt;chr&gt;          &lt;dbl&gt;\n1 Adelie    female         3369.\n2 Adelie    male           4043.\n3 Chinstrap female         3527.\n4 Chinstrap male           3939.\n5 Gentoo    female         4680.\n6 Gentoo    male           5485.\n\n\n\n\n\n\n\n\nPivot Longer\n\n\n\n\n\ncols = the columns (variables) to collect into a single, new variable. We can also specify what variables we don’t want to collect\n\nnames_to = the name of the new variable which will include the names or labels of the collected variables\n\nvalues_to = the name of the new variable which will include the values of the collected variables\n\n\n\nFOLLOW-UP:\n\nWhat are the units of observation?\nDid we lose any information when we lengthened the data?\nWhy did we put the variables in quotes “” here but not when we used pivot_wider()?\nEXAMPLE 7: Practice\nLet’s make up some data on the orders of 2 different customers at 3 different restaurants:\n\nCodefood &lt;- data.frame(\n  customer = rep(c(\"A\", \"B\"), each = 3),\n  restaurant = rep(c(\"Shish\", \"FrenchMeadow\", \"DunnBros\"), 2),\n  order = c(\"falafel\", \"salad\", \"coffee\", \"baklava\", \"pastry\", \"tea\")\n)\nfood\n\n  customer   restaurant   order\n1        A        Shish falafel\n2        A FrenchMeadow   salad\n3        A     DunnBros  coffee\n4        B        Shish baklava\n5        B FrenchMeadow  pastry\n6        B     DunnBros     tea\n\n\nThe units of observation in food are customer / restaurant combinations. Wrangle this data so that the units of observation are customers, spreading the restaurants into separate columns.\n\nCodefood |&gt;\n  pivot_wider(names_from = restaurant, values_from = customer )\n\n# A tibble: 6 × 4\n  order   Shish FrenchMeadow DunnBros\n  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;        &lt;chr&gt;   \n1 falafel A     &lt;NA&gt;         &lt;NA&gt;    \n2 salad   &lt;NA&gt;  A            &lt;NA&gt;    \n3 coffee  &lt;NA&gt;  &lt;NA&gt;         A       \n4 baklava B     &lt;NA&gt;         &lt;NA&gt;    \n5 pastry  &lt;NA&gt;  B            &lt;NA&gt;    \n6 tea     &lt;NA&gt;  &lt;NA&gt;         B       \n\n\nConsider 2 more customers:\n\nCodemore_food &lt;- data.frame(\n  customer = c(\"C\", \"D\"),\n  Shish = c(\"coffee\", \"maza\"),\n  FrenchMeadow = c(\"soup\", \"sandwich\"),\n  DunnBros = c(\"cookie\", \"coffee\")\n)\nmore_food\n\n  customer  Shish FrenchMeadow DunnBros\n1        C coffee         soup   cookie\n2        D   maza     sandwich   coffee\n\nCodehead(more_food)\n\n  customer  Shish FrenchMeadow DunnBros\n1        C coffee         soup   cookie\n2        D   maza     sandwich   coffee\n\n\nWrangle this data so that the 3 restaurant columns are combined into 1, hence the units of observation are customer / restaurant combinations.\n\nCodemore_food |&gt;\n  pivot_longer(cols = c(Shish, FrenchMeadow, DunnBros), names_to = \"Restaurant\", values_to = \"Food\")\n\n# A tibble: 6 × 3\n  customer Restaurant   Food    \n  &lt;chr&gt;    &lt;chr&gt;        &lt;chr&gt;   \n1 C        Shish        coffee  \n2 C        FrenchMeadow soup    \n3 C        DunnBros     cookie  \n4 D        Shish        maza    \n5 D        FrenchMeadow sandwich\n6 D        DunnBros     coffee",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>reshaping</span>"
    ]
  },
  {
    "objectID": "ica/ica-reshaping.html#exercises",
    "href": "ica/ica-reshaping.html#exercises",
    "title": "\n17  reshaping\n",
    "section": "\n17.2 Exercises",
    "text": "17.2 Exercises\nExercise 1: What’s the problem?\nConsider data on a sleep study in which subjects received only 3 hours of sleep per night. Each day, their reaction time to a stimulus (in ms) was recorded.1\n\nCodesleep_wide &lt;- read.csv(\"https://mac-stat.github.io/data/sleep_wide.csv\")\n\nhead(sleep_wide)\n\n  Subject  day_0  day_1  day_2  day_3  day_4  day_5  day_6  day_7  day_8  day_9\n1     308 249.56 258.70 250.80 321.44 356.85 414.69 382.20 290.15 430.59 466.35\n2     309 222.73 205.27 202.98 204.71 207.72 215.96 213.63 217.73 224.30 237.31\n3     310 199.05 194.33 234.32 232.84 229.31 220.46 235.42 255.75 261.01 247.52\n4     330 321.54 300.40 283.86 285.13 285.80 297.59 280.24 318.26 305.35 354.05\n5     331 287.61 285.00 301.82 320.12 316.28 293.32 290.08 334.82 293.75 371.58\n6     332 234.86 242.81 272.96 309.77 317.46 310.00 454.16 346.83 330.30 253.86\n\n\nPart a\nWhat are the units of observation in sleep_wide?\nPart b\nSuppose I ask you to plot each subject’s reaction time (y-axis) vs the number of days of sleep restriction (x-axis). “Sketch” out in words what the first few rows of the data need to look like in order to do this. It might help to think about what you’d need to complete the plotting frame:\nggplot(___, aes(y = ___, x = ___, color = ___))\nPart c\nHow can you obtain the dataset you sketched in part b?\n\njust using sleep_wide\n\npivot_longer()\npivot_wider()\nExercise 2: Pivot longer\nTo plot reaction time by day for each subject, we need to reshape the data into a long format where each row represents a subject/day combination. Specifically, we want a dataset with 3 columns and a first few rows that look something like this:\n\n\nSubject\nday\nreaction_time\n\n\n\n308\n0\n249.56\n\n\n308\n1\n258.70\n\n\n308\n2\n250.80\n\n\n\nPart a\nUse pivot_longer() to create the long-format dataset above. Show the first 3 lines (head(3)), which should be similar to those above. Follow-up: Thinking forward to plotting reaction time vs day for each subject, what would you like to fix / change about this dataset?\n\nCode# For cols, try 2 appproaches: using - and starts_with\nsleep_wide |&gt;\n  pivot_longer(cols = c(day_0,  day_1, day_2, day_3, day_4, day_5, day_6, day_7, day_8, day_9), names_to = \"day\", values_to = \"reaction_time\")\n\n# A tibble: 180 × 3\n   Subject day   reaction_time\n     &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;\n 1     308 day_0          250.\n 2     308 day_1          259.\n 3     308 day_2          251.\n 4     308 day_3          321.\n 5     308 day_4          357.\n 6     308 day_5          415.\n 7     308 day_6          382.\n 8     308 day_7          290.\n 9     308 day_8          431.\n10     308 day_9          466.\n# ℹ 170 more rows\n\n\nPart b\nRun this chunk:\n\nCodesleep_long &lt;- sleep_wide |&gt;\n  pivot_longer(cols = -Subject,\n               names_to = \"day\",\n               names_prefix = \"day_\",\n               values_to = \"reaction_time\")\n\nhead(sleep_long)\n\n# A tibble: 6 × 3\n  Subject day   reaction_time\n    &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;\n1     308 0              250.\n2     308 1              259.\n3     308 2              251.\n4     308 3              321.\n5     308 4              357.\n6     308 5              415.\n\n\nFollow-up:\n\nBesides putting each argument on a different line for readability and storing the results, what changed in the code?\nBy using the prefix, the code removed part of the value on the left to right of the new column\nHow did this impact how the values are recorded in the day column?\nThis made it so that the values in the new column were purely numerical\nPart c\nUsing sleep_long, construct a line plot of reaction time vs day for each subject. This will look goofy no matter what you do. Why? HINT: look back at head(sleep_long). What class or type of variables are Subject and day? What do we want them to be?\n\nCodeggplot(sleep_long, aes(x = day, y = reaction_time, color = Subject, alpha = 0.5)) +\n  geom_point()\n\n\n\n\n\n\n\nExercise 3: Changing variable classes & plotting\nLet’s finalize sleep_long by mutating the Subject variable to be a factor (categorical) and the day variable to be numeric (quantitative). Take note of the mutate() code! You’ll use this type of code a lot.\n\nCodesleep_long &lt;- sleep_wide |&gt;\n  pivot_longer(cols = -Subject,\n               names_to = \"day\",\n               names_prefix = \"day_\",\n               values_to = \"reaction_time\") |&gt; \n  mutate(Subject = as.factor(Subject), day = as.numeric(day))\n\n# Check it out\n# Same data, different class\nhead(sleep_long)\n\n# A tibble: 6 × 3\n  Subject   day reaction_time\n  &lt;fct&gt;   &lt;dbl&gt;         &lt;dbl&gt;\n1 308         0          250.\n2 308         1          259.\n3 308         2          251.\n4 308         3          321.\n5 308         4          357.\n6 308         5          415.\n\n\nPart a\nNow make some plots.\n\nCode# Make a line plot of reaction time by day for each subject\n# Put these all on the same frame\n\nggplot(sleep_long, aes(x = day, y = reaction_time, color = Subject)) +\n  geom_line()\n\n\n\n\n\n\n\n\nCode# Make a line plot of reaction time by day for each subject\n# Put these all on separate frames (one per subject)\n\nggplot(sleep_long, aes(x = day, y = reaction_time, color = Subject)) +\n  geom_line() +\n  facet_wrap(~Subject)\n\n\n\n\n\n\n\nPart b\nSummarize what you learned from the plots. For example:\n\nWhat’s the general relationship between reaction time and sleep?\nreaction time tends to increase each day as subjects get only 3 hours of sleep\nIs this the same for everybody? What differs?\nSome subjects saw an overall trend of decreasing sleep or had decreases in reaction time followed by a large increase. Subjects 309 and 310 specifically saw little to no change with each day.\nExercise 4: Pivot wider\nMake the data wide again, with each day becoming its own column.\nPart a\nAdjust the code below. What don’t you like about the column labels?\n\nCodesleep_long |&gt;\n  pivot_wider(names_from = day, values_from = reaction_time) |&gt;\n  head()\n\n# A tibble: 6 × 11\n  Subject   `0`   `1`   `2`   `3`   `4`   `5`   `6`   `7`   `8`   `9`\n  &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 308      250.  259.  251.  321.  357.  415.  382.  290.  431.  466.\n2 309      223.  205.  203.  205.  208.  216.  214.  218.  224.  237.\n3 310      199.  194.  234.  233.  229.  220.  235.  256.  261.  248.\n4 330      322.  300.  284.  285.  286.  298.  280.  318.  305.  354.\n5 331      288.  285   302.  320.  316.  293.  290.  335.  294.  372.\n6 332      235.  243.  273.  310.  317.  310   454.  347.  330.  254.\n\n\nPart b\nUsing your intuition, adjust your code from part a to name the reaction time columns “day_0”, “day_1”, etc.\n\nCodesleep_long |&gt;\n  pivot_wider(names_from = day, values_from = reaction_time, names_prefix = \"day_\") |&gt;\n  head()\n\n# A tibble: 6 × 11\n  Subject day_0 day_1 day_2 day_3 day_4 day_5 day_6 day_7 day_8 day_9\n  &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 308      250.  259.  251.  321.  357.  415.  382.  290.  431.  466.\n2 309      223.  205.  203.  205.  208.  216.  214.  218.  224.  237.\n3 310      199.  194.  234.  233.  229.  220.  235.  256.  261.  248.\n4 330      322.  300.  284.  285.  286.  298.  280.  318.  305.  354.\n5 331      288.  285   302.  320.  316.  293.  290.  335.  294.  372.\n6 332      235.  243.  273.  310.  317.  310   454.  347.  330.  254.\n\n\nExercise 5: Practice with Billboard charts\nLoad data on songs that hit the billboard charts around the year 2000. Included for each song is the artist name, track name, the date it hit the charts (date.enter), and wk-related variables that indicate rankings in each subsequent week on the charts:\n\nCode# Load data\nlibrary(tidyr)\ndata(\"billboard\")\n\n# Check it out\nhead(billboard)\n\n# A tibble: 6 × 79\n  artist      track date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8\n  &lt;chr&gt;       &lt;chr&gt; &lt;date&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 2 Pac       Baby… 2000-02-26      87    82    72    77    87    94    99    NA\n2 2Ge+her     The … 2000-09-02      91    87    92    NA    NA    NA    NA    NA\n3 3 Doors Do… Kryp… 2000-04-08      81    70    68    67    66    57    54    53\n4 3 Doors Do… Loser 2000-10-21      76    76    72    69    67    65    55    59\n5 504 Boyz    Wobb… 2000-04-15      57    34    25    17    17    31    36    49\n6 98^0        Give… 2000-08-19      51    39    34    26    26    19     2     2\n# ℹ 68 more variables: wk9 &lt;dbl&gt;, wk10 &lt;dbl&gt;, wk11 &lt;dbl&gt;, wk12 &lt;dbl&gt;,\n#   wk13 &lt;dbl&gt;, wk14 &lt;dbl&gt;, wk15 &lt;dbl&gt;, wk16 &lt;dbl&gt;, wk17 &lt;dbl&gt;, wk18 &lt;dbl&gt;,\n#   wk19 &lt;dbl&gt;, wk20 &lt;dbl&gt;, wk21 &lt;dbl&gt;, wk22 &lt;dbl&gt;, wk23 &lt;dbl&gt;, wk24 &lt;dbl&gt;,\n#   wk25 &lt;dbl&gt;, wk26 &lt;dbl&gt;, wk27 &lt;dbl&gt;, wk28 &lt;dbl&gt;, wk29 &lt;dbl&gt;, wk30 &lt;dbl&gt;,\n#   wk31 &lt;dbl&gt;, wk32 &lt;dbl&gt;, wk33 &lt;dbl&gt;, wk34 &lt;dbl&gt;, wk35 &lt;dbl&gt;, wk36 &lt;dbl&gt;,\n#   wk37 &lt;dbl&gt;, wk38 &lt;dbl&gt;, wk39 &lt;dbl&gt;, wk40 &lt;dbl&gt;, wk41 &lt;dbl&gt;, wk42 &lt;dbl&gt;,\n#   wk43 &lt;dbl&gt;, wk44 &lt;dbl&gt;, wk45 &lt;dbl&gt;, wk46 &lt;dbl&gt;, wk47 &lt;dbl&gt;, wk48 &lt;dbl&gt;, …\n\n\nIn using this data, you’ll need to determine if and when the data needs to be reshaped for the task at hand.\nPart a\nConstruct and summarize a plot of how a song’s Billboard ranking its 2nd week on the chart (y-axis) is related to its ranking the 1st week on the charts (x-axis). Add a reference line geom_abline(intercept = 0, slope = 1). Songs above this line improved their rankings from the 1st to 2nd week.\n\nCodeggplot(billboard, aes(x = wk1, y = wk2)) +\n  geom_point() +\n  geom_abline(intercept = 0, slope = 1)\n\nWarning: Removed 5 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\nPart b\nUse your wrangling tools to identify which songs are those above the line in Part a, i.e. with rankgings that went up from week 1 to week 2.\n\nCodebillboard |&gt;\n  filter(wk2 &gt; wk1) |&gt;\n  ggplot(aes(x = wk1, y = wk2)) +\n    geom_point() +\n    geom_abline(intercept = 0, slope = 1)\n\n\n\n\n\n\n\nPart c\nDefine a new dataset, nov_1999, which:\n\nonly includes data on songs that entered the Billboard charts on November 6, 1999\nkeeps all variables except track and date.entered. HINT: How can you avoid writing out all the variable names you want to keep?\n\n\nCode# Define nov_1999\nnov_1999 &lt;- billboard |&gt;\n  filter(date.entered == \"1999-11-06\") |&gt;\n  select(-c(track, date.entered))\n\n# Confirm that nov_1999 has 2 rows (songs) and 77 columns\nnrow(nov_1999)\n\n[1] 2\n\nCodehead(nov_1999)\n\n# A tibble: 2 × 77\n  artist   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8   wk9  wk10  wk11  wk12\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Count…    84    70    66    60    46    37    35    35    35    32    29    29\n2 Hill,…    81    68    62    51    42    35    28    28    28    43    30    23\n# ℹ 64 more variables: wk13 &lt;dbl&gt;, wk14 &lt;dbl&gt;, wk15 &lt;dbl&gt;, wk16 &lt;dbl&gt;,\n#   wk17 &lt;dbl&gt;, wk18 &lt;dbl&gt;, wk19 &lt;dbl&gt;, wk20 &lt;dbl&gt;, wk21 &lt;dbl&gt;, wk22 &lt;dbl&gt;,\n#   wk23 &lt;dbl&gt;, wk24 &lt;dbl&gt;, wk25 &lt;dbl&gt;, wk26 &lt;dbl&gt;, wk27 &lt;dbl&gt;, wk28 &lt;dbl&gt;,\n#   wk29 &lt;dbl&gt;, wk30 &lt;dbl&gt;, wk31 &lt;dbl&gt;, wk32 &lt;dbl&gt;, wk33 &lt;dbl&gt;, wk34 &lt;dbl&gt;,\n#   wk35 &lt;dbl&gt;, wk36 &lt;dbl&gt;, wk37 &lt;dbl&gt;, wk38 &lt;dbl&gt;, wk39 &lt;dbl&gt;, wk40 &lt;dbl&gt;,\n#   wk41 &lt;dbl&gt;, wk42 &lt;dbl&gt;, wk43 &lt;dbl&gt;, wk44 &lt;dbl&gt;, wk45 &lt;dbl&gt;, wk46 &lt;dbl&gt;,\n#   wk47 &lt;dbl&gt;, wk48 &lt;dbl&gt;, wk49 &lt;dbl&gt;, wk50 &lt;dbl&gt;, wk51 &lt;dbl&gt;, wk52 &lt;dbl&gt;, …\n\n\nPart d\nCreate and discuss a visualization of the rankings (y-axis) over time (x-axis) for the 2 songs in nov_1999. There are hints below (if you scroll), but you’re encouraged to play around and use as few hints as possible.\n\nCodenov_1999 |&gt;\n  pivot_longer(cols = -artist, names_to = \"weekAfterRelease\", names_prefix = \"wk\", values_to = \"ranking\") |&gt;\n  mutate(weekAfterRelease = as.numeric(weekAfterRelease), ranking = as.numeric(ranking)) |&gt;\n  ggplot(aes(x = weekAfterRelease, y = ranking, color = artist)) +\n    geom_line()\n\nWarning: Removed 79 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\nHints:\n\nShould you first pivot wider or longer?\nOnce you pivot, the week number is turned into a character variable. How can you change it to a number?\nExercise 6: Practice with the Daily Show\nThe data associated with this article is available in the fivethirtyeight package, and is loaded into daily below. It includes a list of every guest to ever appear on Jon Stewart’s The Daily Show, a “late-night talk and satirical news” program (per Wikipedia). Check out the dataset and note that when multiple people appeared together, each person receives their own line:\n\nCodelibrary(fivethirtyeight)\n\nSome larger datasets need to be installed separately, like senators and\nhouse_district_forecast. To install these, we recommend you install the\nfivethirtyeightdata package by running:\ninstall.packages('fivethirtyeightdata', repos =\n'https://fivethirtyeightdata.github.io/drat/', type = 'source')\n\nCodedata(\"daily_show_guests\")\ndaily &lt;- daily_show_guests\n\n\nIn analyzing this data, you’ll need to determine if and when the data needs to be reshaped.\nPart a\nIdentify the 15 guests that appeared the most. (This isn’t a very diverse guest list!)\n\nCodedaily |&gt;\n  group_by(raw_guest_list) |&gt;\n  summarise(totalAppearances = n()) |&gt;\n  arrange(desc(totalAppearances)) |&gt;\n  head(15)\n\n# A tibble: 15 × 2\n   raw_guest_list    totalAppearances\n   &lt;chr&gt;                        &lt;int&gt;\n 1 Fareed Zakaria                  19\n 2 Denis Leary                     17\n 3 Brian Williams                  16\n 4 Paul Rudd                       13\n 5 Ricky Gervais                   13\n 6 Tom Brokaw                      12\n 7 Bill O'Reilly                   10\n 8 Reza Aslan                      10\n 9 Richard Lewis                   10\n10 Will Ferrell                    10\n11 Sarah Vowell                     9\n12 Adam Sandler                     8\n13 Ben Affleck                      8\n14 Louis C.K.                       8\n15 Maggie Gyllenhaal                8\n\n\nPart b\nCHALLENGE: Create the following data set containing 19 columns:\n\nThe first column should have the 15 guests with the highest number of total appearances on the show, listed in descending order of number of appearances.\n17 columns should show the number of appearances of the corresponding guest in each year from 1999 to 2015 (one per column).\nAnother column should show the total number of appearances for the corresponding guest over the entire duration of the show.\n\nThere are hints below (if you scroll), but you’re encouraged to play around and use as few hints as possible.\n\nCodedaily |&gt;\n  group_by(raw_guest_list) |&gt;\n  mutate(totalAppearances = n()) |&gt;\n  mutate(inTopFifteen = totalAppearances &gt;= 10) |&gt;\n  group_by(year, raw_guest_list, totalAppearances, inTopFifteen) |&gt;\n  summarize(appearancesInYear = n()) |&gt;\n  pivot_wider(names_from = year, values_from = appearancesInYear, names_prefix = \"appeared_in_\") |&gt;\n  arrange(desc(totalAppearances))\n\n`summarise()` has grouped output by 'year', 'raw_guest_list',\n'totalAppearances'. You can override using the `.groups` argument.\n\n\n# A tibble: 1,669 × 20\n# Groups:   raw_guest_list, totalAppearances [1,669]\n   raw_guest_list totalAppearances inTopFifteen appeared_in_1999\n   &lt;chr&gt;                     &lt;int&gt; &lt;lgl&gt;                   &lt;int&gt;\n 1 Fareed Zakaria               19 TRUE                       NA\n 2 Denis Leary                  17 TRUE                        1\n 3 Brian Williams               16 TRUE                       NA\n 4 Paul Rudd                    13 TRUE                        1\n 5 Ricky Gervais                13 TRUE                       NA\n 6 Tom Brokaw                   12 TRUE                       NA\n 7 Richard Lewis                10 TRUE                        1\n 8 Will Ferrell                 10 TRUE                       NA\n 9 Bill O'Reilly                10 TRUE                       NA\n10 Reza Aslan                   10 TRUE                       NA\n# ℹ 1,659 more rows\n# ℹ 16 more variables: appeared_in_2000 &lt;int&gt;, appeared_in_2001 &lt;int&gt;,\n#   appeared_in_2002 &lt;int&gt;, appeared_in_2003 &lt;int&gt;, appeared_in_2004 &lt;int&gt;,\n#   appeared_in_2005 &lt;int&gt;, appeared_in_2006 &lt;int&gt;, appeared_in_2007 &lt;int&gt;,\n#   appeared_in_2008 &lt;int&gt;, appeared_in_2009 &lt;int&gt;, appeared_in_2010 &lt;int&gt;,\n#   appeared_in_2011 &lt;int&gt;, appeared_in_2012 &lt;int&gt;, appeared_in_2013 &lt;int&gt;,\n#   appeared_in_2014 &lt;int&gt;, appeared_in_2015 &lt;int&gt;\n\nCode  # arrange(desc(totalAppearances))\n\n\nHINTS: There are lots of ways to do this. You don’t necessarily need all of these hints.\n\nFirst obtain the number of times a guest appears each year.\nAdd a new column which includes the total number of times a guest appears across all years.\nPivot (longer or wider?). When you do, use values_fill = 0 to replace NA values with 0.\nArrange, then and keep the top 15.\nPart c\nLet’s recreate the first figure from the article. This groups all guests into 3 broader occupational categories. However, our current data has 18 categories:\n\nCodedaily |&gt; \n  count(group)\n\n# A tibble: 18 × 2\n   group              n\n   &lt;chr&gt;          &lt;int&gt;\n 1 Academic         103\n 2 Acting           930\n 3 Advocacy          24\n 4 Athletics         52\n 5 Business          25\n 6 Clergy             8\n 7 Comedy           150\n 8 Consultant        18\n 9 Government        40\n10 Media            751\n11 Military          16\n12 Misc              45\n13 Musician         123\n14 Political Aide    36\n15 Politician       308\n16 Science           28\n17 media              5\n18 &lt;NA&gt;              31\n\n\nLet’s define a new dataset that includes a new variable, broad_group, that buckets these 18 categories into the 3 bigger ones used in the article. And get rid of any rows missing information on broad_group. You’ll learn the code soon! For now, just run this chunk:\n\nCodeplot_data &lt;- daily |&gt; \n  mutate(broad_group = case_when(\n    group %in% c(\"Acting\", \"Athletics\", \"Comedy\", \"Musician\") ~ \"Acting, Comedy & Music\",\n    group %in% c(\"Media\", \"media\", \"Science\", \"Academic\", \"Consultant\", \"Clergy\") ~ \"Media\",\n    group %in% c(\"Politician\", \"Political Aide\", \"Government\", \"Military\", \"Business\", \"Advocacy\") ~ \"Government and Politics\",\n    .default = NA\n  )) |&gt; \n  filter(!is.na(broad_group))\n\n\nNow, using the broad_group variable in plot_data, recreate the graphic from the article, with three different lines showing the fraction of guests in each group over time. Note: You’ll have to wrangle the data first.\n\nCodeplot_data |&gt;\n  mutate(a = 1) |&gt;\n  group_by(year, broad_group) |&gt;\n  mutate(appearances = sum(a)) |&gt;\n  mutate(appearances = as.numeric(appearances)) |&gt;\n  ungroup() |&gt;\n  ggplot(aes(x = year, y = appearances, color = broad_group)) +\n    geom_line()",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>reshaping</span>"
    ]
  },
  {
    "objectID": "ica/ica-reshaping.html#solutions",
    "href": "ica/ica-reshaping.html#solutions",
    "title": "\n17  reshaping\n",
    "section": "\n17.3 Solutions",
    "text": "17.3 Solutions\n\nClick for Solutions\nEXAMPLE 1: warm-up counts and proportions\n\nCode# Using count()\npenguins |&gt; \n  count(species, sex)\n\n# A tibble: 8 × 3\n  species   sex        n\n  &lt;chr&gt;     &lt;chr&gt;  &lt;int&gt;\n1 Adelie    female    73\n2 Adelie    male      73\n3 Adelie    &lt;NA&gt;       6\n4 Chinstrap female    34\n5 Chinstrap male      34\n6 Gentoo    female    58\n7 Gentoo    male      61\n8 Gentoo    &lt;NA&gt;       5\n\nCode# Using group_by() and summarize()\npenguins |&gt; \n  group_by(species, sex) |&gt; \n  summarize(n())\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 8 × 3\n# Groups:   species [3]\n  species   sex    `n()`\n  &lt;chr&gt;     &lt;chr&gt;  &lt;int&gt;\n1 Adelie    female    73\n2 Adelie    male      73\n3 Adelie    &lt;NA&gt;       6\n4 Chinstrap female    34\n5 Chinstrap male      34\n6 Gentoo    female    58\n7 Gentoo    male      61\n8 Gentoo    &lt;NA&gt;       5\n\nCode# Relative frequencies\npenguins |&gt; \n  group_by(species, sex) |&gt; \n  summarize(n = n()) |&gt; \n  mutate(proportion = n / sum(n))\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 8 × 4\n# Groups:   species [3]\n  species   sex        n proportion\n  &lt;chr&gt;     &lt;chr&gt;  &lt;int&gt;      &lt;dbl&gt;\n1 Adelie    female    73     0.480 \n2 Adelie    male      73     0.480 \n3 Adelie    &lt;NA&gt;       6     0.0395\n4 Chinstrap female    34     0.5   \n5 Chinstrap male      34     0.5   \n6 Gentoo    female    58     0.468 \n7 Gentoo    male      61     0.492 \n8 Gentoo    &lt;NA&gt;       5     0.0403\n\nCode# Changing the order calculates the proportion of species within each sex\npenguins |&gt; \n  group_by(sex, species) |&gt; \n  summarize(n = n()) |&gt; \n  mutate(proportion = n / sum(n))\n\n`summarise()` has grouped output by 'sex'. You can override using the `.groups`\nargument.\n\n\n# A tibble: 8 × 4\n# Groups:   sex [3]\n  sex    species       n proportion\n  &lt;chr&gt;  &lt;chr&gt;     &lt;int&gt;      &lt;dbl&gt;\n1 female Adelie       73      0.442\n2 female Chinstrap    34      0.206\n3 female Gentoo       58      0.352\n4 male   Adelie       73      0.435\n5 male   Chinstrap    34      0.202\n6 male   Gentoo       61      0.363\n7 &lt;NA&gt;   Adelie        6      0.545\n8 &lt;NA&gt;   Gentoo        5      0.455\n\n\nEXAMPLE 3: units of observation\n\nCode# Units of observation = penguins\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\nCode# Units of observation = species/sex combos\nhead(penguin_avg)\n\n# A tibble: 6 × 3\n# Groups:   species [3]\n  species   sex    avg_body_mass\n  &lt;chr&gt;     &lt;chr&gt;          &lt;dbl&gt;\n1 Adelie    female         3369.\n2 Adelie    male           4043.\n3 Chinstrap female         3527.\n4 Chinstrap male           3939.\n5 Gentoo    female         4680.\n6 Gentoo    male           5485.\n\n\nEXAMPLE 5: pivot wider\n\nCodepenguin_avg |&gt; \n  pivot_wider(names_from = sex, values_from = avg_body_mass)\n\n# A tibble: 3 × 3\n# Groups:   species [3]\n  species   female  male\n  &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1 Adelie     3369. 4043.\n2 Chinstrap  3527. 3939.\n3 Gentoo     4680. 5485.\n\n\nFOLLOW-UP:\n\nWhat are the units of observation? species\nDid we lose any information when we widened the data? no\nUse the wide data to calculate the difference in average body mass, male vs female, for each species.\n\n\nCodepenguin_avg |&gt; \n  pivot_wider(names_from = sex, values_from = avg_body_mass) |&gt; \n  mutate(diff = male - female)\n\n# A tibble: 3 × 4\n# Groups:   species [3]\n  species   female  male  diff\n  &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Adelie     3369. 4043.  675.\n2 Chinstrap  3527. 3939.  412.\n3 Gentoo     4680. 5485.  805.\n\n\nEXAMPLE 6: Pivot longer\n\nCode# We can either communicate which variables we WANT to collect into a single column (female, male)\npenguin_avg_wide |&gt; \n  pivot_longer(cols = c(female, male), names_to = \"sex\", values_to = \"avg_body_mass\")\n\n# A tibble: 6 × 3\n# Groups:   species [3]\n  species   sex    avg_body_mass\n  &lt;chr&gt;     &lt;chr&gt;          &lt;dbl&gt;\n1 Adelie    female         3369.\n2 Adelie    male           4043.\n3 Chinstrap female         3527.\n4 Chinstrap male           3939.\n5 Gentoo    female         4680.\n6 Gentoo    male           5485.\n\nCode# Or which variable(s) we do NOT want to collect into a single column (sex)\npenguin_avg_wide |&gt; \n  pivot_longer(cols = -species, names_to = \"sex\", values_to = \"avg_body_mass\")\n\n# A tibble: 6 × 3\n# Groups:   species [3]\n  species   sex    avg_body_mass\n  &lt;chr&gt;     &lt;chr&gt;          &lt;dbl&gt;\n1 Adelie    female         3369.\n2 Adelie    male           4043.\n3 Chinstrap female         3527.\n4 Chinstrap male           3939.\n5 Gentoo    female         4680.\n6 Gentoo    male           5485.\n\n\nFOLLOW-UP:\n\nWhat are the units of observation? species/sex combos\nDid we lose any information when we lengthened the data? no\n\n17.3.1 EXAMPLE 7: Practice [-]\n\nCodefood &lt;- data.frame(\n  customer = rep(c(\"A\", \"B\"), each = 3),\n  restaurant = rep(c(\"Shish\", \"FrenchMeadow\", \"DunnBros\"), 2),\n  order = c(\"falafel\", \"salad\", \"coffee\", \"baklava\", \"pastry\", \"tea\")\n)\n\nfood\n\n  customer   restaurant   order\n1        A        Shish falafel\n2        A FrenchMeadow   salad\n3        A     DunnBros  coffee\n4        B        Shish baklava\n5        B FrenchMeadow  pastry\n6        B     DunnBros     tea\n\nCodefood |&gt; \n  pivot_wider(names_from = restaurant, values_from = order)\n\n# A tibble: 2 × 4\n  customer Shish   FrenchMeadow DunnBros\n  &lt;chr&gt;    &lt;chr&gt;   &lt;chr&gt;        &lt;chr&gt;   \n1 A        falafel salad        coffee  \n2 B        baklava pastry       tea     \n\n\n\nCodemore_food &lt;- data.frame(\n  customer = c(\"C\", \"D\"),\n  Shish = c(\"coffee\", \"maza\"),\n  FrenchMeadow = c(\"soup\", \"sandwich\"),\n  DunnBros = c(\"cookie\", \"coffee\")\n)\n\nmore_food\n\n  customer  Shish FrenchMeadow DunnBros\n1        C coffee         soup   cookie\n2        D   maza     sandwich   coffee\n\nCodemore_food |&gt; \n  pivot_longer(cols = -customer, names_to = \"restaurant\", values_to = \"order\")\n\n# A tibble: 6 × 3\n  customer restaurant   order   \n  &lt;chr&gt;    &lt;chr&gt;        &lt;chr&gt;   \n1 C        Shish        coffee  \n2 C        FrenchMeadow soup    \n3 C        DunnBros     cookie  \n4 D        Shish        maza    \n5 D        FrenchMeadow sandwich\n6 D        DunnBros     coffee  \n\n\nExercise 1: What’s the problem?\nPart a\nsubjects/people\nPart c\npivot_longer()\nExercise 2: Pivot longer\nPart a\n\nCode# For cols, try 2 appproaches: using - and starts_with\nsleep_wide |&gt;\n  pivot_longer(cols = -Subject, names_to = \"day\", values_to = \"reaction_time\")\n\n# A tibble: 180 × 3\n   Subject day   reaction_time\n     &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;\n 1     308 day_0          250.\n 2     308 day_1          259.\n 3     308 day_2          251.\n 4     308 day_3          321.\n 5     308 day_4          357.\n 6     308 day_5          415.\n 7     308 day_6          382.\n 8     308 day_7          290.\n 9     308 day_8          431.\n10     308 day_9          466.\n# ℹ 170 more rows\n\nCodesleep_wide |&gt;\n  pivot_longer(cols = starts_with(\"day\"), names_to = \"day\", values_to = \"reaction_time\")\n\n# A tibble: 180 × 3\n   Subject day   reaction_time\n     &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;\n 1     308 day_0          250.\n 2     308 day_1          259.\n 3     308 day_2          251.\n 4     308 day_3          321.\n 5     308 day_4          357.\n 6     308 day_5          415.\n 7     308 day_6          382.\n 8     308 day_7          290.\n 9     308 day_8          431.\n10     308 day_9          466.\n# ℹ 170 more rows\n\n\nPart b\nAdding names_prefix = \"day_\" removed “day_” from the start of the day entries. did this impact how the values are recorded in the day column?\n\nCodesleep_long &lt;- sleep_wide |&gt;\n  pivot_longer(cols = -Subject,\n               names_to = \"day\",\n               names_prefix = \"day_\",\n               values_to = \"reaction_time\") \n\n\nPart c\nSubject is an integer and day is a character. We want them to be categorical (factor) and numeric, respectively.\n\nCodeggplot(sleep_long, aes(y = reaction_time, x = day, color = Subject)) + \n  geom_line()\n\n\n\n\n\n\n\nExercise 3: Changing variable classes & plotting\n\nCodesleep_long &lt;- sleep_wide |&gt;\n  pivot_longer(cols = -Subject,\n               names_to = \"day\",\n               names_prefix = \"day_\",\n               values_to = \"reaction_time\") |&gt; \n  mutate(Subject = as.factor(Subject), day = as.numeric(day))\n\n\nPart a\nNow make some plots.\n\nCode# Make a line plot of reaction time by day for each subject\n# Put these all on the same frame\nggplot(sleep_long, aes(y = reaction_time, x = day, color = Subject)) + \n  geom_line()\n\n\n\n\n\n\n\n\nCode# Make a line plot of reaction time by day for each subject\n# Put these all on separate frames (one per subject)\nggplot(sleep_long, aes(y = reaction_time, x = day, color = Subject)) + \n  geom_line() + \n  facet_wrap(~ Subject)\n\n\n\n\n\n\n\nPart b\nReaction time increases (worsens) with a lack of sleep. Some subjects seem to be more impacted than others by lack of sleep, and some tend to have faster/slower reaction times in general.\nExercise 4: Pivot wider\nPart a\n\nCodesleep_long |&gt;\n  pivot_wider(names_from = day, values_from = reaction_time) |&gt;\n  head()\n\n# A tibble: 6 × 11\n  Subject   `0`   `1`   `2`   `3`   `4`   `5`   `6`   `7`   `8`   `9`\n  &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 308      250.  259.  251.  321.  357.  415.  382.  290.  431.  466.\n2 309      223.  205.  203.  205.  208.  216.  214.  218.  224.  237.\n3 310      199.  194.  234.  233.  229.  220.  235.  256.  261.  248.\n4 330      322.  300.  284.  285.  286.  298.  280.  318.  305.  354.\n5 331      288.  285   302.  320.  316.  293.  290.  335.  294.  372.\n6 332      235.  243.  273.  310.  317.  310   454.  347.  330.  254.\n\n\nPart b\n\nCodesleep_long |&gt;\n  pivot_wider(names_from = day, values_from = reaction_time, names_prefix = \"day_\") |&gt;\n  head()\n\n# A tibble: 6 × 11\n  Subject day_0 day_1 day_2 day_3 day_4 day_5 day_6 day_7 day_8 day_9\n  &lt;fct&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 308      250.  259.  251.  321.  357.  415.  382.  290.  431.  466.\n2 309      223.  205.  203.  205.  208.  216.  214.  218.  224.  237.\n3 310      199.  194.  234.  233.  229.  220.  235.  256.  261.  248.\n4 330      322.  300.  284.  285.  286.  298.  280.  318.  305.  354.\n5 331      288.  285   302.  320.  316.  293.  290.  335.  294.  372.\n6 332      235.  243.  273.  310.  317.  310   454.  347.  330.  254.\n\n\nExercise 5: Practice with Billboard charts\nPart a\nThe higher a song’s week 1 rating, the higher its week 2 rating tends to be. But almost all song’s rankings drop from week 1 to week 2.\n\nCodeggplot(billboard, aes(y = wk2, x = wk1)) + \n  geom_point() +\n  geom_abline(intercept = 0, slope = 1)\n\nWarning: Removed 5 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\nPart b\n\nCodebillboard |&gt; \n  filter(wk2 &gt; wk1)\n\n# A tibble: 7 × 79\n  artist      track date.entered   wk1   wk2   wk3   wk4   wk5   wk6   wk7   wk8\n  &lt;chr&gt;       &lt;chr&gt; &lt;date&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Carey, Mar… Cryb… 2000-06-24      28    34    48    62    77    90    95    NA\n2 Clark, Ter… A Li… 2000-12-16      75    82    88    96    99    99    NA    NA\n3 Diffie, Joe The … 2000-01-01      98   100   100    90    93    94    NA    NA\n4 Hart, Beth  L.A.… 1999-11-27      99   100    98    99    99    99    98    90\n5 Jay-Z       Hey … 2000-08-12      98   100    98    94    83    83    80    78\n6 Lil' Zane   Call… 2000-07-29      83    89    57    40    34    21    33    46\n7 Pearl Jam   Noth… 2000-05-13      49    70    84    89    93    91    NA    NA\n# ℹ 68 more variables: wk9 &lt;dbl&gt;, wk10 &lt;dbl&gt;, wk11 &lt;dbl&gt;, wk12 &lt;dbl&gt;,\n#   wk13 &lt;dbl&gt;, wk14 &lt;dbl&gt;, wk15 &lt;dbl&gt;, wk16 &lt;dbl&gt;, wk17 &lt;dbl&gt;, wk18 &lt;dbl&gt;,\n#   wk19 &lt;dbl&gt;, wk20 &lt;dbl&gt;, wk21 &lt;dbl&gt;, wk22 &lt;dbl&gt;, wk23 &lt;dbl&gt;, wk24 &lt;dbl&gt;,\n#   wk25 &lt;dbl&gt;, wk26 &lt;dbl&gt;, wk27 &lt;dbl&gt;, wk28 &lt;dbl&gt;, wk29 &lt;dbl&gt;, wk30 &lt;dbl&gt;,\n#   wk31 &lt;dbl&gt;, wk32 &lt;dbl&gt;, wk33 &lt;dbl&gt;, wk34 &lt;dbl&gt;, wk35 &lt;dbl&gt;, wk36 &lt;dbl&gt;,\n#   wk37 &lt;dbl&gt;, wk38 &lt;dbl&gt;, wk39 &lt;dbl&gt;, wk40 &lt;dbl&gt;, wk41 &lt;dbl&gt;, wk42 &lt;dbl&gt;,\n#   wk43 &lt;dbl&gt;, wk44 &lt;dbl&gt;, wk45 &lt;dbl&gt;, wk46 &lt;dbl&gt;, wk47 &lt;dbl&gt;, wk48 &lt;dbl&gt;, …\n\n\nPart c\n\nCode# Define nov_1999\nnov_1999 &lt;- billboard |&gt; \n  filter(date.entered == \"1999-11-06\") |&gt; \n  select(-track, -date.entered)\n\n# Or\nnov_1999 &lt;- billboard |&gt; \n  filter(date.entered == \"1999-11-06\") |&gt; \n  select(artist, starts_with(\"wk\"))\n\n\n# Confirm that nov_1999 has 2 rows (songs) and 77 columns\ndim(nov_1999)\n\n[1]  2 77\n\n\nPart c\n\nCodenov_1999 |&gt; \n  pivot_longer(cols = -artist, names_to = \"week\", names_prefix = \"wk\", values_to = \"ranking\") |&gt; \n  mutate(week = as.numeric(week)) |&gt; \n  ggplot(aes(y = ranking, x = week, color = artist)) + \n    geom_line()\n\nWarning: Removed 79 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\nExercise 6: Practice with the Daily Show\nPart a\n\nCodedaily |&gt; \n  count(raw_guest_list) |&gt; \n  arrange(desc(n)) |&gt; \n  head(15)\n\n# A tibble: 15 × 2\n   raw_guest_list        n\n   &lt;chr&gt;             &lt;int&gt;\n 1 Fareed Zakaria       19\n 2 Denis Leary          17\n 3 Brian Williams       16\n 4 Paul Rudd            13\n 5 Ricky Gervais        13\n 6 Tom Brokaw           12\n 7 Bill O'Reilly        10\n 8 Reza Aslan           10\n 9 Richard Lewis        10\n10 Will Ferrell         10\n11 Sarah Vowell          9\n12 Adam Sandler          8\n13 Ben Affleck           8\n14 Louis C.K.            8\n15 Maggie Gyllenhaal     8\n\n\nPart b\n\nCodedaily |&gt; \n  count(year, raw_guest_list) |&gt; \n  group_by(raw_guest_list) |&gt; \n  mutate(total = sum(n)) |&gt;\n  pivot_wider(names_from = year, \n              values_from = n,\n              values_fill = 0) |&gt; \n  arrange(desc(total)) |&gt; \n  head(15)\n\n# A tibble: 15 × 19\n# Groups:   raw_guest_list [15]\n   raw_guest_list  total `1999` `2000` `2001` `2002` `2003` `2004` `2005` `2006`\n   &lt;chr&gt;           &lt;int&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;\n 1 Fareed Zakaria     19      0      0      1      0      1      2      2      2\n 2 Denis Leary        17      1      0      1      2      1      0      0      1\n 3 Brian Williams     16      0      0      0      0      1      1      2      1\n 4 Paul Rudd          13      1      0      1      1      1      1      1      0\n 5 Ricky Gervais      13      0      0      0      0      0      0      1      2\n 6 Tom Brokaw         12      0      0      0      1      0      2      1      0\n 7 Richard Lewis      10      1      0      2      2      1      1      0      0\n 8 Will Ferrell       10      0      1      1      0      1      1      1      1\n 9 Bill O'Reilly      10      0      0      1      1      0      1      1      0\n10 Reza Aslan         10      0      0      0      0      0      0      1      2\n11 Sarah Vowell        9      0      0      0      1      0      1      1      1\n12 Adam Sandler        8      1      2      0      1      0      0      0      1\n13 Ben Affleck         8      0      0      0      0      2      0      0      1\n14 Maggie Gyllenh…     8      0      0      0      0      1      0      1      1\n15 Louis C.K.          8      0      0      0      0      0      0      0      1\n# ℹ 9 more variables: `2007` &lt;int&gt;, `2008` &lt;int&gt;, `2009` &lt;int&gt;, `2010` &lt;int&gt;,\n#   `2011` &lt;int&gt;, `2012` &lt;int&gt;, `2013` &lt;int&gt;, `2014` &lt;int&gt;, `2015` &lt;int&gt;\n\n\nPart c\n\nCodeplot_data |&gt;\n  group_by(year, broad_group) |&gt;\n  summarise(n = n()) |&gt;\n  mutate(freq = n / sum(n)) |&gt; \n  ggplot(aes(y = freq, x = year, color = broad_group)) + \n    geom_line()\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>reshaping</span>"
    ]
  },
  {
    "objectID": "ica/ica-reshaping.html#footnotes",
    "href": "ica/ica-reshaping.html#footnotes",
    "title": "\n17  reshaping\n",
    "section": "",
    "text": "Gregory Belenky, Nancy J. Wesensten, David R. Thorne, Maria L. Thomas, Helen C. Sing, Daniel P. Redmond, Michael B. Russo and Thomas J. Balkin (2003) Patterns of performance degradation and restoration during sleep restriction and subsequent recovery: a sleep dose-response study. Journal of Sleep Research 12, 1–12.↩︎",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>reshaping</span>"
    ]
  },
  {
    "objectID": "ica/ica-factors.html",
    "href": "ica/ica-factors.html",
    "title": "\n18  factors\n",
    "section": "",
    "text": "18.1 Review\nWhere are we? Data preparation\nThus far, we’ve learned how to:",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>factors</span>"
    ]
  },
  {
    "objectID": "ica/ica-factors.html#review",
    "href": "ica/ica-factors.html#review",
    "title": "\n18  factors\n",
    "section": "",
    "text": "do some wrangling:\n\n\narrange() our data in a meaningful order\nsubset the data to only filter() the rows and select() the columns of interest\n\nmutate() existing variables and define new variables\n\nsummarize() various aspects of a variable, both overall and by group (group_by())\n\n\nreshape our data to fit the task at hand (pivot_longer(), pivot_wider())\n\njoin() different datasets into one",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>factors</span>"
    ]
  },
  {
    "objectID": "ica/ica-factors.html#factors",
    "href": "ica/ica-factors.html#factors",
    "title": "\n18  factors\n",
    "section": "\n18.2 Factors",
    "text": "18.2 Factors\nIn the remaining days of our data preparation unit, we’ll focus on working with special types of “categorical” variables: characters and factors. Variables with these structures often require special tools and considerations.\nWe’ll focus on two common considerations:\n\n\nRegular expressions\nWhen working with character strings, we might want to detect, replace, or extract certain patterns. For example, recall our data on courses:\n\n\n\n    sessionID dept level    sem enroll     iid\n1 session1784    M   100 FA1991     22 inst265\n2 session1785    k   100 FA1991     52 inst458\n3 session1791    J   100 FA1993     22 inst223\n4 session1792    J   300 FA1993     20 inst235\n5 session1794    J   200 FA1993     22 inst234\n6 session1795    J   200 SP1994     26 inst230\n\n\n'data.frame':   1718 obs. of  6 variables:\n $ sessionID: chr  \"session1784\" \"session1785\" \"session1791\" \"session1792\" ...\n $ dept     : chr  \"M\" \"k\" \"J\" \"J\" ...\n $ level    : int  100 100 100 300 200 200 200 100 300 100 ...\n $ sem      : chr  \"FA1991\" \"FA1991\" \"FA1993\" \"FA1993\" ...\n $ enroll   : int  22 52 22 20 22 26 25 38 16 43 ...\n $ iid      : chr  \"inst265\" \"inst458\" \"inst223\" \"inst235\" ...\n\n\nFocusing on just the sem character variable, we might want to…\n\nchange FA to fall_ and SP to spring_\n\nkeep only courses taught in fall\nsplit the variable into 2 new variables: semester (FA or SP) and year\n\n\n\n\nConverting characters to factors (and factors to meaningful factors) (today)\nWhen categorical information is stored as a character variable, the categories of interest might not be labeled or ordered in a meaningful way. We can fix that!\n\nExample 1: Default Order\nRecall our data on presidential election outcomes in each U.S. county (except those in Alaska):\n\nCodelibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nCodeelections &lt;- read.csv(\"https://mac-stat.github.io/data/election_2020_county.csv\") |&gt; \n  select(state_abbr, historical, county_name, total_votes_20, repub_pct_20, dem_pct_20) |&gt; \n  mutate(dem_support_20 = case_when(\n    (repub_pct_20 - dem_pct_20 &gt;= 5) ~ \"low\",\n    (repub_pct_20 - dem_pct_20 &lt;= -5) ~ \"high\",\n    .default = \"medium\"\n  ))\n\n# Check it out\nhead(elections)  \n\n  state_abbr historical    county_name total_votes_20 repub_pct_20 dem_pct_20\n1         AL        red Autauga County          27770        71.44      27.02\n2         AL        red Baldwin County         109679        76.17      22.41\n3         AL        red Barbour County          10518        53.45      45.79\n4         AL        red    Bibb County           9595        78.43      20.70\n5         AL        red  Blount County          27588        89.57       9.57\n6         AL        red Bullock County           4613        24.84      74.70\n  dem_support_20\n1            low\n2            low\n3            low\n4            low\n5            low\n6           high\n\n\nCheck out the below visual and numerical summaries of dem_support_20:\n\nlow = the Republican won the county by at least 5 percentage points\nmedium = the Republican and Democrat votes were within 5 percentage points\nhigh = the Democrat won the county by at least 5 percentage points\n\n\nCodeggplot(elections, aes(x = dem_support_20)) + \n  geom_bar()\n\n\n\n\n\n\nCodeelections |&gt; \n  count(dem_support_20)\n\n  dem_support_20    n\n1           high  458\n2            low 2494\n3         medium  157\n\n\nFollow-up:\nWhat don’t you like about these results?\nExample 2: Change Order using fct_relevel\n\nThe above categories of dem_support_20 are listed alphabetically, which isn’t particularly meaningful here. This is because dem_support_20 is a character variable and R thinks of character strings as words, not category labels with any meaningful order (other than alphabetical):\n\nCodestr(elections)\n\n'data.frame':   3109 obs. of  7 variables:\n $ state_abbr    : chr  \"AL\" \"AL\" \"AL\" \"AL\" ...\n $ historical    : chr  \"red\" \"red\" \"red\" \"red\" ...\n $ county_name   : chr  \"Autauga County\" \"Baldwin County\" \"Barbour County\" \"Bibb County\" ...\n $ total_votes_20: int  27770 109679 10518 9595 27588 4613 9488 50983 15284 12301 ...\n $ repub_pct_20  : num  71.4 76.2 53.5 78.4 89.6 ...\n $ dem_pct_20    : num  27.02 22.41 45.79 20.7 9.57 ...\n $ dem_support_20: chr  \"low\" \"low\" \"low\" \"low\" ...\n\n\nWe can fix this by using fct_relevel() to both:\n\nStore dem_support_20 as a factor variable, the levels of which are recognized as specific levels or categories, not just words.\nSpecify a meaningful order for the levels of the factor variable.\n\n\nCode# Notice that the order of the levels is not alphabetical!\nelections &lt;- elections |&gt; \n  mutate(dem_support_20 = fct_relevel(dem_support_20, c(\"low\", \"medium\", \"high\")))\n\n# Notice the new structure of the dem_support_20 variable\nstr(elections)\n\n'data.frame':   3109 obs. of  7 variables:\n $ state_abbr    : chr  \"AL\" \"AL\" \"AL\" \"AL\" ...\n $ historical    : chr  \"red\" \"red\" \"red\" \"red\" ...\n $ county_name   : chr  \"Autauga County\" \"Baldwin County\" \"Barbour County\" \"Bibb County\" ...\n $ total_votes_20: int  27770 109679 10518 9595 27588 4613 9488 50983 15284 12301 ...\n $ repub_pct_20  : num  71.4 76.2 53.5 78.4 89.6 ...\n $ dem_pct_20    : num  27.02 22.41 45.79 20.7 9.57 ...\n $ dem_support_20: Factor w/ 3 levels \"low\",\"medium\",..: 1 1 1 1 1 3 1 1 1 1 ...\n\n\n\nCode# And plot dem_support_20\nggplot(elections, aes(x = dem_support_20)) +\n  geom_bar()\n\n\n\n\n\n\n\nExample 3: Change Labels using fct_recode\n\nWe now have a factor variable, dem_support_20, with categories that are ordered in a meaningful way:\n\nCodeelections |&gt; \n  count(dem_support_20)\n\n  dem_support_20    n\n1            low 2494\n2         medium  157\n3           high  458\n\n\nBut maybe we want to change up the category labels. For demo purposes, let’s create a new factor variable, results_20, that’s the same as dem_support_20 but with different category labels:\n\nCode# We can redefine any number of the category labels.\n# Here we'll relabel all 3 categories:\nelections &lt;- elections |&gt; \n  mutate(results_20 = fct_recode(dem_support_20, \n                                 \"strong republican\" = \"low\",\n                                 \"close race\" = \"medium\",\n                                 \"strong democrat\" = \"high\"))\n\n# Check it out\n# Note that the new category labels are still in a meaningful,\n# not necessarily alphabetical, order!\nelections |&gt; \n  count(results_20)\n\n         results_20    n\n1 strong republican 2494\n2        close race  157\n3   strong democrat  458\n\n\nExample 4: Re-order Levels using fct_relevel\n\nFinally, let’s explore how the Republican vote varied from county to county within each state:\n\nCode# Note that we're just piping the data into ggplot instead of writing\n# it as the first argument\nelections |&gt; \n  ggplot(aes(x = repub_pct_20, fill = state_abbr)) + \n    geom_density(alpha = 0.5)\n\nWarning: Groups with fewer than two data points have been dropped.\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nThis is too many density plots to put on top of one another. Let’s spread these out while keeping them in the same frame, hence easier to compare, using a joy plot or ridge plot:\n\nCodelibrary(ggridges)\nelections |&gt; \n  ggplot(aes(x = repub_pct_20, y = state_abbr, fill = historical)) + \n    geom_density_ridges() + \n    scale_fill_manual(values = c(\"blue\", \"purple\", \"red\"))\n\nPicking joint bandwidth of 4.43\n\n\n\n\n\n\n\n\nOK, but this is alphabetical. Suppose we want to reorder the states according to their typical Republican support. Recall that we did something similar in Example 2, using fct_relevel() to specify a meaningful order for the dem_support_20 categories:\nfct_relevel(dem_support_20, c(\"low\", \"medium\", \"high\"))\nWe could use fct_relevel() to reorder the states here, but what would be the drawbacks? - We would lose information about how states have historically voted\nExample 5: Re-order levels Based on Another Variable using fct_reorder\n\nWhen a meaningful order for the categories of a factor variable can be defined by another variable in our dataset, we can use fct_reorder(). In our joy plot, let’s reorder the states according to their median Republican support:\n\nCode# Since we might want states to be alphabetical in other parts of our analysis,\n# we'll pipe the data into the ggplot without storing it:\nelections |&gt; \n  mutate(state_abbr = fct_reorder(state_abbr, repub_pct_20, .fun = \"median\")) |&gt; \n  ggplot(aes(x = repub_pct_20, y = state_abbr, fill = historical)) + \n    geom_density_ridges() + \n    scale_fill_manual(values = c(\"blue\", \"purple\", \"red\"))\n\nPicking joint bandwidth of 4.43\n\n\n\n\n\n\n\n\n\nCode# How did the code change?\n# And the corresponding output?\nelections |&gt; \n  mutate(state_abbr = fct_reorder(state_abbr, repub_pct_20, .fun = \"median\", .desc = TRUE)) |&gt; \n  ggplot(aes(x = repub_pct_20, y = state_abbr, fill = historical)) + \n    geom_density_ridges() + \n    scale_fill_manual(values = c(\"blue\", \"purple\", \"red\"))\n\nPicking joint bandwidth of 4.43\n\n\n\n\n\n\n\n\nSummary\nThe forcats package, part of the tidyverse, includes handy functions for working with categorical variables (for + cats):\n\nHere are just some, few of which we explored above:\n\nfunctions for changing the order of factor levels\n\n\nfct_relevel() = manually reorder levels\n\nfct_reorder() = reorder levels according to values of another variable\n\n\nfct_infreq() = order levels from highest to lowest frequency\n\nfct_rev() = reverse the current order\n\n\nfunctions for changing the labels or values of factor levels\n\n\nfct_recode() = manually change levels\n\nfct_lump() = group together least common levels",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>factors</span>"
    ]
  },
  {
    "objectID": "ica/ica-factors.html#exercises",
    "href": "ica/ica-factors.html#exercises",
    "title": "\n18  factors\n",
    "section": "\n18.3 Exercises",
    "text": "18.3 Exercises\nThe exercises revisit our grades data:\n\nCode# Get rid of some duplicate rows!\ngrades &lt;- read.csv(\"https://mac-stat.github.io/data/grades.csv\") |&gt; \n  distinct(sid, sessionID, .keep_all = TRUE)\n\n# Check it out\nhead(grades)\n\n     sid grade   sessionID\n1 S31185    D+ session1784\n2 S31185    B+ session1785\n3 S31185    A- session1791\n4 S31185    B+ session1792\n5 S31185    B- session1794\n6 S31185    C+ session1795\n\n\nWe’ll explore the number of times each grade was assigned:\n\nCodegrade_distribution &lt;- grades |&gt; \n  count(grade)\n\nhead(grade_distribution)\n\n  grade    n\n1     A 1506\n2    A- 1381\n3    AU   27\n4     B  804\n5    B+ 1003\n6    B-  330\n\n\nExercise 1: Changing Order\nCheck out a column plot of the number of times each grade was assigned during the study period. This is similar to a bar plot, but where we define the height of a bar according to variable in our dataset.\n\nCodegrade_distribution |&gt; \n  ggplot(aes(x = grade, y = n)) +\n    geom_col()\n\n\n\n\n\n\n\nThe order of the grades is goofy! Construct a new column plot, manually reordering the grades from high (A) to low (NC) with “S” and “AU” at the end:\n\nCodegrade_distribution |&gt;\n  mutate(grade = fct_relevel(grade, c(\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"NC\", \"S\", \"AU\"))) |&gt;\n  ggplot(aes(x = grade, y = n)) +\n    geom_col()\n\n\n\n\n\n\n\nConstruct a new column plot, reordering the grades in ascending frequency (i.e. how often the grades were assigned):\n\nCodegrade_distribution |&gt;\n  \n  mutate(grade = fct_reorder(grade, n)) |&gt;\n  ggplot(aes(x = grade, y = n)) +\n    geom_col()\n\n\n\n\n\n\n\nConstruct a new column plot, reordering the grades in descending frequency (i.e. how often the grades were assigned):\n\nCodegrade_distribution |&gt;\n  mutate(grade = fct_rev(fct_reorder(grade, n))) |&gt;\n  ggplot(aes(x = grade, y = n)) +\n    geom_col()\n\n\n\n\n\n\n\nExercise 2: Changing Factor Level Labels\nIt may not be clear what “AU” and “S” stand for. Construct a new column plot that renames these levels “Audit” and “Satisfactory”, while keeping the other grade labels the same and in a meaningful order:\n\nCodegrade_distribution |&gt;\n  mutate(grade = fct_relevel(grade, c(\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"NC\", \"S\" == \"Satisfactory\", \"AU\" == \"Audit\"))) |&gt;\n  mutate(grade = fct_relevel(c(\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"NC\", \"S\" = \"Satisfactory\", \"AU\" = \"Audit\"))) |&gt;  # Multiple pieces go into the last 2 blanks\n  ggplot(aes(x = grade, y = n)) +\n    geom_col()\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `grade = fct_relevel(...)`.\nCaused by warning:\n! 1 unknown level in `f`: FALSE",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>factors</span>"
    ]
  },
  {
    "objectID": "ica/ica-factors.html#solutions",
    "href": "ica/ica-factors.html#solutions",
    "title": "\n18  factors\n",
    "section": "\n18.4 Solutions",
    "text": "18.4 Solutions\n\nClick for Solutions\nExample 1: Default Orde\nThe categories are in alphabetical order, which isn’t meaningful here.\nExample 4: Re-ordering Levels using fct_relevel\n\nwe would have to:\n\nCalculate the typical Republican support in each state, e.g. using group_by() and summarize().\nWe’d then have to manually type out a meaningful order for 50 states! That’s a lot of typing and manual bookkeeping.\nExercise 1: Changing Order\n\nCodegrade_distribution |&gt;\n  mutate(grade = fct_relevel(grade, c(\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"NC\", \"S\", \"AU\"))) |&gt;\n  ggplot(aes(x = grade, y = n)) +\n    geom_col()\n\n\n\n\n\n\n\n\nCodegrade_distribution |&gt;\n  mutate(grade = fct_reorder(grade, n)) |&gt;\n  ggplot(aes(x = grade, y = n)) +\n    geom_col()\n\n\n\n\n\n\n\n\nCodegrade_distribution |&gt;\n  mutate(grade = fct_reorder(grade, n, .desc = TRUE)) |&gt;\n  ggplot(aes(x = grade, y = n)) +\n    geom_col()\n\n\n\n\n\n\n\nExercise 2: Changing Factor Level Labels\n\nCodegrade_distribution |&gt;\n  mutate(grade = fct_relevel(grade, c(\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"NC\", \"S\", \"AU\"))) |&gt;\n  mutate(grade = fct_recode(grade, \"Satisfactory\" = \"S\", \"Audit\" = \"AU\")) |&gt;  # Multiple pieces go into the last 2 blanks\n  ggplot(aes(x = grade, y = n)) +\n    geom_col()",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>factors</span>"
    ]
  },
  {
    "objectID": "ica/ica-dates.html",
    "href": "ica/ica-dates.html",
    "title": "\n19  dates\n",
    "section": "",
    "text": "19.1 Warm-up",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>dates</span>"
    ]
  },
  {
    "objectID": "ica/ica-dates.html#warm-up",
    "href": "ica/ica-dates.html#warm-up",
    "title": "\n19  dates\n",
    "section": "",
    "text": "Data Science Process\nBelow is the visual representation of the data science process we saw earlier. Which stage are we in currently?\n\nRecall that wrangling is important. It is much of what we spend our efforts on in Data Science. There are lots of steps, hence R functions, that can go into data wrangling. But we can get far with the following 6 wrangling verbs:\n\n\nverb\naction\n\n\n\narrange\n\narrange the rows according to some column\n\n\n\nfilter\n\nfilter out or obtain a subset of the rows\n\n\n\nselect\n\nselect a subset of columns\n\n\n\nmutate\n\nmutate or create a column\n\n\n\nsummarize\ncalculate a numerical summary of a column\n\n\n\ngroup_by\n\ngroup the rows by a specified column\n\n\n\nExample 1: Single Verb\nLet’s start by working with some TidyTuesday data on penguins. This data includes information about penguins’ flippers (“arms”) and bills (“mouths” or “beaks”). Let’s import this using read_csv(), a function in the tidyverse package. For the most part, this is similar to read.csv(), though read_csv() can be more efficient at importing large datasets.\n\nCodelibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nCodepenguins &lt;- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-28/penguins.csv')\n\nRows: 344 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): species, island, sex\ndbl (5): bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g, year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nCode# Check it out\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n\n\n\n\n\n\n\nCheck Understanding\n\n\n\nConstruct a plot that allows us to examine how the relationship between body mass and bill length varies by species and sex.\n\n\n\nCodeggplot(penguins, aes(x = body_mass_g, y = bill_length_mm, color = species)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  facet_wrap(~sex)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCheck Understanding\n\n\n\nUse the 6 wrangling verbs to address each task in the code chunk below. You can tack on |&gt; head() to print out just 6 rows to keep your rendered document manageable. Most of these require just 1 verb.\n\n\n\nCode# Get data on only Adelie penguins that weigh more than 4700g\npenguins |&gt;\n  filter(species == \"Adelie\", body_mass_g &gt; 4700) |&gt;\n  head()\n\n# A tibble: 2 × 8\n  species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;chr&gt;   &lt;chr&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n1 Adelie  Biscoe           41              20               203        4725\n2 Adelie  Biscoe           43.2            19               197        4775\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\nCode# Get data on penguin body mass only\n# Show just the first 6 rows\npenguins |&gt;\n  select(body_mass_g) |&gt;\n  head()\n\n# A tibble: 6 × 1\n  body_mass_g\n        &lt;dbl&gt;\n1        3750\n2        3800\n3        3250\n4          NA\n5        3450\n6        3650\n\nCode# Sort the penguins from smallest to largest body mass\n# Show just the first 6 rows\npenguins |&gt;\n  arrange(body_mass_g) |&gt;\n  head()\n\n# A tibble: 6 × 8\n  species   island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;chr&gt;     &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n1 Chinstrap Dream               46.9          16.6               192        2700\n2 Adelie    Biscoe              36.5          16.6               181        2850\n3 Adelie    Biscoe              36.4          17.1               184        2850\n4 Adelie    Biscoe              34.5          18.1               187        2900\n5 Adelie    Dream               33.1          16.1               178        2900\n6 Adelie    Torgersen           38.6          17                 188        2900\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\nCode# Calculate the average body mass across all penguins\n# Note: na.rm = TRUE removes the NAs from the calculation\npenguins |&gt;\n  filter(!is.na(body_mass_g)) |&gt;\n  summarise(mean(body_mass_g))\n\n# A tibble: 1 × 1\n  `mean(body_mass_g)`\n                &lt;dbl&gt;\n1               4202.\n\nCode# Calculate the average body mass by species\n\npenguins |&gt;\n  filter(!is.na(body_mass_g)) |&gt;\n  group_by(species) |&gt;\n  summarise(mean(body_mass_g))\n\n# A tibble: 3 × 2\n  species   `mean(body_mass_g)`\n  &lt;chr&gt;                   &lt;dbl&gt;\n1 Adelie                  3701.\n2 Chinstrap               3733.\n3 Gentoo                  5076.\n\nCode# Create a new column that records body mass in kilograms, not grams\n# NOTE: there are 1000 g in 1 kg\n# Show just the first 6 rows\n\npenguins |&gt;\n  mutate(body_mass_kg = body_mass_g / 1000) |&gt;\n  head()\n\n# A tibble: 6 × 9\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 3 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;, body_mass_kg &lt;dbl&gt;\n\n\n\n\n\n\n\n\nCheck Understanding\n\n\n\nHow many penguins of each species do we have? Create a viz that addresses this question.\n\n\n\nCodeggplot(penguins, aes(x = species)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCheck Understanding\n\n\n\nCan we use the 6 verbs to calculate exactly how many penguins in each species?\nHINT: n() calculates group size.\n\n\n\nCodepenguins |&gt;\n  mutate(number = 1) |&gt;\n  group_by(species) |&gt;\n  summarize(sum(number))\n\n# A tibble: 3 × 2\n  species   `sum(number)`\n  &lt;chr&gt;             &lt;dbl&gt;\n1 Adelie              152\n2 Chinstrap            68\n3 Gentoo              124\n\n\n\n\n\n\n\n\ncount verb\n\n\n\nThe count() verb provides a handy shortcut!\n\nCodepenguins |&gt; \n  count(species)\n\n# A tibble: 3 × 2\n  species       n\n  &lt;chr&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\n\n\n\nExample 2: Multiple Verbs\n\n\n\n\n\n\nCheck Understanding\n\n\n\nLet’s practice combining some verbs. For each task:\n\nTranslate the prompt into our 6 verbs. That is, think before you type.\nBuild your code line by line. It’s important to understand what’s being piped into each function!\nAsk what you can rearrange and still get the same result.\nRead your final code like a paragraph / a conversation. Would another person be able to follow your logic?\n\n\n\n\nCode# Sort Gentoo penguins from biggest to smallest with respect to their \n# bill length in cm (there are 10 mm in a cm)\npenguins |&gt;\n  mutate(bill_length_cm = bill_length_mm / 10) |&gt;\n  filter(species == \"Gentoo\") |&gt;\n  arrange(desc(bill_length_cm))\n\n# A tibble: 124 × 9\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;chr&gt;   &lt;chr&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Gentoo  Biscoe           59.6          17                 230        6050\n 2 Gentoo  Biscoe           55.9          17                 228        5600\n 3 Gentoo  Biscoe           55.1          16                 230        5850\n 4 Gentoo  Biscoe           54.3          15.7               231        5650\n 5 Gentoo  Biscoe           53.4          15.8               219        5500\n 6 Gentoo  Biscoe           52.5          15.6               221        5450\n 7 Gentoo  Biscoe           52.2          17.1               228        5400\n 8 Gentoo  Biscoe           52.1          17                 230        5550\n 9 Gentoo  Biscoe           51.5          16.3               230        5500\n10 Gentoo  Biscoe           51.3          14.2               218        5300\n# ℹ 114 more rows\n# ℹ 3 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;, bill_length_cm &lt;dbl&gt;\n\n\n\nCode# Sort the species from smallest to biggest with respect to their \n# average bill length in cm\npenguins |&gt;\n  mutate(bill_length_cm = bill_length_mm / 10) |&gt;\n  filter(!is.na(bill_length_cm)) |&gt;\n  group_by(species) |&gt;\n  summarise(avg_bill_length_cm = mean(bill_length_cm)) |&gt;\n  arrange(desc(avg_bill_length_cm))\n\n# A tibble: 3 × 2\n  species   avg_bill_length_cm\n  &lt;chr&gt;                  &lt;dbl&gt;\n1 Chinstrap               4.88\n2 Gentoo                  4.75\n3 Adelie                  3.88\n\n\nExample 3: Interpret Code\nLet’s practice reading and making sense of somebody else’s code. What do you think this produces?\n\nHow many columns? Rows?\nWhat are the column names?\nWhat’s represented in each row?\n\nOnce you’ve thought about it, put the code inside a chunk and run it!\npenguins |&gt; filter(species == “Chinstrap”) |&gt; group_by(sex) |&gt; summarize(min = min(body_mass_g), max = max(body_mass_g)) |&gt; mutate(range = max - min)\n\nCodepenguins |&gt;\n  filter(species == \"Chinstrap\") |&gt;\n  group_by(sex) |&gt;\n  summarise(min = min(body_mass_g), max = max(body_mass_g)) |&gt;\n  mutate(ranget = max - min)\n\n# A tibble: 2 × 4\n  sex      min   max ranget\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1 female  2700  4150   1450\n2 male    3250  4800   1550",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>dates</span>"
    ]
  },
  {
    "objectID": "ica/ica-dates.html#exercises-part-1-same-verbs-new-tricks",
    "href": "ica/ica-dates.html#exercises-part-1-same-verbs-new-tricks",
    "title": "\n19  dates\n",
    "section": "\n19.2 Exercises Part 1: Same Verbs, New Tricks",
    "text": "19.2 Exercises Part 1: Same Verbs, New Tricks\nExercise 1: More Filtering\nRecall the “logical comparison operators” we can use to filter() our data:\n\n\nsymbol\nmeaning\n\n\n\n==\nequal to\n\n\n!=\nnot equal to\n\n\n&gt;\ngreater than\n\n\n&gt;=\ngreater than or equal to\n\n\n&lt;\nless than\n\n\n&lt;=\nless than or equal to\n\n\n%in% c(***, ***)\na list of multiple values\n\n\n\nPart a\n\n\n\n\n\n\nCommenting/Uncommenting Code\n\n\n\nTo comment/uncomment several lines of code at once, highlight them then click ctrl/cmd+shift+c.\n\n\n\nCode# Create a dataset with just Adelie and Chinstrap using %in%\n# Pipe this into `count(species)` to confirm that you only have these 2 species\npenguins |&gt;\n  filter(species %in% c(\"Adelie\", \"Chinstrap\")) |&gt;\n  count(species)\n\n# A tibble: 2 × 2\n  species       n\n  &lt;chr&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n\n\n\nCode# Create a dataset with just Adelie and Chinstrap using !=\n# Pipe this into `count(species)` to confirm that you only have these 2 species\npenguins |&gt;\n  filter(species != \"Gentoo\") |&gt;\n  count(species)\n\n# A tibble: 2 × 2\n  species       n\n  &lt;chr&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n\n\nPart b\nNotice that some of our penguins have missing (NA) data on some values:\n\nCodehead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n\n\n\n\n\n\n\nHandeling NA Values\n\n\n\nThere are many ways to handle missing data. The right approach depends upon your research goals. A general rule is: Only get rid of observations with missing data if they’re missing data on variables you need for the specific task at hand!\n\n\nExample 1\nSuppose our research focus is just on body_mass_g. Two penguins are missing this info:\n\nCode# NOTE the use of is.na()\npenguins |&gt; \n  summarize(sum(is.na(body_mass_g)))\n\n# A tibble: 1 × 1\n  `sum(is.na(body_mass_g))`\n                      &lt;int&gt;\n1                         2\n\n\nLet’s define a new dataset that removes these penguins:\n\nCode# NOTE the use of is.na()\npenguins_w_body_mass &lt;- penguins |&gt; \n  filter(!is.na(body_mass_g))\n\n# Compare the number of penguins in this vs the original data\nnrow(penguins_w_body_mass)\n\n[1] 342\n\nCodenrow(penguins)\n\n[1] 344\n\n\nNote that some penguins in penguins_w_body_mass are missing info on sex, but we don’t care since that’s not related to our research question:\n\nCodepenguins_w_body_mass |&gt; \n  summarize(sum(is.na(sex)))\n\n# A tibble: 1 × 1\n  `sum(is.na(sex))`\n              &lt;int&gt;\n1                 9\n\n\nExample 2\nIn the very rare case that we need complete information on every variable for the specific task at hand, we can use na.omit() to get rid of any penguin that’s missing info on any variable:\n\nCodepenguins_complete &lt;- penguins |&gt; \n  na.omit()\n\n\nHow many penguins did this eliminate?\n\nCodenrow(penguins_complete)\n\n[1] 333\n\nCodenrow(penguins)\n\n[1] 344\n\n\nPart c\nExplain why we should only use na.omit() in extreme circumstances.\n\nWe only use na.omit() when we want to get rid of all observations that do not have values for a single variable or more. We only do this when we want to make sure every variable has complete data in our observations, which is very rare. Most of the time, you can leave observations in the dataset even if they don’t have values for some of your variables because you most likely won’t be using all of the variables in the dataset.\nExercise 2: More Selecting\nBeing able to select() only certain columns can help simplify our data. This is especially important when we’re working with lots of columns (which we haven’t done yet). It can also get tedious to type out every column of interest. Here are some shortcuts:\n\n\n- removes a given variable and keeps all others (e.g. select(-island))\n\nstarts_with(\"___\"), ends_with(\"___\"), or contains(\"___\") selects only the columns that either start with, end with, or simply contain the given string of characters\n\nUse these shortcuts to create the following datasets.\n\nCode# First: recall the variable names\nnames(penguins)\n\n[1] \"species\"           \"island\"            \"bill_length_mm\"   \n[4] \"bill_depth_mm\"     \"flipper_length_mm\" \"body_mass_g\"      \n[7] \"sex\"               \"year\"             \n\n\n\nCode# Use a shortcut to keep everything but the year and island variables\npenguins |&gt;\n  select(-island, -year)\n\n# A tibble: 344 × 6\n   species bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex   \n   &lt;chr&gt;            &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt; \n 1 Adelie            39.1          18.7               181        3750 male  \n 2 Adelie            39.5          17.4               186        3800 female\n 3 Adelie            40.3          18                 195        3250 female\n 4 Adelie            NA            NA                  NA          NA &lt;NA&gt;  \n 5 Adelie            36.7          19.3               193        3450 female\n 6 Adelie            39.3          20.6               190        3650 male  \n 7 Adelie            38.9          17.8               181        3625 female\n 8 Adelie            39.2          19.6               195        4675 male  \n 9 Adelie            34.1          18.1               193        3475 &lt;NA&gt;  \n10 Adelie            42            20.2               190        4250 &lt;NA&gt;  \n# ℹ 334 more rows\n\n\n\nCode# Use a shortcut to keep only species and the penguin characteristics measured in mm\npenguins |&gt;\n  select(species, contains(\"mm\"))\n\n# A tibble: 344 × 4\n   species bill_length_mm bill_depth_mm flipper_length_mm\n   &lt;chr&gt;            &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;\n 1 Adelie            39.1          18.7               181\n 2 Adelie            39.5          17.4               186\n 3 Adelie            40.3          18                 195\n 4 Adelie            NA            NA                  NA\n 5 Adelie            36.7          19.3               193\n 6 Adelie            39.3          20.6               190\n 7 Adelie            38.9          17.8               181\n 8 Adelie            39.2          19.6               195\n 9 Adelie            34.1          18.1               193\n10 Adelie            42            20.2               190\n# ℹ 334 more rows\n\n\n\nCode# Use a shortcut to keep only species and bill-related measurements\npenguins |&gt;\n  select(species, contains(\"bill\"))\n\n# A tibble: 344 × 3\n   species bill_length_mm bill_depth_mm\n   &lt;chr&gt;            &lt;dbl&gt;         &lt;dbl&gt;\n 1 Adelie            39.1          18.7\n 2 Adelie            39.5          17.4\n 3 Adelie            40.3          18  \n 4 Adelie            NA            NA  \n 5 Adelie            36.7          19.3\n 6 Adelie            39.3          20.6\n 7 Adelie            38.9          17.8\n 8 Adelie            39.2          19.6\n 9 Adelie            34.1          18.1\n10 Adelie            42            20.2\n# ℹ 334 more rows\n\n\n\nCode# Use a shortcut to keep only species and the length-related characteristics\npenguins |&gt;\n  select(species, contains(\"length\"))\n\n# A tibble: 344 × 3\n   species bill_length_mm flipper_length_mm\n   &lt;chr&gt;            &lt;dbl&gt;             &lt;dbl&gt;\n 1 Adelie            39.1               181\n 2 Adelie            39.5               186\n 3 Adelie            40.3               195\n 4 Adelie            NA                  NA\n 5 Adelie            36.7               193\n 6 Adelie            39.3               190\n 7 Adelie            38.9               181\n 8 Adelie            39.2               195\n 9 Adelie            34.1               193\n10 Adelie            42                 190\n# ℹ 334 more rows\n\n\n\nExercise 3: Arranging, Counting, & Grouping by Multiple Variables\nWe’ve done examples where we need to filter() by more than one variable, or select() more than one variable. Use your intuition for how we can arrange(), count(), and group_by() more than one variable.\n\nCode# Change this code to sort the penguins by species, and then island name\n# NOTE: The first row should be an Adelie penguin living on Biscoe island\npenguins |&gt; \n  arrange(species) |&gt;\n  arrange(island)\n\n# A tibble: 344 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;chr&gt;   &lt;chr&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Adelie  Biscoe           37.8          18.3               174        3400\n 2 Adelie  Biscoe           37.7          18.7               180        3600\n 3 Adelie  Biscoe           35.9          19.2               189        3800\n 4 Adelie  Biscoe           38.2          18.1               185        3950\n 5 Adelie  Biscoe           38.8          17.2               180        3800\n 6 Adelie  Biscoe           35.3          18.9               187        3800\n 7 Adelie  Biscoe           40.6          18.6               183        3550\n 8 Adelie  Biscoe           40.5          17.9               187        3200\n 9 Adelie  Biscoe           37.9          18.6               172        3150\n10 Adelie  Biscoe           40.5          18.9               180        3950\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n\n\nCode# Change this code to count the number of male/female penguins observed for each species\npenguins |&gt; \n  group_by(sex) |&gt;\n  count(species)\n\n# A tibble: 8 × 3\n# Groups:   sex [3]\n  sex    species       n\n  &lt;chr&gt;  &lt;chr&gt;     &lt;int&gt;\n1 female Adelie       73\n2 female Chinstrap    34\n3 female Gentoo       58\n4 male   Adelie       73\n5 male   Chinstrap    34\n6 male   Gentoo       61\n7 &lt;NA&gt;   Adelie        6\n8 &lt;NA&gt;   Gentoo        5\n\n\n\nCode# Change this code to calculate the average body mass by species and sex\npenguins |&gt; \n  group_by(species, sex) |&gt; \n  summarize(mean = mean(body_mass_g, na.rm = TRUE))\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 8 × 3\n# Groups:   species [3]\n  species   sex     mean\n  &lt;chr&gt;     &lt;chr&gt;  &lt;dbl&gt;\n1 Adelie    female 3369.\n2 Adelie    male   4043.\n3 Adelie    &lt;NA&gt;   3540 \n4 Chinstrap female 3527.\n5 Chinstrap male   3939.\n6 Gentoo    female 4680.\n7 Gentoo    male   5485.\n8 Gentoo    &lt;NA&gt;   4588.\n\n\n\nExercise 4: Dates\nBefore some wrangling practice, let’s explore another important concept: working with or mutating date variables. Dates are a whole special object type or class in R that automatically respect the order of time.\n\nCode# Get today's date\nas.Date(today())\n\n[1] \"2025-04-08\"\n\nCode# Let's store this as \"today\" so we can work with it below\ntoday &lt;- as.Date(today())\n\n# Check out the class of this object\nclass(today)\n\n[1] \"Date\"\n\n\nThe lubridate package inside tidyverse contains functions that can extract various information from dates. Let’s learn about some of the most common functions by applying them to today. For each, make a comment on what the function does\n\nCodeyear(today)\n\n[1] 2025\n\n\n\nCode# What do these lines produce / what's their difference?\nmonth(today)\n\n[1] 4\n\nCodemonth(today, label = TRUE)\n\n[1] Apr\n12 Levels: Jan &lt; Feb &lt; Mar &lt; Apr &lt; May &lt; Jun &lt; Jul &lt; Aug &lt; Sep &lt; ... &lt; Dec\n\n\n\nCode# What does this number mean?\nweek(today)\n\n[1] 14\n\n\n\nCode# What do these lines produce / what's their difference?\nmday(today)\n\n[1] 8\n\nCodeyday(today)  # This is often called the \"Julian day\"\n\n[1] 98\n\n\n\nCode# What do these lines produce / what's their difference?\nwday(today)\n\n[1] 3\n\nCodewday(today, label = TRUE)\n\n[1] Tue\nLevels: Sun &lt; Mon &lt; Tue &lt; Wed &lt; Thu &lt; Fri &lt; Sat\n\n\n\nCode# What do the results of these 2 lines tell us?\ntoday &gt;= ymd(\"2024-02-14\")\n\n[1] TRUE\n\nCodetoday &lt; ymd(\"2024-02-14\")\n\n[1] FALSE\n\n\n\nThey show us that the date today is after or on the same day as the 14th of February 2024",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>dates</span>"
    ]
  },
  {
    "objectID": "ica/ica-dates.html#exercises-part-2-application",
    "href": "ica/ica-dates.html#exercises-part-2-application",
    "title": "\n19  dates\n",
    "section": "\n19.3 Exercises Part 2: Application",
    "text": "19.3 Exercises Part 2: Application\nThe remaining exercises are similar to some of those on the homework. Hence, the solutions are not provided. Let’s apply these ideas to the daily Birthdays dataset in the mosaic package.\n\nCodelibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\n\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\n\n\nAttaching package: 'mosaic'\n\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nCodedata(\"Birthdays\")\nhead(Birthdays)\n\n  state year month day       date wday births\n1    AK 1969     1   1 1969-01-01  Wed     14\n2    AL 1969     1   1 1969-01-01  Wed    174\n3    AR 1969     1   1 1969-01-01  Wed     78\n4    AZ 1969     1   1 1969-01-01  Wed     84\n5    CA 1969     1   1 1969-01-01  Wed    824\n6    CO 1969     1   1 1969-01-01  Wed    100\n\n\nBirthdays gives the number of births recorded on each day of the year in each state from 1969 to 19881. We can use our wrangling skills to understand some drivers of daily births. Putting these all together can be challenging! Remember the following ways to make tasks more manageable:\n\nTranslate the prompt into our 6 verbs (and count()). That is, think before you type.\nBuild your code line by line. It’s important to understand what’s being piped into each function!\n\nExercise 5: Warming up\n\nCode# How many days of data do we have for each state?\nBirthdays |&gt;\n  group_by(state) |&gt;\n  count()\n\n# A tibble: 51 × 2\n# Groups:   state [51]\n   state     n\n   &lt;chr&gt; &lt;int&gt;\n 1 AK     7306\n 2 AL     7312\n 3 AR     7310\n 4 AZ     7310\n 5 CA     7325\n 6 CO     7305\n 7 CT     7312\n 8 DC     7311\n 9 DE     7307\n10 FL     7307\n# ℹ 41 more rows\n\nCode# How many total births were there in this time period?\nBirthdays |&gt;\n  summarise(sum(births))\n\n  sum(births)\n1    70486538\n\nCode# How many total births were there per state in this time period, sorted from low to high?\nBirthdays |&gt;\n  group_by(state) |&gt;\n  summarise(sum(births))\n\n# A tibble: 51 × 2\n   state `sum(births)`\n   &lt;chr&gt;         &lt;int&gt;\n 1 AK           185385\n 2 AL          1206772\n 3 AR           684220\n 4 AZ           947234\n 5 CA          7822785\n 6 CO           946378\n 7 CT           824338\n 8 DC           425469\n 9 DE           188705\n10 FL          2624301\n# ℹ 41 more rows\n\n\nExercise 6: Homework Reprise\nCreate a new dataset named daily_births that includes the total number of births per day (across all states) and the corresponding day of the week, eg, Mon. NOTE: Name the column with total births so that it’s easier to wrangle and plot.\n\nCodedaily_births &lt;- Birthdays |&gt;\n  group_by(date) |&gt;\n  summarize(total_births = sum(births)) |&gt;\n  mutate(dayOfWeek = wday(date, label = TRUE))\n\n\nUsing this data, construct a plot of births over time, indicating the day of week.\n\nCodeggplot(daily_births, aes(x = date, y = total_births, color = dayOfWeek)) +\n  geom_point(size = 0.5, alpha = 0.5)\n\n\n\n\n\n\n\nExercise 7: Wrangle & Plot\nFor each prompt below, you can decide whether you want to: (1) wrangle and store data, then plot; or (2) wrangle data and pipe directly into ggplot. For example:\n\nCodepenguins |&gt; \n  filter(species != \"Gentoo\") |&gt; \n  ggplot(aes(y = bill_length_mm, x = bill_depth_mm, color = species)) + \n    geom_point()\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\nPart a\nCalculate the total number of births in each month and year, eg, Jan 1969, Feb 1969, …. Label month by names not numbers, eg, Jan not 1. Then, plot the births by month and comment on what you learn.\n\nCode# It seems like, in the first half of the year, the number of births is really low compared to the second half of the year. I also learned that when you use ggplot to make a plot connected to piping, you don't need to enter the dataset.\nBirthdays |&gt;\n  mutate(month = month(date, label = TRUE)) |&gt;\n  group_by(month) |&gt;\n  summarize(total_births = sum(births)) |&gt;\n  ggplot(aes(x = month, y = total_births)) +\n    geom_point()\n\n\n\n\n\n\n\nPart b\nIn 1988, calculate the total number of births per week in each state. Get rid of week “53”, which isn’t a complete week! Then, make a line plot of births by week for each state and comment on what you learn. For example, do you notice any seasonal trends? Are these the same in every state? Any outliers?\n\nCode# From this I learned that in 1988 California had exceptionally high birth rates. So did Texas and New York. Other states, however, had much lower rates.\n\nBirthdays |&gt;\n  filter(year == 1988) |&gt;\n  mutate(week = week(date)) |&gt;\n  filter(week != 53) |&gt;\n  group_by(state, week) |&gt;\n  summarize(total_births = sum(births)) |&gt;\n  ggplot(aes(x = week, y = total_births, color = state)) +\n    geom_point()\n\n`summarise()` has grouped output by 'state'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nPart c\nRepeat the above for just Minnesota (MN) and Louisiana (LA). MN has one of the coldest climates and LA has one of the warmest. How do their seasonal trends compare? Do you think these trends are similar in other colder and warmer states? Try it!\n\nCode# Minnesota has more births in the middle of the year, form Spring to Fall, while Louisiana's total births per week is highest in the summer and fall, but drops off until spring returns\n\nBirthdays |&gt;\n  filter(year == 1988, state %in% c(\"MN\", \"LA\")) |&gt;\n  mutate(week = week(date)) |&gt;\n  filter(week != 53) |&gt;\n  group_by(state, week) |&gt;\n  summarize(total_births = sum(births)) |&gt;\n  ggplot(aes(x = week, y = total_births, color = state)) +\n    geom_point()\n\n`summarise()` has grouped output by 'state'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\nExercise 8: More Practice\nPart a\nCreate a dataset with only births in Massachusetts (MA) in 1979 and sort the days from those with the most births to those with the fewest.\n\nCodeBirthdays |&gt;\n  filter(year == 1979, state == \"MA\") |&gt;\n  arrange(desc(births))\n\n    state year month day       date  wday births\n1      MA 1979     9  28 1979-09-28   Fri    262\n2      MA 1979     9  11 1979-09-11  Tues    252\n3      MA 1979    12  28 1979-12-28   Fri    249\n4      MA 1979     9  26 1979-09-26   Wed    246\n5      MA 1979     7  24 1979-07-24  Tues    245\n6      MA 1979     4  27 1979-04-27   Fri    243\n7      MA 1979     8   6 1979-08-06   Mon    243\n8      MA 1979    10   2 1979-10-02  Tues    239\n9      MA 1979     6  29 1979-06-29   Fri    238\n10     MA 1979     8  23 1979-08-23 Thurs    238\n11     MA 1979     2  23 1979-02-23   Fri    237\n12     MA 1979     5   1 1979-05-01  Tues    236\n13     MA 1979     7  18 1979-07-18   Wed    236\n14     MA 1979     8   2 1979-08-02 Thurs    236\n15     MA 1979     5  24 1979-05-24 Thurs    235\n16     MA 1979     8   1 1979-08-01   Wed    235\n17     MA 1979     4   6 1979-04-06   Fri    234\n18     MA 1979     8  31 1979-08-31   Fri    234\n19     MA 1979     5  10 1979-05-10 Thurs    233\n20     MA 1979     8  15 1979-08-15   Wed    233\n21     MA 1979     3  23 1979-03-23   Fri    232\n22     MA 1979     6  12 1979-06-12  Tues    232\n23     MA 1979     7  10 1979-07-10  Tues    232\n24     MA 1979     7  25 1979-07-25   Wed    232\n25     MA 1979     6  27 1979-06-27   Wed    231\n26     MA 1979     7  27 1979-07-27   Fri    231\n27     MA 1979    10   5 1979-10-05   Fri    231\n28     MA 1979     5  23 1979-05-23   Wed    230\n29     MA 1979     9  19 1979-09-19   Wed    229\n30     MA 1979     2  16 1979-02-16   Fri    228\n31     MA 1979     8  16 1979-08-16 Thurs    228\n32     MA 1979     8  24 1979-08-24   Fri    228\n33     MA 1979     9  17 1979-09-17   Mon    228\n34     MA 1979     4  30 1979-04-30   Mon    227\n35     MA 1979     6  26 1979-06-26  Tues    227\n36     MA 1979     7  20 1979-07-20   Fri    227\n37     MA 1979     8  10 1979-08-10   Fri    227\n38     MA 1979     8  14 1979-08-14  Tues    227\n39     MA 1979     9  24 1979-09-24   Mon    227\n40     MA 1979     3   5 1979-03-05   Mon    226\n41     MA 1979     6  21 1979-06-21 Thurs    226\n42     MA 1979     2   2 1979-02-02   Fri    225\n43     MA 1979     2  27 1979-02-27  Tues    225\n44     MA 1979     4   9 1979-04-09   Mon    225\n45     MA 1979     5   8 1979-05-08  Tues    225\n46     MA 1979     7  17 1979-07-17  Tues    225\n47     MA 1979     9  14 1979-09-14   Fri    225\n48     MA 1979     9  20 1979-09-20 Thurs    225\n49     MA 1979     6  11 1979-06-11   Mon    224\n50     MA 1979    11   9 1979-11-09   Fri    224\n51     MA 1979     2  14 1979-02-14   Wed    223\n52     MA 1979     7  23 1979-07-23   Mon    223\n53     MA 1979     8   9 1979-08-09 Thurs    223\n54     MA 1979     1   3 1979-01-03   Wed    222\n55     MA 1979     1  22 1979-01-22   Mon    222\n56     MA 1979     6  19 1979-06-19  Tues    222\n57     MA 1979     9   4 1979-09-04  Tues    222\n58     MA 1979     9  21 1979-09-21   Fri    222\n59     MA 1979    10  23 1979-10-23  Tues    222\n60     MA 1979     2   6 1979-02-06  Tues    221\n61     MA 1979     3  19 1979-03-19   Mon    221\n62     MA 1979     4  25 1979-04-25   Wed    221\n63     MA 1979     8  20 1979-08-20   Mon    221\n64     MA 1979     9  18 1979-09-18  Tues    221\n65     MA 1979    11   6 1979-11-06  Tues    221\n66     MA 1979     2  20 1979-02-20  Tues    220\n67     MA 1979     4  26 1979-04-26 Thurs    220\n68     MA 1979     8  13 1979-08-13   Mon    220\n69     MA 1979     8  17 1979-08-17   Fri    220\n70     MA 1979     9  10 1979-09-10   Mon    220\n71     MA 1979    10  25 1979-10-25 Thurs    220\n72     MA 1979    10  26 1979-10-26   Fri    220\n73     MA 1979     3   6 1979-03-06  Tues    219\n74     MA 1979     6   1 1979-06-01   Fri    219\n75     MA 1979     8  29 1979-08-29   Wed    219\n76     MA 1979     9  27 1979-09-27 Thurs    219\n77     MA 1979    10   1 1979-10-01   Mon    219\n78     MA 1979    11  19 1979-11-19   Mon    219\n79     MA 1979     4  24 1979-04-24  Tues    218\n80     MA 1979     5  21 1979-05-21   Mon    218\n81     MA 1979     6  28 1979-06-28 Thurs    218\n82     MA 1979     7   9 1979-07-09   Mon    218\n83     MA 1979     8   3 1979-08-03   Fri    218\n84     MA 1979     9   6 1979-09-06 Thurs    218\n85     MA 1979    10   3 1979-10-03   Wed    218\n86     MA 1979     6   7 1979-06-07 Thurs    217\n87     MA 1979     6  14 1979-06-14 Thurs    217\n88     MA 1979     7   3 1979-07-03  Tues    217\n89     MA 1979     8   8 1979-08-08   Wed    217\n90     MA 1979    10   4 1979-10-04 Thurs    217\n91     MA 1979    10  22 1979-10-22   Mon    217\n92     MA 1979    10  29 1979-10-29   Mon    217\n93     MA 1979    10   9 1979-10-09  Tues    216\n94     MA 1979     1  16 1979-01-16  Tues    215\n95     MA 1979     3  13 1979-03-13  Tues    215\n96     MA 1979     5   4 1979-05-04   Fri    215\n97     MA 1979     5  14 1979-05-14   Mon    215\n98     MA 1979     6  22 1979-06-22   Fri    215\n99     MA 1979     3  30 1979-03-30   Fri    214\n100    MA 1979     6   5 1979-06-05  Tues    214\n101    MA 1979    12  14 1979-12-14   Fri    214\n102    MA 1979    12  27 1979-12-27 Thurs    214\n103    MA 1979     3   8 1979-03-08 Thurs    213\n104    MA 1979     4  18 1979-04-18   Wed    213\n105    MA 1979     8  28 1979-08-28  Tues    213\n106    MA 1979    10  12 1979-10-12   Fri    213\n107    MA 1979    11  14 1979-11-14   Wed    213\n108    MA 1979    12  31 1979-12-31   Mon    213\n109    MA 1979     4  23 1979-04-23   Mon    212\n110    MA 1979     5  11 1979-05-11   Fri    212\n111    MA 1979     5  18 1979-05-18   Fri    212\n112    MA 1979     5  30 1979-05-30   Wed    212\n113    MA 1979     7   6 1979-07-06   Fri    212\n114    MA 1979     7  19 1979-07-19 Thurs    212\n115    MA 1979    10  17 1979-10-17   Wed    212\n116    MA 1979    10  24 1979-10-24   Wed    212\n117    MA 1979    12  11 1979-12-11  Tues    212\n118    MA 1979     2   5 1979-02-05   Mon    211\n119    MA 1979     3   7 1979-03-07   Wed    211\n120    MA 1979     3  29 1979-03-29 Thurs    211\n121    MA 1979     9   7 1979-09-07   Fri    211\n122    MA 1979    10  30 1979-10-30  Tues    211\n123    MA 1979     7   2 1979-07-02   Mon    210\n124    MA 1979     1  15 1979-01-15   Mon    209\n125    MA 1979     3  26 1979-03-26   Mon    209\n126    MA 1979     4   4 1979-04-04   Wed    209\n127    MA 1979     7  15 1979-07-15   Sun    209\n128    MA 1979     2   8 1979-02-08 Thurs    208\n129    MA 1979     4  11 1979-04-11   Wed    208\n130    MA 1979     6   6 1979-06-06   Wed    208\n131    MA 1979     6  30 1979-06-30   Sat    208\n132    MA 1979     7  30 1979-07-30   Mon    208\n133    MA 1979     9  29 1979-09-29   Sat    208\n134    MA 1979    10  10 1979-10-10   Wed    208\n135    MA 1979     2   9 1979-02-09   Fri    207\n136    MA 1979     3   9 1979-03-09   Fri    207\n137    MA 1979     4  20 1979-04-20   Fri    207\n138    MA 1979     6  20 1979-06-20   Wed    207\n139    MA 1979     7  26 1979-07-26 Thurs    207\n140    MA 1979     8  21 1979-08-21  Tues    207\n141    MA 1979     9  25 1979-09-25  Tues    207\n142    MA 1979    11  26 1979-11-26   Mon    207\n143    MA 1979     1   2 1979-01-02  Tues    206\n144    MA 1979     2  22 1979-02-22 Thurs    206\n145    MA 1979     7  12 1979-07-12 Thurs    206\n146    MA 1979     7  13 1979-07-13   Fri    206\n147    MA 1979     9   5 1979-09-05   Wed    206\n148    MA 1979     5  25 1979-05-25   Fri    205\n149    MA 1979    11  23 1979-11-23   Fri    205\n150    MA 1979    11  28 1979-11-28   Wed    205\n151    MA 1979    12   4 1979-12-04  Tues    205\n152    MA 1979     1  26 1979-01-26   Fri    204\n153    MA 1979     3  22 1979-03-22 Thurs    204\n154    MA 1979     5  16 1979-05-16   Wed    204\n155    MA 1979    10  16 1979-10-16  Tues    204\n156    MA 1979    11  16 1979-11-16   Fri    204\n157    MA 1979    12  24 1979-12-24   Mon    204\n158    MA 1979     3   2 1979-03-02   Fri    203\n159    MA 1979     4   3 1979-04-03  Tues    203\n160    MA 1979     4  12 1979-04-12 Thurs    203\n161    MA 1979     5   3 1979-05-03 Thurs    203\n162    MA 1979    10   6 1979-10-06   Sat    203\n163    MA 1979    11   1 1979-11-01 Thurs    203\n164    MA 1979    11  30 1979-11-30   Fri    203\n165    MA 1979    12  10 1979-12-10   Mon    203\n166    MA 1979    12  17 1979-12-17   Mon    203\n167    MA 1979     6   8 1979-06-08   Fri    202\n168    MA 1979     6  15 1979-06-15   Fri    202\n169    MA 1979    11  11 1979-11-11   Sun    202\n170    MA 1979     1  29 1979-01-29   Mon    201\n171    MA 1979     3  21 1979-03-21   Wed    201\n172    MA 1979     3  28 1979-03-28   Wed    201\n173    MA 1979     4  10 1979-04-10  Tues    201\n174    MA 1979     5   2 1979-05-02   Wed    201\n175    MA 1979    10  15 1979-10-15   Mon    201\n176    MA 1979    11   7 1979-11-07   Wed    201\n177    MA 1979     1  18 1979-01-18 Thurs    200\n178    MA 1979     4  19 1979-04-19 Thurs    200\n179    MA 1979     7  11 1979-07-11   Wed    200\n180    MA 1979     7  21 1979-07-21   Sat    200\n181    MA 1979     8   5 1979-08-05   Sun    200\n182    MA 1979    10  19 1979-10-19   Fri    200\n183    MA 1979    11   2 1979-11-02   Fri    200\n184    MA 1979    11  15 1979-11-15 Thurs    200\n185    MA 1979    11  20 1979-11-20  Tues    200\n186    MA 1979     1  11 1979-01-11 Thurs    199\n187    MA 1979     2  12 1979-02-12   Mon    199\n188    MA 1979     3  14 1979-03-14   Wed    199\n189    MA 1979     5  22 1979-05-22  Tues    199\n190    MA 1979     2  26 1979-02-26   Mon    198\n191    MA 1979     3  15 1979-03-15 Thurs    198\n192    MA 1979     6  13 1979-06-13   Wed    198\n193    MA 1979     6  18 1979-06-18   Mon    198\n194    MA 1979     7  31 1979-07-31  Tues    198\n195    MA 1979     8  26 1979-08-26   Sun    198\n196    MA 1979     9  13 1979-09-13 Thurs    198\n197    MA 1979    11  13 1979-11-13  Tues    198\n198    MA 1979    12   7 1979-12-07   Fri    198\n199    MA 1979     5  31 1979-05-31 Thurs    197\n200    MA 1979    11  27 1979-11-27  Tues    197\n201    MA 1979    12   6 1979-12-06 Thurs    197\n202    MA 1979     2  21 1979-02-21   Wed    196\n203    MA 1979     4  17 1979-04-17  Tues    196\n204    MA 1979     4  21 1979-04-21   Sat    196\n205    MA 1979     6  25 1979-06-25   Mon    196\n206    MA 1979     8   4 1979-08-04   Sat    196\n207    MA 1979     8   7 1979-08-07  Tues    196\n208    MA 1979    10   8 1979-10-08   Mon    196\n209    MA 1979    10  11 1979-10-11 Thurs    196\n210    MA 1979     1  13 1979-01-13   Sat    195\n211    MA 1979     4  13 1979-04-13   Fri    195\n212    MA 1979     1  19 1979-01-19   Fri    194\n213    MA 1979     3  16 1979-03-16   Fri    194\n214    MA 1979     5   7 1979-05-07   Mon    194\n215    MA 1979     9  12 1979-09-12   Wed    194\n216    MA 1979    11   5 1979-11-05   Mon    194\n217    MA 1979     1  10 1979-01-10   Wed    193\n218    MA 1979     1  30 1979-01-30  Tues    193\n219    MA 1979     3  11 1979-03-11   Sun    193\n220    MA 1979     6  17 1979-06-17   Sun    193\n221    MA 1979     8  27 1979-08-27   Mon    193\n222    MA 1979     9   9 1979-09-09   Sun    193\n223    MA 1979    12  13 1979-12-13 Thurs    193\n224    MA 1979     1   5 1979-01-05   Fri    192\n225    MA 1979     2  19 1979-02-19   Mon    192\n226    MA 1979     3   1 1979-03-01 Thurs    192\n227    MA 1979     7  14 1979-07-14   Sat    192\n228    MA 1979    11  29 1979-11-29 Thurs    192\n229    MA 1979     1   8 1979-01-08   Mon    191\n230    MA 1979     1  12 1979-01-12   Fri    191\n231    MA 1979     2  15 1979-02-15 Thurs    191\n232    MA 1979     3  24 1979-03-24   Sat    191\n233    MA 1979    10  28 1979-10-28   Sun    191\n234    MA 1979     4   2 1979-04-02   Mon    190\n235    MA 1979     5  27 1979-05-27   Sun    190\n236    MA 1979    12   3 1979-12-03   Mon    190\n237    MA 1979    12  12 1979-12-12   Wed    190\n238    MA 1979     4   1 1979-04-01   Sun    189\n239    MA 1979     4   5 1979-04-05 Thurs    189\n240    MA 1979     8  22 1979-08-22   Wed    189\n241    MA 1979    12  26 1979-12-26   Wed    189\n242    MA 1979     1  24 1979-01-24   Wed    188\n243    MA 1979     7  16 1979-07-16   Mon    188\n244    MA 1979    11  21 1979-11-21   Wed    188\n245    MA 1979     4  16 1979-04-16   Mon    187\n246    MA 1979     6  10 1979-06-10   Sun    187\n247    MA 1979     8  11 1979-08-11   Sat    187\n248    MA 1979     2   7 1979-02-07   Wed    186\n249    MA 1979     3  17 1979-03-17   Sat    186\n250    MA 1979     3  27 1979-03-27  Tues    186\n251    MA 1979     4   7 1979-04-07   Sat    186\n252    MA 1979     5   9 1979-05-09   Wed    186\n253    MA 1979     5  15 1979-05-15  Tues    186\n254    MA 1979     5  17 1979-05-17 Thurs    186\n255    MA 1979     7   7 1979-07-07   Sat    186\n256    MA 1979     9  15 1979-09-15   Sat    186\n257    MA 1979    10   7 1979-10-07   Sun    186\n258    MA 1979     3  12 1979-03-12   Mon    185\n259    MA 1979     3  20 1979-03-20  Tues    185\n260    MA 1979    12   5 1979-12-05   Wed    185\n261    MA 1979     1   4 1979-01-04 Thurs    184\n262    MA 1979     2   1 1979-02-01 Thurs    184\n263    MA 1979     5  29 1979-05-29  Tues    184\n264    MA 1979     9   3 1979-09-03   Mon    184\n265    MA 1979    11   8 1979-11-08 Thurs    184\n266    MA 1979    12  19 1979-12-19   Wed    184\n267    MA 1979    12  21 1979-12-21   Fri    184\n268    MA 1979     1  23 1979-01-23  Tues    183\n269    MA 1979     4  28 1979-04-28   Sat    183\n270    MA 1979     6  24 1979-06-24   Sun    183\n271    MA 1979     7  28 1979-07-28   Sat    183\n272    MA 1979     7  29 1979-07-29   Sun    183\n273    MA 1979     8  19 1979-08-19   Sun    183\n274    MA 1979    10  21 1979-10-21   Sun    183\n275    MA 1979    10  18 1979-10-18 Thurs    182\n276    MA 1979     1   9 1979-01-09  Tues    180\n277    MA 1979     2  11 1979-02-11   Sun    180\n278    MA 1979     5  19 1979-05-19   Sat    180\n279    MA 1979     5  28 1979-05-28   Mon    180\n280    MA 1979     6   3 1979-06-03   Sun    180\n281    MA 1979    10  20 1979-10-20   Sat    180\n282    MA 1979    10  31 1979-10-31   Wed    180\n283    MA 1979    12  18 1979-12-18  Tues    180\n284    MA 1979     1  31 1979-01-31   Wed    179\n285    MA 1979     3  10 1979-03-10   Sat    179\n286    MA 1979     4  29 1979-04-29   Sun    179\n287    MA 1979     7   5 1979-07-05 Thurs    179\n288    MA 1979     8  30 1979-08-30 Thurs    179\n289    MA 1979     1  25 1979-01-25 Thurs    178\n290    MA 1979     5  26 1979-05-26   Sat    178\n291    MA 1979    10  14 1979-10-14   Sun    178\n292    MA 1979     2  28 1979-02-28   Wed    177\n293    MA 1979     7   8 1979-07-08   Sun    177\n294    MA 1979     2  25 1979-02-25   Sun    176\n295    MA 1979     4  15 1979-04-15   Sun    176\n296    MA 1979     9  22 1979-09-22   Sat    176\n297    MA 1979     6  23 1979-06-23   Sat    175\n298    MA 1979     7  22 1979-07-22   Sun    175\n299    MA 1979    10  27 1979-10-27   Sat    175\n300    MA 1979     2  10 1979-02-10   Sat    174\n301    MA 1979     8  25 1979-08-25   Sat    174\n302    MA 1979     9  16 1979-09-16   Sun    174\n303    MA 1979    11  12 1979-11-12   Mon    174\n304    MA 1979    11  17 1979-11-17   Sat    174\n305    MA 1979     6   2 1979-06-02   Sat    173\n306    MA 1979     7   1 1979-07-01   Sun    173\n307    MA 1979    10  13 1979-10-13   Sat    173\n308    MA 1979     3  25 1979-03-25   Sun    172\n309    MA 1979     6  16 1979-06-16   Sat    172\n310    MA 1979    11  10 1979-11-10   Sat    172\n311    MA 1979     2  13 1979-02-13  Tues    171\n312    MA 1979     3  31 1979-03-31   Sat    171\n313    MA 1979     6   9 1979-06-09   Sat    171\n314    MA 1979    11  25 1979-11-25   Sun    171\n315    MA 1979    12  22 1979-12-22   Sat    171\n316    MA 1979     5   6 1979-05-06   Sun    170\n317    MA 1979     9   2 1979-09-02   Sun    170\n318    MA 1979     1   6 1979-01-06   Sat    169\n319    MA 1979     8  12 1979-08-12   Sun    169\n320    MA 1979     9   8 1979-09-08   Sat    169\n321    MA 1979    11   3 1979-11-03   Sat    169\n322    MA 1979    12  15 1979-12-15   Sat    169\n323    MA 1979     2  18 1979-02-18   Sun    168\n324    MA 1979     9   1 1979-09-01   Sat    168\n325    MA 1979    11  18 1979-11-18   Sun    166\n326    MA 1979    12   1 1979-12-01   Sat    166\n327    MA 1979     2  24 1979-02-24   Sat    165\n328    MA 1979     4  22 1979-04-22   Sun    165\n329    MA 1979     4  14 1979-04-14   Sat    164\n330    MA 1979     7   4 1979-07-04   Wed    164\n331    MA 1979     9  23 1979-09-23   Sun    164\n332    MA 1979    12   2 1979-12-02   Sun    164\n333    MA 1979     6   4 1979-06-04   Mon    163\n334    MA 1979    12  16 1979-12-16   Sun    163\n335    MA 1979     1  21 1979-01-21   Sun    162\n336    MA 1979     1  27 1979-01-27   Sat    162\n337    MA 1979     5  12 1979-05-12   Sat    162\n338    MA 1979     9  30 1979-09-30   Sun    162\n339    MA 1979    12  29 1979-12-29   Sat    161\n340    MA 1979    12  23 1979-12-23   Sun    160\n341    MA 1979     2   3 1979-02-03   Sat    159\n342    MA 1979     8  18 1979-08-18   Sat    159\n343    MA 1979     1  20 1979-01-20   Sat    158\n344    MA 1979     2  17 1979-02-17   Sat    156\n345    MA 1979     3   3 1979-03-03   Sat    156\n346    MA 1979     3   4 1979-03-04   Sun    156\n347    MA 1979    11  24 1979-11-24   Sat    156\n348    MA 1979    12   9 1979-12-09   Sun    156\n349    MA 1979     1   7 1979-01-07   Sun    155\n350    MA 1979     1  14 1979-01-14   Sun    155\n351    MA 1979     1  17 1979-01-17   Wed    155\n352    MA 1979     4   8 1979-04-08   Sun    155\n353    MA 1979    11   4 1979-11-04   Sun    155\n354    MA 1979    12  20 1979-12-20 Thurs    154\n355    MA 1979     2   4 1979-02-04   Sun    153\n356    MA 1979     5  20 1979-05-20   Sun    153\n357    MA 1979     3  18 1979-03-18   Sun    152\n358    MA 1979    12  30 1979-12-30   Sun    152\n359    MA 1979    12   8 1979-12-08   Sat    151\n360    MA 1979    12  25 1979-12-25  Tues    150\n361    MA 1979     5   5 1979-05-05   Sat    148\n362    MA 1979    11  22 1979-11-22 Thurs    147\n363    MA 1979     1  28 1979-01-28   Sun    146\n364    MA 1979     1   1 1979-01-01   Mon    144\n365    MA 1979     5  13 1979-05-13   Sun    143\n\n\nPart b\nMake a table showing the five states with the most births between September 9, 1979 and September 12, 1979, including the 9th and 12th. Arrange the table in descending order of births.\n\nCodeBirthdays |&gt;\n  filter(year == 1979, month == 9, day &gt;= 9,day &lt;= 12) |&gt;\n  arrange(desc(births)) |&gt;\n  group_by(state) |&gt;\n  summarize(total_births = sum(births)) |&gt;\n  arrange(desc(total_births))\n\n# A tibble: 51 × 2\n   state total_births\n   &lt;chr&gt;        &lt;int&gt;\n 1 CA            4422\n 2 TX            3151\n 3 NY            2621\n 4 IL            2235\n 5 OH            1938\n 6 PA            1830\n 7 MI            1651\n 8 FL            1406\n 9 GA            1138\n10 NJ            1073\n# ℹ 41 more rows",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>dates</span>"
    ]
  },
  {
    "objectID": "ica/ica-dates.html#solutions",
    "href": "ica/ica-dates.html#solutions",
    "title": "\n19  dates\n",
    "section": "\n19.4 Solutions",
    "text": "19.4 Solutions\n\nClick for Solutions\nExample 1: Single Verb\n\nCodeggplot(penguins, aes(y = body_mass_g, x = bill_length_mm, color = species)) + \n  geom_point() + \n  facet_wrap(~ sex)\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\nCode# Get data on only Adelie penguins that weigh more than 4700g\npenguins |&gt; \n  filter(species == \"Adelie\", body_mass_g &gt; 4700)\n\n# A tibble: 2 × 8\n  species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;chr&gt;   &lt;chr&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n1 Adelie  Biscoe           41              20               203        4725\n2 Adelie  Biscoe           43.2            19               197        4775\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\nCode# Get data on penguin body mass only\n# Show just the first 6 rows\npenguins |&gt; \n  select(body_mass_g) |&gt; \n  head()\n\n# A tibble: 6 × 1\n  body_mass_g\n        &lt;dbl&gt;\n1        3750\n2        3800\n3        3250\n4          NA\n5        3450\n6        3650\n\nCode# Sort the penguins from smallest to largest body mass\n# Show just the first 6 rows\npenguins |&gt; \n  arrange(body_mass_g) |&gt; \n  head()\n\n# A tibble: 6 × 8\n  species   island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;chr&gt;     &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n1 Chinstrap Dream               46.9          16.6               192        2700\n2 Adelie    Biscoe              36.5          16.6               181        2850\n3 Adelie    Biscoe              36.4          17.1               184        2850\n4 Adelie    Biscoe              34.5          18.1               187        2900\n5 Adelie    Dream               33.1          16.1               178        2900\n6 Adelie    Torgersen           38.6          17                 188        2900\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\nCode# Calculate the average body mass across all penguins\n# Note: na.rm = TRUE removes the NAs from the calculation\npenguins |&gt; \n  summarize(mean = mean(body_mass_g, na.rm = TRUE))\n\n# A tibble: 1 × 1\n   mean\n  &lt;dbl&gt;\n1 4202.\n\nCode# Calculate the average body mass by species\npenguins |&gt; \n  group_by(species) |&gt; \n  summarize(mean = mean(body_mass_g, na.rm = TRUE))\n\n# A tibble: 3 × 2\n  species    mean\n  &lt;chr&gt;     &lt;dbl&gt;\n1 Adelie    3701.\n2 Chinstrap 3733.\n3 Gentoo    5076.\n\nCode# Create a new column that records body mass in kilograms, not grams\n# NOTE: there are 1000 g in 1 kg\n# Show just the first 6 rows\npenguins |&gt; \n  mutate(body_mass_kg = body_mass_g/1000) |&gt; \n  head()\n\n# A tibble: 6 × 9\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;chr&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 3 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;, body_mass_kg &lt;dbl&gt;\n\n\n\n\nCodeggplot(penguins, aes(x = species)) + \n  geom_bar()\n\n\n\n\n\n\nCodepenguins |&gt; \n  group_by(species) |&gt; \n  summarize(n())\n\n# A tibble: 3 × 2\n  species   `n()`\n  &lt;chr&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\nCodepenguins |&gt; \n  count(species)\n\n# A tibble: 3 × 2\n  species       n\n  &lt;chr&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\n\nExample 2: Multiple Verbs\n\nCode# Sort Gentoo penguins from biggest to smallest with respect to their \n# bill length in cm (there are 10 mm in a cm)\npenguins |&gt; \n  filter(species == \"Gentoo\") |&gt; \n  mutate(bill_length_cm = bill_length_mm / 10) |&gt; \n  arrange(desc(bill_length_cm))\n\n# A tibble: 124 × 9\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;chr&gt;   &lt;chr&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n 1 Gentoo  Biscoe           59.6          17                 230        6050\n 2 Gentoo  Biscoe           55.9          17                 228        5600\n 3 Gentoo  Biscoe           55.1          16                 230        5850\n 4 Gentoo  Biscoe           54.3          15.7               231        5650\n 5 Gentoo  Biscoe           53.4          15.8               219        5500\n 6 Gentoo  Biscoe           52.5          15.6               221        5450\n 7 Gentoo  Biscoe           52.2          17.1               228        5400\n 8 Gentoo  Biscoe           52.1          17                 230        5550\n 9 Gentoo  Biscoe           51.5          16.3               230        5500\n10 Gentoo  Biscoe           51.3          14.2               218        5300\n# ℹ 114 more rows\n# ℹ 3 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;, bill_length_cm &lt;dbl&gt;\n\nCode# Sort the species from smallest to biggest with respect to their \n# average bill length in cm\npenguins |&gt; \n  mutate(bill_length_cm = bill_length_mm / 10) |&gt; \n  group_by(species) |&gt; \n  summarize(mean_bill_length = mean(bill_length_cm, na.rm = TRUE)) |&gt; \n  arrange(desc(mean_bill_length))\n\n# A tibble: 3 × 2\n  species   mean_bill_length\n  &lt;chr&gt;                &lt;dbl&gt;\n1 Chinstrap             4.88\n2 Gentoo                4.75\n3 Adelie                3.88\n\n\nExample 3: Interpret Code\nExercise 1: More Filtering\nPart a\n\nCode# Create a dataset with just Adelie and Chinstrap using %in%\n# Pipe this into `count(species)` to confirm that you only have these 2 species\npenguins |&gt;\n  filter(species %in% c(\"Adelie\", \"Chinstrap\")) |&gt;\n  count(species)\n\n# A tibble: 2 × 2\n  species       n\n  &lt;chr&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n\n\n\nCode# Create a dataset with just Adelie and Chinstrap using !=\n# Pipe this into `count(species)` to confirm that you only have these 2 species\npenguins |&gt;\n  filter(species != \"Gentoo\") |&gt;\n  count(species)\n\n# A tibble: 2 × 2\n  species       n\n  &lt;chr&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n\n\nPart b\nPart c\nIt might get rid of data points even if they have complete information on the variables we need, just because they’re missing info on variables we don’t need.\nExercise 2: More selecting\n\nCode# First: recall the variable names\nnames(penguins)\n\n[1] \"species\"           \"island\"            \"bill_length_mm\"   \n[4] \"bill_depth_mm\"     \"flipper_length_mm\" \"body_mass_g\"      \n[7] \"sex\"               \"year\"             \n\n\n\nCode# Use a shortcut to keep everything but the year and island variables\npenguins |&gt; \n  select(-year, -island)\n\n# A tibble: 344 × 6\n   species bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex   \n   &lt;chr&gt;            &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt; \n 1 Adelie            39.1          18.7               181        3750 male  \n 2 Adelie            39.5          17.4               186        3800 female\n 3 Adelie            40.3          18                 195        3250 female\n 4 Adelie            NA            NA                  NA          NA &lt;NA&gt;  \n 5 Adelie            36.7          19.3               193        3450 female\n 6 Adelie            39.3          20.6               190        3650 male  \n 7 Adelie            38.9          17.8               181        3625 female\n 8 Adelie            39.2          19.6               195        4675 male  \n 9 Adelie            34.1          18.1               193        3475 &lt;NA&gt;  \n10 Adelie            42            20.2               190        4250 &lt;NA&gt;  \n# ℹ 334 more rows\n\n\n\nCode# Use a shortcut to keep only species and the penguin characteristics measured in mm\npenguins |&gt; \n  select(species, ends_with(\"mm\"))\n\n# A tibble: 344 × 4\n   species bill_length_mm bill_depth_mm flipper_length_mm\n   &lt;chr&gt;            &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;\n 1 Adelie            39.1          18.7               181\n 2 Adelie            39.5          17.4               186\n 3 Adelie            40.3          18                 195\n 4 Adelie            NA            NA                  NA\n 5 Adelie            36.7          19.3               193\n 6 Adelie            39.3          20.6               190\n 7 Adelie            38.9          17.8               181\n 8 Adelie            39.2          19.6               195\n 9 Adelie            34.1          18.1               193\n10 Adelie            42            20.2               190\n# ℹ 334 more rows\n\n\n\nCode# Use a shortcut to keep only species and bill-related measurements\npenguins |&gt; \n  select(species, starts_with(\"bill\"))\n\n# A tibble: 344 × 3\n   species bill_length_mm bill_depth_mm\n   &lt;chr&gt;            &lt;dbl&gt;         &lt;dbl&gt;\n 1 Adelie            39.1          18.7\n 2 Adelie            39.5          17.4\n 3 Adelie            40.3          18  \n 4 Adelie            NA            NA  \n 5 Adelie            36.7          19.3\n 6 Adelie            39.3          20.6\n 7 Adelie            38.9          17.8\n 8 Adelie            39.2          19.6\n 9 Adelie            34.1          18.1\n10 Adelie            42            20.2\n# ℹ 334 more rows\n\n\n\nCode# Use a shortcut to keep only species and the length-related characteristics\npenguins |&gt; \n  select(species, contains(\"length\"))\n\n# A tibble: 344 × 3\n   species bill_length_mm flipper_length_mm\n   &lt;chr&gt;            &lt;dbl&gt;             &lt;dbl&gt;\n 1 Adelie            39.1               181\n 2 Adelie            39.5               186\n 3 Adelie            40.3               195\n 4 Adelie            NA                  NA\n 5 Adelie            36.7               193\n 6 Adelie            39.3               190\n 7 Adelie            38.9               181\n 8 Adelie            39.2               195\n 9 Adelie            34.1               193\n10 Adelie            42                 190\n# ℹ 334 more rows\n\n\nExercise 3: Arranging, counting, & grouping by multiple variables\n\nCode# Change this code to sort the penguins by species, and then island name\n# NOTE: The first row should be an Adelie penguin living on Biscoe island\npenguins |&gt; \n  arrange(species, island) |&gt; \n  head()\n\n# A tibble: 6 × 8\n  species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;chr&gt;   &lt;chr&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;dbl&gt;       &lt;dbl&gt;\n1 Adelie  Biscoe           37.8          18.3               174        3400\n2 Adelie  Biscoe           37.7          18.7               180        3600\n3 Adelie  Biscoe           35.9          19.2               189        3800\n4 Adelie  Biscoe           38.2          18.1               185        3950\n5 Adelie  Biscoe           38.8          17.2               180        3800\n6 Adelie  Biscoe           35.3          18.9               187        3800\n# ℹ 2 more variables: sex &lt;chr&gt;, year &lt;dbl&gt;\n\n\n\nCode# Change this code to count the number of male/female penguins observed for each species\npenguins |&gt; \n  count(species, sex)\n\n# A tibble: 8 × 3\n  species   sex        n\n  &lt;chr&gt;     &lt;chr&gt;  &lt;int&gt;\n1 Adelie    female    73\n2 Adelie    male      73\n3 Adelie    &lt;NA&gt;       6\n4 Chinstrap female    34\n5 Chinstrap male      34\n6 Gentoo    female    58\n7 Gentoo    male      61\n8 Gentoo    &lt;NA&gt;       5\n\n\n\nCode# Change this code to calculate the average body mass by species and sex\npenguins |&gt; \n  group_by(species, sex) |&gt; \n  summarize(mean = mean(body_mass_g, na.rm = TRUE))\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 8 × 3\n# Groups:   species [3]\n  species   sex     mean\n  &lt;chr&gt;     &lt;chr&gt;  &lt;dbl&gt;\n1 Adelie    female 3369.\n2 Adelie    male   4043.\n3 Adelie    &lt;NA&gt;   3540 \n4 Chinstrap female 3527.\n5 Chinstrap male   3939.\n6 Gentoo    female 4680.\n7 Gentoo    male   5485.\n8 Gentoo    &lt;NA&gt;   4588.\n\n\nExercise 4: Dates\n\nCode# Get today's date\nas.Date(today())\n\n[1] \"2025-04-08\"\n\nCode# Let's store this as \"today\" so we can work with it below\ntoday &lt;- as.Date(today())\n\n# Check out the class of this object\nclass(today)\n\n[1] \"Date\"\n\n\n\nCode# Records just the 4-digit year\nyear(today)\n\n[1] 2025\n\n\n\nCode# Today's month, as a number or label\nmonth(today)\n\n[1] 4\n\nCodemonth(today, label = TRUE)\n\n[1] Apr\n12 Levels: Jan &lt; Feb &lt; Mar &lt; Apr &lt; May &lt; Jun &lt; Jul &lt; Aug &lt; Sep &lt; ... &lt; Dec\n\n\n\nCode# This is the week of the year (1-52)\nweek(today)\n\n[1] 14\n\n\n\nCode# Day of the month (1-31) and day of the year (1-366)\nmday(today)\n\n[1] 8\n\nCodeyday(today)  # This is often called the \"Julian day\"\n\n[1] 98\n\n\n\nCode# Day of the week as a number or label\nwday(today)\n\n[1] 3\n\nCodewday(today, label = TRUE)\n\n[1] Tue\nLevels: Sun &lt; Mon &lt; Tue &lt; Wed &lt; Thu &lt; Fri &lt; Sat\n\n\n\nCode# today is on or after Feb 14, 2024\ntoday &gt;= ymd(\"2024-02-14\")\n\n[1] TRUE\n\nCode# today is not before Feb 14, 2024\ntoday &lt; ymd(\"2024-02-14\")\n\n[1] FALSE",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>dates</span>"
    ]
  },
  {
    "objectID": "ica/ica-dates.html#footnotes",
    "href": "ica/ica-dates.html#footnotes",
    "title": "\n19  dates\n",
    "section": "",
    "text": "The fivethirtyeight package has more recent data.↩︎",
    "crumbs": [
      "In-class Activities",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>dates</span>"
    ]
  }
]